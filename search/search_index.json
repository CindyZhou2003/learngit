{"config":{"lang":["zh","en"],"separator":"[\\s\\-\\.]+","pipeline":["stemmer"]},"docs":[{"location":"index.html","title":"Welcome to Cindy's site","text":"<p> \u7ea6 100 \u4e2a\u5b57 </p>"},{"location":"index.html#about-this-site","title":"About this site","text":"<p>Some notes about courses I've taken during my years in ZJU-SE. Still being constructed... There may be some problems, you can contact me through github site.</p>"},{"location":"index.html#about-me","title":"About me","text":"<p>\\ ^ ~ ^ /</p>"},{"location":"index.html#commands-about-how-to-build-the-site","title":"Commands about how to build the site","text":"<p>For full documentation visit mkdocs.org.</p> <ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> <li><code>mkdocs gh-deploy</code> - Push to the github.</li> </ul>"},{"location":"index.html#atrribute","title":"Atrribute","text":"<p>The icons are attribted By Freepik.</p> <p>\u6587\u6863\u6a21\u677f\u53c2\u8003\u4e86\u54b8\u9c7c\u6684(https://github.com/xuan-insr/xuan-insr.github.io)</p>"},{"location":"Courses/ADS.html","title":"Advanced Data Structure","text":"<p> \u7ea6 6199 \u4e2a\u5b57  155 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 23 \u5206\u949f</p>"},{"location":"Courses/ADS.html#1-trees","title":"1 Trees","text":""},{"location":"Courses/ADS.html#avl-trees","title":"AVL trees \u5e73\u8861\u6811","text":"<p>\u5e73\u8861\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u76ee\u7684\u662f\u4f7f\u52a8\u6001\u641c\u7d22\u66f4\u5feb</p> <p>\u6240\u6709\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\uff1a\\(O(logN)\\)\uff0c\u5373\u9ad8\u5ea6 h</p> <p>\u5728\u9ad8\u5ea6\u4e3a h \u7684 AVL \u6811\u4e2d\uff0c\u6700\u5c11\u8282\u70b9\u6570 \\(n_h\u2248\\frac{1}{\\sqrt{5}}(\\frac{1+\\sqrt{5}}{2})^{h+3}-1\\)\uff0c\u5176\u4e2d \\(h=-1,n_h=0\\)\u200b\u200b\uff08\u7a7a\u6811\u7684\u9ad8\u5ea6\u5b9a\u4e49\u4e3a-1\uff09</p> <p>\\(n_h=n_{h-1}+n_{h-2}+1\\)</p> h/depth \\(n_h\\) \u6700\u5c11\u8282\u70b9\u6570 0\uff08\u4e00\u4e2a\u7ed3\u70b9root\uff09 1 1 2 2 4 3 7 4 12 5 20 6 33 <p>\u3010Definition\u3011The balance factor \\(BF( node ) = h_L -h_R\\)\u200b  .  In an AVL tree, BF( node ) = -1, 0, or 1.</p> <p>\u5728 AVL \u6811\u4e2d\uff0c\u4e0d\u53ef\u80fd\u51fa\u73b0\u4e00\u4e2a\u8282\u70b9\u53ca\u5176\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u5e73\u8861\u56e0\u5b50\u90fd\u4e3a - 1\u7684\u60c5\u51b5</p> <ul> <li>In an AVL tree, it is possible to have this situation that the balance factors of a node and both of its children are all +1.</li> </ul>"},{"location":"Courses/ADS.html#insert","title":"Insert","text":"<p>\u5148\u63d2\u5165\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a bst\uff0c\u4ece\u4e0b\u5230\u4e0a\u66f4\u65b0 BF\uff0c\u6709\u95ee\u9898\u505a\u65cb\u8f6c</p>"},{"location":"Courses/ADS.html#_1","title":"\u5355\u65cb\u8f6c","text":""},{"location":"Courses/ADS.html#_2","title":"\u53cc\u65cb\u8f6c","text":"<p>left-right \u662fzjg-zag\u53cc\u65cb\u8f6c</p>"},{"location":"Courses/ADS.html#questions","title":"Questions","text":""},{"location":"Courses/ADS.html#splay-trees","title":"Splay trees \u4f38\u5c55\u6811","text":"<p>\u6027\u80fd\u7c7b AVL \u6811\uff0c\u4f46\u4e0d\u5173\u5fc3\u662f\u5426\u5e73\u8861\u6bcf\u8bbf\u95ee\u4e00\u4e2a\u8282\u70b9 X\uff0c\u4ece\u8fd9\u4e2a\u8282\u70b9\u5411\u4e0a\u5bf9\u6811\u8fdb\u884c\u4e00\u7cfb\u5217\u65cb\u8f6c\uff0c\u4f7f\u8fd9\u4e2a\u8282\u70b9\u53d8\u6210\u6839\u5982\u679c X \u7684\u7236\u8282\u70b9\u662f\u6839\uff0c\u5355\u65cb\u8f6c X \u548c\u6811\u6839\uff1b\u5982\u679c X \u6709\u7236\u4eb2 P \u548c\u7956\u7236 G\uff0c\u53cc\u65cb\u8f6c\uff08zigzig \u6216 zigzag\uff09</p> <p></p> <p>All of the Zig, Zig-zig, and Zig-zag rotations not only move the accessed node to the root, but also roughly half the depth of most nodes on the path.</p> <p>\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\\(T=O(logN)\\)</p>"},{"location":"Courses/ADS.html#amortized-analysis","title":"Amortized Analysis \u5e73\u644a\u5206\u6790","text":"<p>\u786e\u4fdd amortized bound \u662f \u5b9e\u9645 cost \u7684\u4e0a\u754c\uff0c\u5373     worst case bound \u2265 amortized bound \u2265 actual cost</p>"},{"location":"Courses/ADS.html#aggregate-for-analysis","title":"Aggregate for analysis \u5408\u8ba1\u6cd5","text":"<p>\u5047\u8bbe\u6bcf\u4e2a\u64cd\u4f5c\u7684\u5e73\u644a\u65f6\u95f4\u76f8\u540c</p> <ul> <li>\u53ea\u6709\u7b80\u5355\u7684\u7b97\u6cd5\u53ef\u4ee5\u8fd9\u6837\u8ba1\u7b97</li> </ul>"},{"location":"Courses/ADS.html#accounting-method","title":"Accounting method \u4f1a\u8ba1\u6cd5","text":"<p>\u7c7b\u4f3c\u94f6\u884c\u5b58\u94b1\u5e73\u644a amortized cost \u2265 \u5b9e\u9645 actual cost\u5e73\u644a=\u5b9e\u9645+\u4fe1\u7528 credit\u5b9a\u4e49\uff1acredit=\u644a\u8fd8\u5f00\u9500-\u5b9e\u9645\u5f00\u9500</p> <ul> <li>\u6bcf\u4e2a\u64cd\u4f5c\u7684\u5e73\u644a\u65f6\u95f4\u53ef\u80fd\u4e0d\u540c</li> <li>\u56f0\u96be\u662f\u8981\u731c\u5bf9\u6bcf\u4e2a\u64cd\u4f5c\u7684 credit\uff0c\u6240\u4ee5\u5f15\u5165\u7b2c\u4e09\u79cd\u65b9\u6cd5</li> </ul>"},{"location":"Courses/ADS.html#potential-method","title":"Potential method \u52bf\u80fd\u6cd5","text":"<p>\u5b9a\u4e49\uff1a</p> <p>\\(D_{i-1}\\)\u662f\u5728\u672c\u6b21\u64cd\u4f5c\u524d\u7684\u7ed3\u6784\uff1b\\(D_i\\)\u662f\u672c\u6b21\u64cd\u4f5c\u540e\u7684\u7ed3\u6784potential function \u5c06\u5f53\u524d\u95ee\u9898\u7684\u7ed3\u6784\u6620\u5c04\u6210\u4e00\u4e2a\u6570\u5b57\u2014\u2014\u7ed3\u6784\u7684\u52bf\u80fdcredit = \u4e24\u4e2a\u52bf\u80fd\u51fd\u6570 potential function \u7684\u503c\u7684\u5dee\u2014\u2014\u8fd9\u4e2a\u64cd\u4f5c\u628a\u95ee\u9898\u7684\u7ed3\u6784\u6539\u53d8\u4e86\u591a\u5c11</p> <ul> <li>\u56f0\u96be\u662f\u8981\u627e\u5230\u4e00\u4e2a\u597d\u7684\u52bf\u80fd\u51fd\u6570</li> <li>In amortized analysis, a good potential function should always assume its minimum at the start of the sequence.</li> </ul> <p>\u5bf9\u6b63\u6574\u6570 a, b, c, \u5982\u679c\\(a+b\u2264c\\)\uff0c\u90a3\u4e48\\(lga+lgb\u22642lgc-2\\) </p>"},{"location":"Courses/ADS.html#red-black-trees","title":"Red-Black Trees \u7ea2\u9ed1\u6811","text":"<p>\u5e73\u8861\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u76ee\u7684\u662f\u4f7f\u52a8\u6001\u641c\u7d22\u66f4\u5feb\u5b9a\u4e49\uff1a</p> <ol> <li> <p>Root property: The root is black.</p> </li> <li> <p>External property: Every leaf (Leaf is a NULL child of a node) is black in the Red-Black tree.</p> </li> <li> <p>Internal property: The children of a red node are black. Hence possible parent of red node is a black node.</p> </li> <li> <p>Depth property: All the leaves have the same black depth.</p> </li> <li> <p>Path property: Every simple path from root to descendant leaf node contains the same number of black nodes. </p> </li> </ol> <p>The result of all these above-mentioned properties is that the Red-Black tree is roughly balanced.</p> <p>\u4e00\u68f5\u6709 N \u4e2a\u5185\u90e8\u8282\u70b9\u7684\u7ea2\u9ed1\u6811\uff0c\u5176\u9ad8\u5ea6\u6700\u591a\u4e3a\\(2ln(N+1)\\)\u53ef\u7531\u4ee5\u4e0b\u4e24\u4e2a\u547d\u9898\u5f97\u8bc1</p> <ul> <li>\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9 x\uff0c\\(sizeof(x)\u22652^{blackheight(x)}-1\\)\uff0c\u5373 the number of internal nodes in the subtree rooted at x is more than bh(x) \u5b50\u6811\u5185\u70b9\u6570\u91cf\u5927\u4e8e\u7b49\u4e8e2^bh(x)^-1</li> <li>\\(blackheight(T)&gt;=h(T)/2\\)</li> </ul> <p></p> <p>2 \u548c 3 \u662f\u65cb\u8f6c\u6b21\u6570</p> <ul> <li>In a red-black tree, an internal red node cannot be a node of degree 1</li> </ul>"},{"location":"Courses/ADS.html#insert_1","title":"Insert \u63d2\u5165","text":"<p>\u63d2\u5165\uff0c\u68c0\u67e5\u989c\u8272\uff0c\u65cb\u8f6c </p> <p>\u53ef\u4ee5\u5faa\u73af\u5b9e\u73b0</p>"},{"location":"Courses/ADS.html#delete","title":"Delete \u5220\u9664","text":"<ul> <li>\u5220\u9664\u53f6\u5b50</li> <li>\u5220\u9664 1 \u5ea6\u7684\u8282\u70b9\uff1a\u7528\u5b69\u5b50\u4ee3\u66ff</li> <li>\u5220\u9664 2 \u5ea6\u7684\u8282\u70b9\uff1a\u7528\u5de6\u5b50\u6811\u7684\u6700\u5927\u6216\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u4ee3\u66ff\uff08\u4fdd\u6301\u989c\u8272\u4e0d\u53d8\uff09\uff1b\u5220\u9664\u5b50\u6811\u7684\u4ee3\u66ff\u8282\u70b9</li> </ul> <p>\u603b\u4e4b\uff0c\u5fc5\u987b\u5728\u88ab\u66ff\u4ee3\uff08\u5220\u9664\uff09\u7684\u8def\u5f84\u4e0a\u52a0\u4e00\u4e2a\u9ed1\u8282\u70b9 \u6216\u8005 \u6574\u68f5\u6811\u7684\u9ed1\u9ad8-1 rebalance\uff0c\u4e0d\u9700\u8981\u65cb\u8f6c</p> <p>the number of rotations in the DELETE operation is O(1)</p> <p>\u8fd0\u884c\u65f6\u95f4\uff1a\\(O(logN)\\)\u200b\u5bf9\u6bd4 AVL\uff0c\u7ea2\u9ed1\u6811\u5220\u9664\u6709\u4f18\u52bf</p> <p>\u88ab\u5220\u9664\u7684\u8282\u70b9 x \u4e3a\u9ed1\u8272\uff08x \u4e3a\u7ea2\u8272\u53ef\u4ee5\u76f4\u63a5\u5220\u6389\uff09case 1\uff1ax \u6709\u4e2a\u7ea2\u8272\u7684\u5144\u5f1f w\u4ea4\u6362\u5144\u5f1f\u548c\u5b83\u7236\u4eb2\u7684\u989c\u8272\uff1b\u5bf9\u5144\u5f1f w \u548c\u7236\u4eb2 p \u8fdb\u884c\u4e00\u6b21\u65cb\u8f6c\uff0c\u8f6c\u5316\u4e3a\u4ee5\u4e0b\u4e09\u79cd\u60c5\u51b5</p> <p>case 2\uff1ax \u7684\u5144\u5f1f w \u662f\u9ed1\u8272\uff0c\u4e14 w \u7684\u4e24\u4e2a\u5b50\u8282\u70b9\u90fd\u662f\u9ed1\u8272\u5c06\u5144\u5f1f\u53d8\u7ea2\u8272\uff1b\u5c06 x \u4e0a\u79fb\uff08\u5230\u5b83\u539f\u672c\u7684\u7236\u4eb2\u5904\uff09\uff1b\u68c0\u67e5\u5982\u679c x \u53d8\u6210\u6839\uff0c\u5219\u8868\u660e\u867d\u7136\u6ca1\u6709\u5728\u8fd9\u6761\u8def\u5f84\u4e0a\u52a0\u4e00\u4e2a\u9ed1\u8282\u70b9\uff0c\u4f46\u662f\u6210\u529f\u4ece\u5176\u4ed6\u6240\u6709\u8def\u5f84\u4e0a\u79fb\u9664\u4e86\u4e00\u4e2a\u9ed1\u8282\u70b9\uff0c\u53ef\u4ee5\u5220\u9664\u539f\u6765 x\uff1b\u5faa\u73af</p> <p>case 3\uff1ax \u7684\u5144\u5f1f w \u662f\u9ed1\u8272\uff0c\u4e14\u5de6\u5b69\u5b50\u662f\u7ea2\u8272\uff0c\u53f3\u5b69\u5b50\u662f\u9ed1\u8272\u4ea4\u6362\u5144\u5f1f\u548c\u5b83\u5de6\u5b69\u5b50\u7684\u989c\u8272\uff0c\u4e24\u8005\u8fdb\u884c\u4e00\u6b21\u65cb\u8f6c\uff1b\u8f6c\u5316\u4e3a\u60c5\u51b5 4</p> <p>case 4\uff1ax \u7684\u5144\u5f1f w \u662f\u9ed1\u8272\uff0c\u4e14\u53f3\u5b69\u5b50\u662f\u7ea2\u8272\u5c06\u5144\u5f1f\u53d8\u7ea2\uff0c\u5b83\u7684\u5b69\u5b50\u548c\u7236\u4eb2\u53d8\u9ed1\uff08\u6216\u5176\u4ed6\u989c\u8272\u66f4\u6539\uff09\uff1b\u65cb\u8f6c\u7236\u4eb2 p \u548c\u5144\u5f1f w</p>"},{"location":"Courses/ADS.html#b-trees","title":"B+ trees","text":"<p>\u4e00\u79cd\u67e5\u627e\u6811\uff0c\u7c7b\u4f3c\u7ea2\u9ed1\u6811\uff0c\u4e0d\u662f\u4e8c\u53c9\u6811\uff0c\u5e73\u8861\uff0c\u81ea\u4e0b\u800c\u4e0a\u6784\u5efa\u800c\u6210\u4e00\u68f5m\u9636\u7684B+\u6811\u5b9a\u4e49\u5982\u4e0b\uff1a(1)\u6bcf\u4e2a\u7ed3\u70b9\u81f3\u591a\u6709m\u4e2a\u5b50\u5973\uff1b(2)\u9664\u6839\u7ed3\u70b9\u5916\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u81f3\u5c11\u6709\u2308m/2\u2309\u4e2a\u5b50\u5973\uff0c\u6839\u7ed3\u70b9\u81f3\u5c11\u6709\u4e24\u4e2a\u5b50\u5973\uff1b(3)\u6709k\u4e2a\u5b50\u5973\u7684\u7ed3\u70b9\u5fc5\u6709k\u4e2a\u5173\u952e\u5b57\u3002</p> <ul> <li>B \u6811\u7684\u9ad8\u5ea6\u4ec5\u968f\u5b83\u6240\u5305\u542b\u7684\u8282\u70b9\u6570\u6309\u5bf9\u6570\u589e\u957f</li> </ul> <p>M \u9636 B+\u6811\uff0c\u603b\u8282\u70b9\u6570 N\uff0c\\(Depth(M,N)=O(\u2308log_{\u2308M/2\u2309}N\u2309\\)</p> <p>\u901a\u5e38 M=3 or 4</p> <p>2-3 tree \u5404\u8282\u70b9\u5ea6\u6570\u4e3a2\u62163</p> <ul> <li>\u53f6\u5b50\u7ed3\u70b9\u5b58\u50a8\u771f\u5b9e\u503c\uff1b\u4e2d\u95f4\u7ed3\u70b9\u6709M\u4e2a\u6307\u5411\u53f6\u5b50\u7ed3\u70b9\u7684\u6307\u9488\uff0c\u4ee5\u53caM-1\u4e2a\u53f6\u8282\u70b9\u4e2d\u6700\u5c0f\u503c\u5728\u5176\u4e2d\u95f4</li> </ul>"},{"location":"Courses/ADS.html#find","title":"Find","text":"<p>B+\u6811\u7684\u67e5\u627e\u4e0eB\u6811\u4e0d\u540c\uff0c\u5f53\u7d22\u5f15\u90e8\u5206\u67d0\u4e2a\u7ed3\u70b9\u7684\u5173\u952e\u5b57\u4e0e\u6240\u67e5\u7684\u5173\u952e\u5b57\u76f8\u7b49\u65f6\uff0c\u5e76\u4e0d\u505c\u6b62\u67e5\u627e\uff0c\u5e94\u7ee7\u7eed\u6cbf\u7740\u8fd9\u4e2a\u5173\u952e\u5b57\u5de6\u8fb9\u7684\u6307\u9488\u5411\u4e0b\uff0c\u4e00\u76f4\u67e5\u5230\u8be5\u5173\u952e\u5b57\u6240\u5728\u7684\u53f6\u5b50\u7ed3\u70b9\u4e3a\u6b62\u3002</p> <p>\\(T_{find}(M,N)=O(logN)\\)\uff0c\u548c\u662fM\u9636B+\u6811\u7684\u9636\u6570\u65e0\u5173</p>"},{"location":"Courses/ADS.html#insert_2","title":"Insert","text":"<p>\u5206\u88c2</p>"},{"location":"Courses/ADS.html#delete_1","title":"Delete","text":"<p>insert \u7684\u53cd\u64cd\u4f5c\uff0c\u7ed3\u70b9\u8fc7\u5c11\u65f6\u548c\u5144\u5f1f\u5408\u5e76\uff0c\u9012\u5f52\u5411\u4e0a\u68c0\u67e5</p>"},{"location":"Courses/ADS.html#questions_1","title":"Questions","text":"<p>Consider the following buffer management problem. Initially the buffer size (the number of blocks) is one. Each block can accommodate exactly one item. As soon as a new item arrives, check if there is an available block. If yes, put the item into the block, induced a cost of one. Otherwise, the buffer size is doubled, and then the item is able to put into. Moreover, the old items have to be moved into the new buffer so it costs k+1 to make this insertion, where k is the number of old items. Clearly, if there are N items, the worst-case cost for one insertion can be \u03a9(N). To show that the average cost is O(1), let us turn to the amortized analysis. To simplify the problem, assume that the buffer is full after all the N items are placed. Which of the following potential functions works?</p> <p>A. The number of items currently in the bufferB. The opposite number of items currently in the bufferC. The number of available blocks currently in the bufferD. The opposite number of available blocks in the buffer</p> <p>\u9898\u76ee\u89e3\u6790\uff1a \u8bbe \\(size_i\\)\u4e3a \u7b2c i \u6b21\u63d2\u5165\u524d buffer \u7684\u5927\u5c0f\u3002 \\(c^i=c_i+\u03d5_i\u2212\u03d5_{i\u22121}.\\) \u5982\u679c\u63d2\u5165\u524d buffer \u6ca1\u6ee1\uff0c\\(c_i\\)=1 \uff0c\u5426\u5219 \\(c_i\\)=\\(size_i\\)+1. A: \u5982\u679c\u63d2\u5165\u524d buffer \u6ca1\u6ee1, \\(c^i=c_i+\u03d5_i\u2212\u03d5_{i\u22121}=1+(size_i+1)\u2212size_i=2\\). \u5982\u679c\u63d2\u5165\u524d buffer \u6ee1\uff0c\\(c^i=c_i+\u03d5_i\u2212\u03d5_{i\u22121}=size_i+1+(size_i+1)\u2212size_i=size_i+2\\). B: \u540c\u7406, \u4e24\u79cd\u60c5\u51b5 \\(\u03d5i\u2212\u03d5i\u22121\\) \u8981\u4e48\u662f 1 \u8981\u4e48\u662f -1\uff0c \u800c ci \u5374\u548c\u5f53\u524d buffer \u5927\u5c0f\u6709\u5173\uff0c\\(c^i\\) \u80af\u5b9a\u4e0d\u662f\u5e38\u6570\u3002 C: \u5982\u679c\u63d2\u5165\u524d buffer \u6ca1\u6ee1, \\(\u03d5i\u2212\u03d5_{i\u22121}=\u22121,c^i=ci+\u03d5i\u2212\u03d5i\u22121=1+(\u22121)=0\\).</p> <p>\u5982\u679c\u63d2\u5165\u524d buffer \u6ee1\uff0c\\(\u03d5i\u2212\u03d5_{i\u22121}=(size_i\u22121)\u22120=size_i\u22121\\),</p> <p>\\(c^i=size_i+1+\u03d5i\u2212\u03d5i\u22121=2size_i\\). D: \u5982\u679c\u63d2\u5165\u524d buffer \u6ca1\u6ee1, \\(\u03d5i\u2212\u03d5_{i\u22121}=1, c^i=ci+\u03d5i\u2212\u03d5_{i\u22121}=1+1=2\\). \u5982\u679c\u63d2\u5165\u524d buffer \u6ee1\uff0c\\(\u03d5i\u2212\u03d5_{i\u22121}=1\u2212size_i\\), \\(c^i=size_i+1+\u03d5i\u2212\u03d5_{i\u22121}=2\\).</p> <p>[\u9898\u96c6]Lecture2.Red-Black Trees and B+ Trees_a 2-3 tree with 3 nonleaf nodes must have 18 keys -CSDN\u535a\u5ba2</p> <p>\u3010PTA\u3011\u3010\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u3011B-\u6811\u548cB+\u6811 - \u4ee3\u7801\u5929\u5730 (codetd.com)</p>"},{"location":"Courses/ADS.html#2-inverted-file-index","title":"2 Inverted file index \u5012\u6392\u6587\u4ef6\u7d22\u5f15","text":"<p>\u53cd\u5411\u7d22\u5f15 \u54ea\u4e9b\u4e66\u91cc\u6709\u8fd9\u4e2a\u8bcd\uff1b\u6b63\u5411\uff0c\u8fd9\u672c\u4e66\u91cc\u6709\u54ea\u4e9b\u8bcd</p>"},{"location":"Courses/ADS.html#structure","title":"structure","text":"<p>\u94fe\u8868\u6307\u9488\u8fde\u63a5\u641c\u7d22\u5f15\u64ceposting list\uff1a\u6240\u6709\u5305\u542b\u7279\u5b9aterm\u6587\u6863\u7684id\u7684\u96c6\u5408\uff0c\u9700\u8981\u4ece\u8bcd\u5178\u6620\u5c04\u5230\u8fd9\u4e2a\u96c6\u5408\uff0c\u5373 Inverted file contains a list of pointers to all occurrences of a term in the text.</p>"},{"location":"Courses/ADS.html#modules","title":"modules","text":"<p>index generator \u5305\u62ec token analyzer stop filter, vocabulary scanner, vocabulary insertor, memory management</p> <ol> <li>word stemming \u63d0\u53d6\u8bcd\u5e72 and stop filter \u5c06\u5355\u8bcd\u7684\u4e0d\u540c\u5f62\u5f0f\u90fd\u8bb0\u4e3a\u539f\u578b</li> <li>\u5e38\u89c1\u7684\u8bcd\u4e3a stop words\uff0c\u5c06\u5b83\u4eec\u5254\u9664\u51fa\u539f\u6765\u7684\u6587\u4ef6\uff0c\u4f46\u8fd8\u662f\u6709\u5b83\u4eec\u7684 posting list</li> <li>What are the pros and cons of using hashing, compared to search trees? Faster\u00a0for\u00a0a\u00a0single\u00a0word but\u00a0expansive\u00a0for\u00a0a range of search.</li> </ol>"},{"location":"Courses/ADS.html#topic","title":"topic","text":"<p>Distributed indexing\uff1aeach node contains a subset of a collection \u96c6\u5408\u7684\u90e8\u5206Dynamic indexing\uff1a\u65b0\u7684\u6587\u4ef6\u5148\u5b58\u5230\u9644\u52a0\u5e8f\u53f7\u96c6\u4e2d\uff0c\u7b49\u5230\u7528\u6237\u641c\u7d22\u65f6\u67e5\u8be2 main index \u4ee5\u53ca auxiliary indexCompression \u538b\u7f29\uff1aThresholding \u9608\u503c\uff1afor documents\uff0c\u8fd4\u56de\u524d k \u4e2a\u6743\u91cd\u6700\u5927\u7684\u6587\u4ef6\uff1bfor query\uff0c \u67e5\u8be2\u5355\u8bcd\u9891\u7387\u6700\u4f4e\u7684\u4e00\u4e9b\u6587\u4ef6</p>"},{"location":"Courses/ADS.html#measure","title":"Measure","text":"<p>\\(precision=R_R/(R_R+I_R)\\)\\(recall=R_R/(R_R+R_N)\\)\u200b</p>"},{"location":"Courses/ADS.html#questions_2","title":"Questions","text":"<ol> <li>While accessing a term stored in a B+ tree in an inverted file index, range searches are expensive. F</li> </ol> <p>[\u9898\u96c6]Lecture3. Inverted File Index_in distributed indexing, document-partitioned stra-CSDN\u535a\u5ba2</p>"},{"location":"Courses/ADS.html#3-heap","title":"3 Heap","text":""},{"location":"Courses/ADS.html#lefiest-heap","title":"Lefiest Heap \u5de6\u5f0f\u5806","text":"<p>\u7528\u5efa\u5806\u7684\u65b9\u6cd5\u5408\u5e76\u4e24\u4e2a\u5806\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\\(\u0398(N)\\)\uff1b\u7528\u6307\u9488\u7684\u65b9\u5f0f\u4f1a\u4f7f\u5176\u4ed6\u64cd\u4f5c\uff08find\uff09\u53d8\u6162\u9700\u8981\u9891\u7e41\u7684 Merge \u65f6\u4f7f\u7528\u5de6\u5f0f\u5806\u6027\u8d28\uff1a\u6709\u5e8f\u6027\uff08\u548c\u666e\u901a\u5806\u4e00\u6837\uff09\uff1b\u7ed3\u6784\u4e0d\u5e73\u8861\u7684\u4e8c\u53c9\u6811</p> <p>\u5b9a\u4e49\uff1aNpl(x) null path length \u4efb\u610f\u4e00\u4e2a\u8282\u70b9 x \u7684 Npl \u662f\u4ece x \u5230\u4e00\u4e2a\u6ca1\u6709\u4e24\u4e2a\u5b69\u5b50\u7684\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\uff1b\u4ee4 \\(Npl(NULL)=-1\\)</p> <p>\\(Npl(X)\\) = min { \\(Npl(C)+ 1\\)for all C as children of X } \u4ece\u4e0b\u5f80\u4e0a\u7b97 Npl</p> <p>The leftist heap property is that for every node X in the heap, the null path length of the left child is at least as large as that of the right child.</p> <p>\u5b9a\u7406\uff1a</p> <ul> <li>\u53f3\u8def\u5f84\u4e0a\u6709 k\u4e2a\u8282\u70b9\u7684\u5de6\u5f0f\u6811\u81f3\u5c11\u6709\u603b\u5171\\(2^k-1\\)\u4e2a\u8282\u70b9\uff1b\u5373 \u6709 N \u4e2a\u8282\u70b9\u7684\u5de6\u5f0f\u6811\uff0c\u5b83\u7684\u53f3\u8def\u5f84\u4e0a\u6700\u591a\u6709\\(\u230alog(N+1)\u230b\\)\u4e2a\u8282\u70b9</li> </ul> <p>\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u5de5\u4f5c\u90fd\u653e\u5728\u53f3\u8def\u5f84\u4e0a\uff0c\u56e0\u4e3a\u5b83\u66f4\u77ed</p> <ul> <li>A leftist heap with the null path length of the root being r must have at least \\(2^{r+1}-1\\) nodes</li> </ul>"},{"location":"Courses/ADS.html#merge","title":"Merge","text":""},{"location":"Courses/ADS.html#recursive","title":"recursive","text":"<p>step1 <code>Merge(H1-&gt;Right,H2)</code>; step2 <code>Attach(H2,H1-&gt;Right)</code></p> <p>\u5927\u7684\u6839\u503c\u7684\u5806 \u548c \u5c0f\u7684\u6839\u503c\u7684\u5806\u7684\u53f3\u5b50\u5806 \u5408\u5e76</p> <p> </p> <p>step3 <code>Swap(H1-&gt;Right,H1-&gt;Left)</code> if necessary</p> <p><pre><code>struct Treenode{\n    ElementType Element;\n    PriorityQueue Left;\n    PriorityQueue Right;\n    int Npl;\n};\n\nPriorityQueue Merge ( PriorityQueue H1, PriorityQueue H2 )\n{\n    if(H1 == NULL)return H2;\n    if( H2 == NULL )return H1;\n    if ( H1-&gt;Element &lt; H2-&gt;Element ) return Merge1( H1, H2 );\n    else return Merge1( H2, H1 );\n}\n\nstatic PriorityQueue Merge1( PriorityQueue H1, PriorityQueue H2 )\n{\n    if ( H1-&gt;Left == NULL )/* single node */\n        H1-&gt;Left = H2;/* H1-&gt;Right is already NULL and H1-&gt;Npl is already 0 */\n    else {\n        H1-&gt;Right = Merge( H1-&gt;Right, H2 );/*Step1&amp;2*/\n        if ( H1-&gt;Left-&gt;Npl &lt; H1-&gt;Right-&gt;Npl) SwapChildren( H1 );/* Step 3 */\n        H1-&gt;Npl= H1-&gt;Right-&gt;Npl +1;//only consider the smaller Npl\n    }/* end else */\n    return H1;\n}\n</code></pre> \u8981\u6c42 h1 \u7684 root &lt; h2 \u7684 root</p> <p>\\(T= O(logN)\\)</p>"},{"location":"Courses/ADS.html#iterative","title":"iterative","text":"<p>step1 \u5bf9\u4e24\u68f5\u6811\u7684\u53f3\u8def\u5f84\u8fdb\u884c\u6392\u5e8f\uff0c\u4e0d\u6539\u53d8\u4ed6\u4eec\u7684\u5de6\u5b69\u5b50step2 \u4ea4\u6362\u5b69\u5b50\uff08\u5982\u679c\u6709\u5fc5\u8981\uff09</p>"},{"location":"Courses/ADS.html#deletemin","title":"DeleteMin","text":"<p>step1\uff1adelete minstep2\uff1amerge 2 subtrees</p>"},{"location":"Courses/ADS.html#skew-heaps","title":"Skew Heaps \u659c\u5806","text":"<p>\u5de6\u5f0f\u5806\u7684\u81ea\u8c03\u8282\u5f62\u5f0f \uff0c\u76ee\u7684\u662f\u4f7f\u4efb\u610f M \u79cd\u64cd\u4f5c\u82b1\u8d39\u6700\u591a\\(O(MlogN)\\)\u200b\u7684\u65f6\u95f4</p> <p>\u7ed3\u6784\u4e0d\u5e73\u8861\u7684\u4e8c\u53c9\u6811\uff0c\u659c\u5806\u7684\u53f3\u8def\u5f84\u53ef\u4ee5\u662f\u4efb\u610f\u957f\u5ea6\uff08\u5de6\u53f3\u65cb\u8f6c\uff09</p>"},{"location":"Courses/ADS.html#merge_1","title":"Merge","text":"<p>\u603b\u662f\u4ea4\u6362\u5de6\u53f3\u5b69\u5b50 \u76f4\u5230\u5305\u542b\u53f3\u8def\u5f84\u7684\u6700\u5927\u8282\u70b9\u7684\u6839\u6ca1\u6709\u5b69\u5b50\u53ef\u4ee5\u4ea4\u6362 No Npl</p> <p><code>merge(h1, h2)</code> \u644a\u8fd8\u8fd0\u884c\u65f6\u95f4\uff1a\\(O(logN)\\)</p> <ol> <li>Let h1 and h2 be the two min skew heaps to be merged. Let h1's root be smaller than h2's root (If not smaller, we can swap to get the same).</li> <li>We swap <code>h1-&gt;left</code> and <code>h1-&gt;right</code>. \u4ea4\u6362\u5c0f\u6839\u5de6\u53f3\u5806</li> <li><code>h1-&gt;left = merge(h2, h1-&gt;left)</code> \u5c06\u5927\u6839\u548c\u5c0f\u6839\u7684\u5de6\u5806\u5408\u5e76</li> </ol>"},{"location":"Courses/ADS.html#insert_3","title":"Insert","text":"<p>\u4fdd\u6301\u6700\u5c0f\u7684\u8282\u70b9\uff0c\u4ea4\u6362\uff08\u5de6\u6811\u53d8\u5230\u53f3\u6811\uff09\uff0c\u518d\u8fde\u53e6\u5916\u4e00\u68f5\u6811</p> <p>\u4f18\u52bf\uff1a\u4e0d\u9700\u8981\u989d\u5916\u7a7a\u95f4\u53bb\u4fdd\u5b58\u8def\u5f84\u957f\u5ea6\uff0c\u4e0d\u9700\u8981\u6d4b\u8bd5\u6765\u786e\u4fdd\u4ec0\u4e48\u65f6\u5019\u8981\u4ea4\u6362\u5b69\u5b50</p> <ul> <li>A perfectly balanced tree forms if keys 1 to 2k\u22121 are inserted in order into an initally empty skew heap.</li> </ul>"},{"location":"Courses/ADS.html#_3","title":"\u5e73\u644a\u5206\u6790","text":"<p>\\(T_{amoritized}=O(logN)\\)</p> <p>\\(\u03d5(D_i)=\\)number of heavy nodes</p> <p>\u3010Definition\u3011 A node p is heavy if the number of descendants of p's right subtree is at least half of the number of descendants of p, and light otherwise. Note that the number of descendants of a node includes the node itself.\u53ea\u6709\u5728\u539f\u6765\u53f3\u8def\u5f84\u4e0a\u7684\u8282\u70b9 heavy/light \u72b6\u6001\u4f1a\u6539\u53d8h-heavy nodes\uff1bl-light nodes\u4e3a\u4ec0\u4e48 light node \u7684\u590d\u6742\u5ea6\u662f\\(log(N)\\)\u200b\uff1a\u6bcf\u4e00\u4e2a light node \u7684\u53f3\u5b50\u6811 node \u6570\u91cf\u90fd\u8981\u51cf\u534a\uff08\u2264(n-1)/2)</p>"},{"location":"Courses/ADS.html#questions_3","title":"Questions","text":"<p>[\u9898\u96c6]Lecture 4. Leftist Heaps and Skew Heaps_when doing amortized analysis, which one of the fo-CSDN\u535a\u5ba2</p> <p>Assignment 4 2-2_we can perform buildheap for leftist heaps by cons-CSDN\u535a\u5ba2</p>"},{"location":"Courses/ADS.html#4-binomial-queue","title":"4 Binomial Queue","text":"<p>\u4e00\u79cd\u4f18\u5148\u961f\u5217\uff0cheap-ordered \u6811\u7684\u96c6\u5408=array of binomial trees\u4e00\u68f5\\(B_k\\) \u4e8c\u9879\u5f0f\u6811\u6709 k \u4e2a\u5b69\u5b50\uff0c\u5373\\(B_0\\)\u2026\u2026\\(B_{k-1}\\)\uff0c\\(B_k\\)\u6709\u5171\\(2^k\\)\u4e2a\u8282\u70b9\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\u662f\\(C_k^d\\)\u4e00\u4e2a\u4e0d\u7ba1\u591a\u5c11\u5927\u5c0f\u7684\u4f18\u5148\u961f\u5217\uff0c\u53ef\u4ee5\u88ab\u4e00\u7ec4\u4e8c\u9879\u6811\u552f\u4e00\u5730\u8868\u793a\uff0ceg\uff1a13=\\(1101_2\\)\uff0c\u76f8\u5f53\u4e8e\u4e00\u4e2a B1\uff0c\u4e00\u4e2a B2\uff0c\u4e00\u4e2a B3</p>"},{"location":"Courses/ADS.html#findmin","title":"FindMin","text":"<p>\u904d\u5386\u6240\u6709\u6839\u5bf9\u5171\u6709 N \u4e2a\u8282\u70b9\u7684\u4e8c\u9879\u961f\u5217\uff0c\u6700\u591a\u6709 \\(\u230alogN\u230b\\)\u4e2a\u6839\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(logN)\\)\uff0c\u5e73\u5747\u65f6\u95f4\u662f\u5e38\u6570</p>"},{"location":"Courses/ADS.html#merge_2","title":"Merge","text":"<p>\u4e8c\u8fdb\u5236\u52a0\u6cd5\u7b97\u961f\u5217\uff0c\u518d\u5408\u5e76\uff1b\u786e\u4fdd\u6839\u662f\u6700\u5c0f\u6570</p> <p>\u4e8c\u9879\u6811\u961f\u5217\u5fc5\u987b\u9ad8\u5ea6\u6709\u5e8f\uff0c\u800c\u4e0d\u662f\u6839\u5927\u5c0f\u6709\u5e8f</p> <p>\u644a\u8fd8\u8fd0\u884c\u65f6\u95f4\uff1a\\(O(logN)\\)</p> <p><pre><code>CombineTrees(BinTree T1, BinTree T2){\n    // Merge 2 trees of equal size\n    if(\n}\n</code></pre> <pre><code>BinQueue Merge(BinQueue H1, BinQueue H2){\n    BinTree T1, T2,Carry=NULL;\n    int i,j;\n    if(H1-&gt;CurrentSize+H2-&gt;CurrentSize &gt; Capacity) ErrorMessage();\n    H1-&gt;CurrentSize += H2-&gt;CurrentSize;\n    for(i=0,j=1; j&lt;=H1-&gt;CurrentSize; i++,j*=2){\n        //i\u662f\u6811\u7684\u5e8f\u53f7\uff0cj\u662f\u5bf9\u5e94\u6811\u7684\u5927\u5c0f\n        T1=H1-&gt;TheTrees[i];\n        T2=H2-&gt;TheTrees[i];\n        switch(4*!!Carry + 2* !!T2 + !!T1){\n            //T1\u662f\u4e2a\u6307\u9488\uff0c\u5982\u679cT1\u4e0d\u662f\u4e00\u4e2a\u7a7a\u6307\u9488\uff0cT1=1, !T1=0, !!T1=1\n            //4*!!Carry + 2* !!T2 + !!T1\u662f\u4e00\u4e2a\u6570\n            case 0://000\n            case 1:break;//001\n            case 2://010\n                H1-&gt;TheTrees[i]=T2;\n                H2-&gt;TheTrees[i]=NULL;\n                break;\n            case 3://011\n                Carry=CombineTrees(T1,T2);\n                H1-&gt;TheTrees[i]= H2-&gt;TheTrees[i]=NULL;break;\n            case 4: //100\n                H1-&gt;TheTrees[i]=Carry;\n                Carry=NULL;break;\n            case 5://101\n                Carry=CombineTrees(T1,Carry);\n                H1-&gt;TheTrees[i]=NULL;break;\n            case 6://110\n                Carry=CombineTrees(T2,Carry);\n                H2-&gt;TheTrees[i]=NULL;break;\n            case 7://111\n                H1-&gt;TheTrees[i]=Carry;\n                Carry=CombineTrees(T1,T2);\n                H2-&gt;TheTrees[i]=NULL;break;\n        }\n    }\n    return H1;\n}     \n</code></pre> <pre><code>ElementType DeleteMin( BinQueue H ){\n    BinQueue DeletedQueue;\n    Position DeletedTree, OldRoot;\n    ElementType Minltem = Infinity; /* the minimum item to be returned */\n    int i, j, MinTree; /* MinTree is the index of the tree with the minimum item */\n    if ( lsEmpty(H)){ \n        PrintErrorMessage(); \n        return -Infinity; }\n    for (i=0;i&lt; MaxTrees; i++){//MaxTrees\u53ef\u4ee5\u7528\u5b9e\u9645\u6839\u7684\u6570\u91cf\u4ee3\u66ff\n        /* Step 1: find the minimum item */\n        if( H-&gt;TheTrees[i] &amp;&amp; H-&gt;TheTrees[i]-&gt;Element &lt; MinItem ){\n            MinItem =H-&gt;TheTrees[i]-&gt;Element; \n            MinTree =i; \n        } /* end if */}/*end for-i-loop*/\n    DeletedTree = H-&gt;TheTrees[ MinTree ];\n    H-&gt;TheTrees[ MinTree ]= NULL; \n    /* Step 2: remove the MinTree from H =&gt; H'*/\n    OldRoot =DeletedTree; /* Step 3.1: remove the root */\n    DeletedTree = DeletedTree-&gt;LeftChild;\n    free(OldRoot);\n    DeletedQueue =Initialize(); /* Step 3.2: create H\u201d */\n    DeletedQueue-&gt;CurrentSize=(1&lt;&lt;MinTree )-1; /* 2^MinTree-1 */\n    for (j= MinTree -1;j&gt;= 0;j--){\n        DeletedQueue-&gt;TheTreesj]= DeletedTree;\n        DeletedTree = DeletedTree-&gt;NextSibling;\n        DeletedQueue-&gt;TheTrees[j]-&gt;NextSibling = NULL;\n    }/* end for-j-loop */\n    H-&gt;CurrentSize -= DeletedQueue-&gt;CurrentSize + 1;\n    H = Merge( H, DeletedQueue ); /* Step 4: merge H' and H\u201d */\n    return MinItem;\n}\n</code></pre></p>"},{"location":"Courses/ADS.html#insert_4","title":"Insert","text":"<p>\u4e00\u79cd\u7279\u6b8a\u7684 merge</p> <p>\u5c06 n \u4e2a\u8282\u70b9\u63d2\u5165\u4e00\u4e2a\u7a7a\u4e8c\u9879\u961f\u5217\uff0c\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(N)\\)</p> <p>\u82e5\u6700\u5c0f\u8fd8\u6ca1\u51fa\u73b0\u7684\u4e8c\u9879\u5f0f\u6811\u662f\\(B_i\\)\uff0c\u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(Const(i+1)\\)\u200b\uff0c\u5373\u5e73\u5747\u65f6\u95f4\u662f\u5e38\u6570</p> <p>\u644a\u8fd8\u8fd0\u884c\u65f6\u95f4\uff1a\\(O(1)\\)</p>"},{"location":"Courses/ADS.html#deletemin_1","title":"DeleteMin","text":"<ol> <li><code>FindMin</code> in \\(B_k\\) //\\(O(logN)\\)</li> <li>\u5c06 \\(B_k\\)\u4ece H \u4e2d\u79fb\u8d70 //\\(O(1)\\)</li> <li>\u5c06\u6839\u4ece\\(B_k\\)\u4e2d\u79fb\u8d70 //\\(O(logN)\\)</li> <li><code>Merge(H',H'')</code> //\\(O(logN)\\)</li> </ol> <p>\u644a\u8fd8\u8fd0\u884c\u65f6\u95f4\uff1a\\(O(logN)\\)\u200b</p> <p>\u5220\u9664\u8981\u5c06\u539f\u961f\u5217\u4e00\u5206\u4e3a\u4e8c\u8fdb\u884c\u5408\u5e76</p>"},{"location":"Courses/ADS.html#analysis","title":"Analysis","text":"<ul> <li>\u4e00\u4e2a N \u4e2a\u5143\u7d20\u7684\u4e8c\u9879\u961f\u5217\u53ef\u4ee5\u7531 N \u6b21\u8fde\u7eed\u7684\u63d2\u5165\u5728\\(O(N)\\)\u65f6\u95f4\u5185\u5b9e\u73b0\uff08\u6700\u574f\u60c5\u51b5\\(O(N)\\) </li> </ul> <p>\u8bc1\u660e\uff1a</p>"},{"location":"Courses/ADS.html#aggregate","title":"Aggregate","text":""},{"location":"Courses/ADS.html#potential","title":"Potential","text":"<p>\\(T_{worst}=O(logN)\\)</p> <p>\\(T_{amoritized}=2\\)\u200b</p>"},{"location":"Courses/ADS.html#questions_4","title":"Questions","text":"<ol> <li>For a binomial queue, __ take(s) a constant time on average. C</li> </ol> <p>A. merging and delete-min    B. find-min and delete-min    C. find-min and insertion    D. merging and insertion</p> <p>\u4e8c\u9879\u961f\u5217\u627e\u5230\u6700\u5c0f\u548c\u63d2\u5165\u7684\u5e73\u5747\u65f6\u95f4\u662f\u5e38\u6570</p> <ol> <li>The potential function Q of a binomial queue is the number of the trees. After merging two binomial queues H1 with 22 nodes and H2 with 13 nodes\uff0cwhat is the potential change Q(H1+H2)\u2212(Q(H1)+Q(H2)) ?  A</li> </ol> <p>A.-3</p> <p>B.0</p> <p>C.-2</p> <p>D.2</p> <p>H1=16+4+2</p> <p>H2=8+4+1</p> <p>H1+H2=35=32+2+1</p> <p>\u52bf\u80fd\u53d8\u5316=3-3-3=-3</p>"},{"location":"Courses/ADS.html#5-backtracking","title":"5 Backtracking","text":"<p>\u56de\u6eaf\uff1a\u5206\u6b65\u89e3\u51b3\u95ee\u9898\uff0c\u5982\u679c\u6b64\u8def\u4e0d\u901a\uff0c\u5c31\u56de\u5230\u4e4b\u524d\u7684\u70b9\u8d70\u53e6\u4e00\u6761\u8def\u3002\u8282\u7ea6\u7a77\u4e3e\u65f6\u95f4</p>"},{"location":"Courses/ADS.html#8-queen-problem","title":"8-Queen problem","text":"<ol> <li>\u5efa\u4e00\u4e2a\u6e38\u620f\u6811\uff08\u4e0d\u662f\u771f\u7684\u5728program\u91cc\uff09\uff0c\u8def\u5f84\u4e2a\u6570\u4e3a\u53f6\u5b50\u8282\u70b9\u4e2a\u6570</li> <li>\u5bf9\u6240\u6709\u8def\u5f84\u505a\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08post-order traversal\uff09</li> </ol>"},{"location":"Courses/ADS.html#turnpike-problem","title":"Turnpike problem","text":"<p>\\(N\\) points\u6709\\(N(N-1)/2\\) \u4e2a\u8ddd\u79bb\uff0c\u7b2c\u4e00\u4e2a\u70b9\\(x_1=0\\) \uff0c\u8981\u6c42\u7ed9\u5b9a\u8ddd\u79bb\uff0c\u627e\u5230\u70b9\u96c6</p> <ol> <li>\u6839\u636e\u8ddd\u79bb\u4e2a\u6570\u7b97N</li> <li>\u5f97\u5230\u6700\u5c0f\u70b9\u548c\u6700\u5927\u70b9</li> <li>\u627e\u5230\u6b21\u5927\u7684\u8ddd\u79bb\u5e76\u68c0\u67e5</li> </ol>"},{"location":"Courses/ADS.html#game","title":"Game","text":"<p>tik-tack-toe\uff1aMinimax Strategy</p> <p>\\(f(P)=W_{computer}-W_{human}\\)\u200b\uff0c\u51fd\u6570\u503c\u8d8a\u5c0f\uff0c\u4eba\u7c7b\u80dc\u5229\u53ef\u80fd\u6027\u8d8a\u5927</p> <p>\u03b1-\u03b2 pruning\uff1a\u5c06\u641c\u7d22\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u9650\u5236\u5230\\(O(\\sqrt{N})\\) \u4e2a\u8282\u70b9</p> <p>\u03b1 pruning\uff1a\u5728Max\u5c42\uff0c\u5982\u679c\u03b1\u2265\u03b2\u5219\u526a\u679d\u03b1</p> <p>\u03b2 pruning\uff1a\u5728Min\u5c42\uff0c\u5982\u679c\u03b1\u2265\u03b2\u5219\u526a\u679d\u03b2</p> <p>\u526a\u679d\u53d1\u751f\u7684\u60c5\u51b5\uff1a</p> <p>\u5176\u5144\u5f1f\u8282\u70b9\u6bd4\u5b83\u7684\u8282\u70b9\u66f4\u4f18\u3002\u5b83\u7684\u53e6\u5916\u4e00\u4e2a\u5b50\u8282\u70b9\u88ab\u526a\u679d\uff1f</p> <p>\u7531\u4e8e\u4e0d\u4f1a\u9009\u5b83\u7684\u7236\u4eb2\u4e86\uff0c\u56e0\u6b64\u5b83\u88ab\u526a\u679d\u4e86</p> <p>\u6839\u636e\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u5fc5\u987b\u5148\u904d\u5386\u5de6\u5b69\u5b50\uff0c\u624d\u662f\u6839\uff0c\u624d\u662f\u53f3\u5b69\u5b50\uff0c\u53ea\u53ef\u80fd\u662f\u53f3\u5b69\u5b50\u88ab\u526a\u679d</p> <p>Min\u91cc\u9762\u627e\u6700\u5927\uff0cMax\u91cc\u9762\u627e\u6700\u5c0f\uff1f</p>"},{"location":"Courses/ADS.html#questions_5","title":"Questions","text":"<p>What makes the time complexity analysis of a backtracking algorithm very difficult is that the number of solutions that do satisfy the restriction is hard to estimate. </p> <p>TRUE</p> <p>In backtracking, if different solution spaces have different sizes, start testing from the partial solution with the largest space size would have a better chance to reduce the time cost.</p> <p>FALSE</p> <p>[\u9898\u96c6]Lecture 6. Backtracking_in the tic-tac-toe game, a \"goodness\" function of -CSDN\u535a\u5ba2</p>"},{"location":"Courses/ADS.html#6-divide-and-conquer","title":"6 Divide and Conquer","text":""},{"location":"Courses/ADS.html#61-closest-points","title":"6.1 closest points","text":"<p>\u5206\u6210\u591a\u4e2a\u5b50\u95ee\u9898\uff0c\u7528\u5faa\u73af\u89e3\u51b3</p> <p>\u5728N\u4e2a\u70b9\u4e2d\uff0c\u627e\u5230\u8ddd\u79bb\u6700\u8fd1\u7684\u4e24\u4e2a\u70b9\uff08\u91cd\u5408\u4e3a0\uff09</p> <ol> <li>\u7a77\u4e3e\uff1acheck N(N-1)/2\u6b21\uff0c\\(T=O(N^2)\\) </li> <li>\u5206\u6cbb\uff1a\u5206\u6210\u4e24\u90e8\u5206\uff0c\u6700\u5c0f\u53ea\u67093\u79cd\u60c5\u51b5\uff0c\\(T=O(NlogN)\\)\u200b </li> </ol> <p>\u4ee3\u7801\uff1a</p>"},{"location":"Courses/ADS.html#62","title":"6.2 \u4e09\u79cd\u65b9\u6cd5\u89e3\u51b3\u9012\u5f52","text":"<p>\u5148\u731c\uff0c\u7136\u540e\u7528\u5f52\u7eb3\u6cd5\u8bc1\u660e</p> <p>eg, \\(T(N)=2T(\u230aN/2\u230b)+N\\) \uff0c\\(T=O(NlogN)\\)</p> <p>eg, \\(T(N)=3T(N/4)+\u0398(N^2)\\) </p> <p>\u9ad8\u5ea6\uff1a\\(log_4N\\) </p> <p></p> <p></p> <p></p>"},{"location":"Courses/ADS.html#substitution","title":"substitution","text":""},{"location":"Courses/ADS.html#recursion-tree","title":"recursion-tree","text":""},{"location":"Courses/ADS.html#master-theorem","title":"master theorem","text":""},{"location":"Courses/ADS.html#questions_6","title":"Questions","text":"<p>\u5feb\u6392quick sort\u548c\u5f52\u5e76merge\u7528\u4e86divide and conquer\u7b97\u6cd5</p> <p></p> <p>\u6570\u636e\u7ed3\u6784\u9519\u9898\u6574\u7406\uff08\u4e8c\uff09_for the recurrence equation t(n)=at(n/b)+f(n), if -CSDN\u535a\u5ba2</p> <p></p>"},{"location":"Courses/ADS.html#7-dynamic-programming","title":"7 Dynamic programming","text":"<p>\u52a8\u6001\u89c4\u5212\u53ef\u4ee5\u89e3\u51b3Longest common subsequence problem</p> <p>polynomial time \u591a\u9879\u5f0f\u65f6\u95f4</p> <ul> <li>\u52a8\u6001\u89c4\u5212\u4e0d\u4fdd\u8bc1\u90fd\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u89e3\u51b3\u95ee\u9898</li> </ul> <p>To solve a problem by dynamic programming instead of recursions, the key approach is to store the results of computations for the subproblems so that we only have to compute each different subproblem once. Those solutions can be stored in an array or a hash table.</p>"},{"location":"Courses/ADS.html#71-fibonacci-number","title":"7.1 Fibonacci number","text":"<p>\u53ea\u89e3\u51b3\u5b50\u95ee\u9898\u4e00\u6b21\uff0c\u5c06\u7b54\u6848\u5b58\u5728\u8868\u4e2d</p> <p>\\(T=O(N)\\) </p>"},{"location":"Courses/ADS.html#72-matrix-multiplication","title":"7.2 Matrix Multiplication","text":"<p>\u77e9\u9635\u94fe\u4e58\u6cd5</p> <p>\\(T=O(N^3)\\) </p>"},{"location":"Courses/ADS.html#73-optimal-binary-search-tree","title":"7.3 Optimal binary search tree","text":"<p>\u6700\u4f18\u4e8c\u53c9\u641c\u7d22\u6811\u662f\u9759\u6001\u641c\u7d22\uff08\u6ca1\u6709\u63d2\u5165\u548c\u5220\u9664\uff09\u6700\u4f73\uff0c\u4f7f\u6240\u6709\u64cd\u4f5c\u8bbf\u95ee\u7684\u8282\u70b9\u603b\u6570\u6700\u5c11</p> <p>\u5728weight\u4e00\u5b9a\u65f6\uff0c\u9009cost\u6700\u5c0f\u7684</p> <p>optimal cost = total weight + this cost</p> <p>\\(T=O(N^3)\\)\u200b </p>"},{"location":"Courses/ADS.html#74-floyd-warshall","title":"7.4 Floyd-warshall\u7b97\u6cd5","text":"<p>All-pairs shortest path</p> <p>\u6240\u6709\u7ed3\u70b9\u5bf9\u7684\u6700\u77ed\u8def\u5f84\u95ee\u9898\uff1a</p> <ol> <li> <p>Dijkstra \u5355\u6e90\u6700\u77ed\u8def\u5f84 \\(T=O(V^3)\\)  \u9002\u5408\u7a00\u758f\u56fe</p> </li> <li> <p>Floyd-warshall\uff0c\u4e0d\u80fd\u5904\u7406\u8d1f\u6570cost\uff0c\u56e0\u4e3a\u5f17\u6d1b\u4f0a\u5fb7\u7b97\u6cd5\u5c06\u5728\u6709\u9650\u6b65\u540e\u7ec8\u6b62\uff0c\u4f46\u5982\u679c\u5b58\u5728\u8d1fcost\u5faa\u73af\uff0c\u5219\u6700\u77ed\u8ddd\u79bb\u4e3a\u8d1f\u65e0\u7a77\u5927\u3002</p> </li> </ol> <pre><code>/* A[ ] contains the adjacency matrix with A[ i ][ i ] = 0 */ \n/* D[ ] contains the values of the shortest path */ \n/* N is the number of vertices */ \n/* A negative cycle exists iff D[ i ][ i ] &lt; 0 */ \nvoid AllPairs( TwoDimArray A, TwoDimArray D, int N ) \n{   int  i, j, k; \n for ( i = 0; i &lt; N; i++ )  /* Initialize D */ \n     for( j = 0; j &lt; N; j++ )\n         D[ i ][ j ] = A[ i ][ j ]; \n for( k = 0; k &lt; N; k++ )  /* add one vertex k into the path */\n     for( i = 0; i &lt; N; i++ ) \n         for( j = 0; j &lt; N; j++ ) \n             if( D[ i ][ k ] + D[ k ][ j ] &lt; D[ i ][ j ] ) \n                 /* Update shortest path */ \n                 D[ i ][ j ] = D[ i ][ k ] + D[ k ][ j ]; \n}\n</code></pre> <p>\u200b   \\(T=\u0398(V^3)\\) \uff0c\u7a20\u5bc6\u56fe\u4f1a\u66f4\u5feb</p>"},{"location":"Courses/ADS.html#8-greedy-algorithms","title":"8 Greedy Algorithms","text":""},{"location":"Courses/ADS.html#81-introduction","title":"8.1 Introduction","text":"<p>\u8d2a\u5fc3\u7b97\u6cd5\u5728\u6bcf\u4e2a\u9636\u6bb5\u90fd\u505a\u5f53\u524d\u9650\u5236\u4e0b\u7684\u6700\u4f18\u89e3\uff0c\u7ed3\u679c\u4e0d\u56de\u9000</p> <p>note\uff1a\u8d2a\u5fc3\u53ea\u5728\u5f53\u524d\u6700\u4f73=\u5168\u5c40\u6700\u4f73\u65f6\u6709\u7528\uff0c\u5b83\u5e76\u4e0d\u4fdd\u8bc1\u6700\u4f18\u89e3\uff08\u4f46\u63a5\u8fd1\uff09</p>"},{"location":"Courses/ADS.html#82-acitivity-selection","title":"8.2 Acitivity selection","text":"<p>\u627e\u6700\u591a\u4e0d\u51b2\u7a81\u7684\u65f6\u95f4\u6bb5</p>"},{"location":"Courses/ADS.html#a-dp-problem","title":"A DP problem","text":"<p>Greedy Rule 1\uff1a\u9009\u51fa\u65f6\u95f4\u6bb5\u5f00\u59cb\u6700\u65e9\u7684\uff08\u4f46\u4e0d\u4e0e\u5df2\u7ecf\u9009\u51fa\u7684\u95f4\u9694\u91cd\u53e0\uff09\u00d7</p> <p>Greedy Rule 2\uff1a\u9009\u51fa\u65f6\u95f4\u6bb5\u6700\u77ed\u7684\u00d7</p> <p>Greedy Rule 3\uff1a\u9009\u51fa\u65f6\u95f4\u6bb5\u51b2\u7a81\u6700\u5c11\u7684\u00d7</p> <p>Greedy Rule 4\uff1a\u9009\u51fa\u65f6\u95f4\u6bb5\u7ed3\u675f\u6700\u65e9\u7684\u221a</p> <p>\u3010Theorem\u3011</p> <p>\u4ee4S\u4e3a\u6d3b\u52a8\u9009\u62e9\u95ee\u9898\uff08Activity Selection Problem\uff09\u4e2d\u6240\u6709\u6d3b\u52a8\u7684\u96c6\u5408\u3002\u5219\u6700\u65e9\u7ed3\u675f\u7684\u6d3b\u52a8\\(a_s\\)\u4e00\u5b9a\u88ab\u5305\u542b\u5728S\u7684\u67d0\u4e2a\u6700\u5927\u76f8\u5bb9\u6d3b\u52a8\u5b50\u96c6\u4e2d\u3002</p> <p>\\(T=O(NlogN)\\) </p>"},{"location":"Courses/ADS.html#dp-solution","title":"DP solution","text":"<p>If each activity has a weight, DP solution is still correct but Greedy solution may be not.</p> <p>0-1\u80cc\u5305\u95ee\u9898</p> <p><code>f[i][j]=max(f[i-1][j-w[i]]+v[i], f[i-1][j])</code></p> <p>\\(T=O(N^2W)\\)\uff0cW\u662f\u4e2a\u6570</p>"},{"location":"Courses/ADS.html#83-huffman-code","title":"8.3 Huffman code","text":"<p>\u9891\u7387\u9ad8\u7684\u5b57\u7b26\u7f16\u7801\u7b80\u77ed</p> <p>\\(cost=\\sum{d_if_i}\\)</p> <p>\u4e3a\u4e86\u5f97\u5230\u552f\u4e00\u7684\u89e3\u7801\uff08\u6d88\u9664\u4e8c\u4e49\u6027\uff09\uff0c\u5bf9\u4e0d\u540c\u5b57\u6bcd\u7f16\u7801\u524d\u7f00\u8981\u4e0d\u540c</p> <p>\u6240\u6709\u7ed3\u70b9\u4e0d\u662f\u53f6\u5b50\u5c31\u5fc5\u987b\u6709\u4e24\u4e2a\u5b69\u5b50</p> <p>build the tree from bottom-up</p> <p>\\(T=O(ClogC)\\)\u200b\u200b </p>"},{"location":"Courses/ADS.html#questions_7","title":"Questions","text":"<p>\u5b9e\u9a8c12 Greedy Algorithm\u7ec3\u4e60\u9898 \u7b54\u6848\u4e0e\u89e3\u6790_given 4 cases of frequences of four characters. in-CSDN\u535a\u5ba2</p>"},{"location":"Courses/ADS.html#9-np-completeness","title":"9 NP-completeness","text":""},{"location":"Courses/ADS.html#91-np-definition","title":"9.1 NP definition","text":"<p>\u505c\u673a\u95ee\u9898(halting problem)\u662f\u4e0d\u53ef\u5224\u5b9a\u95ee\u9898(undecidable problem)</p> <p>P: \u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u89e3\u51b3\u7684\u95ee\u9898</p> <p>NP\uff08nondeterministic polynomial-time\uff09\uff1a\u4e0d\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u89e3\u51b3\u6216\u4e0d\u786e\u5b9a\u80fd\u4e0d\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u89e3\u51b3\uff0c\u4f46\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u8bc1\u660e\u4e00\u4e2a\u95ee\u9898\u7684\u4efb\u610f\u201c\u662f\u201d\u7684\u5b9e\u4f8b\u662f\u6b63\u786e\u7684\uff0c\u90a3\u4e48\u8fd9\u4e2a\u95ee\u9898\u5c5e\u4e8eNP\u7c7b</p> <p>NP\u7c7b\u5305\u542b\u6240\u6709\u591a\u9879\u5f0f\u65f6\u95f4\u89e3\u7684\u95ee\u9898</p> <p>NP-complete(NPC)\uff1a NPC\u95ee\u9898\u662fNP\u95ee\u9898\u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u662f\u6700\u96be\u7684NP\u95ee\u9898\u3002\u4efb\u610fNP\u95ee\u9898\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u90fd\u80fd\u591f\u89c4\u7ea6\u5230\u5b83\u7684NP\u95ee\u9898\uff0c\u5373\u89e3\u51b3\u4e86\u6b64NPC\u95ee\u9898\uff0c\u6240\u6709NP\u95ee\u9898\u4e5f\u90fd\u5f97\u5230\u89e3\u51b3\u3002</p> <p>\u200b   \u5982\u679cNPC\u95ee\u9898\u6709\u4e00\u4e2a\u591a\u9879\u5f0f\u7684\u89e3\uff0c\u90a3\u4e48NP\u4e2d\u7684\u6bcf\u4e00\u4e2a\u95ee\u9898\u5fc5\u7136\u90fd\u6709\u4e00\u4e2a\u591a\u9879\u5f0f\u7684\u89e3\uff0c\u8fd9\u4f7f\u5f97NPC\u95ee\u9898\u662f\u6240\u6709NP\u95ee\u9898\u4e2d\u6700\u96be\u7684\u95ee\u9898\u3002</p> <p>NP hard\uff1aNP\u96be\u95ee\u9898\uff0c\u6240\u6709NP\u95ee\u9898\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u90fd\u80fd\u7ea6\u5316(Reducibility)\u5230\u5b83\u7684\u95ee\u9898(\u4e0d\u4e00\u5b9a\u662fNP\u95ee\u9898)\u3002</p> <p>All NP problems can be solved in polynomial time in a non-deterministic machine. NP\u95ee\u9898\u53ef\u4ee5\u88ab\u975e\u786e\u5b9a\u56fe\u7075\u673a\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u89e3\u51b3</p> <p>All Np problems are decidable.</p> <p>\u5982\u679cA\u662fNPC\u4e14A\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u5316\u6210B\uff0c\u5219A\u6bd4B\u8981\u96be</p> <p></p>"},{"location":"Courses/ADS.html#92-npc-problems","title":"9.2 NPC problems","text":"<p>NPC\u95ee\u9898\u6709\uff1acircuit-SAT\uff0ctraveling salesman\u5de1\u56de\u552e\u8d27\u5458\uff0cHamilton cycle\u54c8\u5bc6\u987f\u5708\uff0c\u6700\u957f\u8def\u5f84\uff0cbin packing\u88c5\u7bb1\u95ee\u9898\uff0cknapsack\u80cc\u5305\u95ee\u9898\uff0cgraph coloring\u56fe\u7740\u8272\uff0cvertex cover</p> <ul> <li>If a decision problem B is in P and A reduces to B, then decision problem A is in P.</li> <li>A decision problem B is NP-complete if B is in NP and for every NP problem A, A reduces to B.</li> <li>A decision problem C is NP-complete if C is in NP and for some NP-complete problem B, B reduces to C.</li> <li>X reduces to Y means X \u2264 Y, X=&gt;Y, X\u53ef\u4ee5\u591a\u9879\u5f0f\u89c4\u7ea6\u5230Y</li> </ul>"},{"location":"Courses/ADS.html#proof","title":"Proof","text":"<p>\u4e3a\u4e86\u8bc1\u660e\u67d0\u4e2a\u65b0\u95ee\u9898\u662fNPC\uff0c\u5fc5\u987b\u5148\u8bc1\u660e\u5b83\u5c5e\u4e8eNP\uff0c\u7136\u540e\u5c06\u4e00\u4e2a\u9002\u5f53\u7684NPC\u95ee\u9898\u53d8\u6362\u5230\u8be5\u95ee\u9898\u3002</p> <p>\u7b2c\u4e00\u4e2aNPC\u95ee\u9898\u662f\u53ef\u6ee1\u8db3\u6027\u95ee\u9898\uff08satisfiability\uff09\uff1a\u628a\u4e00\u4e2abool\u8868\u8fbe\u5f0f\u4f5c\u4e3a\u8f93\u5165\u5e76\u63d0\u95ee\u662f\u5426\u8be5\u8868\u8fbe\u5f0f\u5bf9\u5f0f\u4e2d\u5404\u53d8\u91cf\u7684\u4e00\u6b21\u8d4b\u503c\u53d6\u503c1</p>"},{"location":"Courses/ADS.html#93-formal-language-framework","title":"9.3 Formal language framework","text":"<p>\u3010Formal language theory\u3011A language L belongs to NP iff there exist a two-input polynomial-time algorithm A that verifies language L in polynomial time.</p> <p>co-NP: A problem has its complement in NP</p>"},{"location":"Courses/ADS.html#94","title":"9.4","text":"<p>co</p>"},{"location":"Courses/ADS.html#questions_8","title":"Questions","text":"<ol> <li>Given that problem A is NP-complete. If problem B is in NP and can be polynomially reduced to problem A, then problem B is NP-complete. \u00d7</li> </ol> <p>F  The correct requirement for B to be NP-complete is not just that it is in NP and reduces to A, but that every problem in NP can be reduced to B. \u5c11\u4e86\u4e2a\u6761\u4ef6\uff1aB\u8fd8\u5fc5\u987b\u662fNP-hard\uff0c\u5373 every problem in NP can be reduced to B</p> <p>[\u9898\u89e3]ADS10 NP-Completeness_if l 1 \u2264 p l 2 and l 2 \u2208np, then l 1 \u2208np.-CSDN\u535a\u5ba2</p>"},{"location":"Courses/ADS.html#10-approximation-algorithm","title":"10 Approximation algorithm","text":"<p>\u8fd1\u4f3c\u7b97\u6cd5</p>"},{"location":"Courses/ADS.html#101-introduction","title":"10.1 Introduction","text":"<p>An approximation algorithm guarantees to seek out high accuracy and top quality solution (say within 1% of optimum) Approximation algorithms are used to get an answer near the (optimal) solution of an optimization problem in polynomial time</p> <p>approximation ratio: \\(\\rho(n)\\)\uff0c</p> <p>PTAS\uff1apolynomial time approximation schema</p> <p>PTAS 's complexity: \\(O(n^{2/\\varepsilon})\\)</p> <p>FPTAS 's complexity: \\(O(n^3(1/\\varepsilon)^2)\\)</p>"},{"location":"Courses/ADS.html#102-approximate-bin-packing","title":"10.2 Approximate bin packing","text":"<p>\u8fd1\u4f3c\u88c5\u7bb1\u95ee\u9898\uff1anp-hard\u95ee\u9898</p> <p>Next fit</p> <p>\u773c\u524d\u7684bin\u653e\u4e0d\u4e0b\u5c31\u5f00\u65b0\u7684bin</p> <p>approximation ratio: 2</p> <p>Next fit never uses more than 2M \u2013 1 bins (M: the optimal number)</p> <pre><code>void NextFit ( )\n{   read item1;\n    while ( read item2 ) {\n        if ( item2 can be packed in the same bin as item1 )\n    place item2 in the bin;\n        else\n    create a new bin for item2;\n        item1 = item2;\n    } /* end-while */\n}\n</code></pre> <p>First fit</p> <p>\u4ece\u5de6\u5230\u53f3\u904d\u5386\u627e\u5230\u53ef\u4ee5\u653e\u4e0b\u5f53\u524dpackage\u7684bin</p> <p>First fit never uses more than 17M / 10 bins (M: the optimal number)</p> <pre><code>void FirstFit ( )\n{   while ( read item ) {\n        scan for the first bin that is large enough for item;\n        if ( found )\n    place item in that bin;\n        else\n    create a new bin for item;\n    } /* end-while */\n}\n</code></pre> <p>Can be implemented in O( N log N )</p> <p>Best fit</p> <p>\u627e\u4e00\u4e2a\u5c3d\u91cf\u585e\u5f97\u6700\u6ee1\u7684bin\u653epackage\uff0c\u53ef\u4ee5\u56de\u9000\u4ee5\u8fbe\u5230best fit</p> <pre><code>\n</code></pre> <p>online algorithm</p> <p>\u4e0d\u6539\u51b3\u5b9a\uff0c\u4e00\u4e2a\u4e00\u4e2a\u5904\u7406package\uff0c\u4e0d\u80fd\u4e00\u76f4\u4fdd\u8bc1\u7ed3\u679c\u662f\u6700\u4f73</p> <p>\u3010Theorem\u3011There are inputs that force any on-line bin-packing algorithm to use at least 5/3 the optimal number of bins.</p> <p>offline algorithm</p> <p>\u5168\u5c40\u5224\u65ad\uff0c\u7b49\u5230\u8f93\u5165\u6570\u636e\u88ab\u8bfb\u5b8c\u540e\u518d\u505a\u51b3\u5b9a</p> <p>trouble maker\uff1a\u5927\u7269\u54c1</p> <p>\u89e3\u51b3\u529e\u6cd5\uff1a\u628a\u7269\u54c1\u5927\u5c0f\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u63a5\u7740\u4f7f\u7528first fit/best fit decreasing\u7b97\u6cd5</p> <p>First fit decreasing never uses more than 11M / 9 + 6/9 bins (M: the optimal number)</p>"},{"location":"Courses/ADS.html#103-knapsack-problem","title":"10.3 Knapsack problem","text":"<p>\u7b2c\u4e00\u79cd\uff1asimple \u53ef\u53d6\u7269\u54c1\u7684\u90e8\u5206\uff0c\u5bf9\\(profit_i/weight_i\\)\u8d2a\u5fc3\uff08\u53d6\u6700\u5927\u7684\u653e\uff09</p> <p>\u7b2c\u4e8c\u79cd\uff1ahard 0-1version \u53ea\u80fd\u53d6\u6574\u4e2a\u7269\u54c1\u6216\u8005\u4e0d\u53d6</p> <p>approximation ratio: 2</p> <p>\u52a8\u6001\u89c4\u5212\u89e3\u51b3\uff1a</p>"},{"location":"Courses/ADS.html#104-k-center","title":"10.4 K-center","text":"<p>\u786e\u5b9a\u4e2d\u5fc3\u4f7f\u5230\u70b9\u7684\u8ddd\u79bb\u6700\u5c0f</p> <pre><code>Centers  Greedy-2r ( Sites S[ ], int n, int K, double r )\n{   Sites  S\u2019[ ] = S[ ]; /* S\u2019 is the set of the remaining sites */\n    Centers  C[ ] = \uf0c6;\n    while ( S\u2019[ ] != \uf0c6 ) {\n        Select any s from S\u2019 and add it to C;\n        Delete all s\u2019 from S\u2019 that are at dist(s\u2019, s) \uf0a3 2r;\n    } /* end-while */\n    if ( |C| \u2264 K ) return C;\n    else ERROR(No set of K centers with covering radius at most r);\n}\n</code></pre> <p>\u7b97\\(r(c^*)\\)\u200b</p> <p>\u3010Theorem\u3011 Suppose the algorithm selects more than K centers.  Then for any set C of size at most K, the covering radius is r(C) &gt; r.</p> <p>approximation ratio: 2</p> <p>binary search\uff1a</p> <p>a smarter solution\uff1a</p> <pre><code>\n</code></pre>"},{"location":"Courses/ADS.html#questions_9","title":"Questions","text":"<p>[\u9898\u89e3]ADS11 Approximation_as we know there is a 2-approximation algorithm fo-CSDN\u535a\u5ba2</p>"},{"location":"Courses/ADS.html#11-local-search","title":"11 Local search","text":""},{"location":"Courses/ADS.html#111-basic","title":"11.1 basic","text":"<p>solve problems approximately at a local optimum</p> <p>neighbor relation S~S': S' is a neighboring solution of S~S' can be obtain by a small modification of S</p> <p>N(S)\uff1aneighborhood of S - the set {S': S~S'}</p> <pre><code>//\u68af\u5ea6\u4e0b\u964d\n</code></pre>"},{"location":"Courses/ADS.html#112-vertex-cover","title":"11.2 Vertex cover","text":"<p>problem:</p> <p>Metropolis algorithm</p>"},{"location":"Courses/ADS.html#113-hopfield-neural","title":"11.3 Hopfield neural","text":"<p>state-flipping algorithm</p>"},{"location":"Courses/ADS.html#114-maximum-cut-problem","title":"11.4 Maximum Cut problem","text":"<p>\u6700\u591a\\(O(n/\\varepsilon*logW)\\)</p>"},{"location":"Courses/ADS.html#questions_10","title":"Questions","text":"<p>greedy&amp;local search \u6700\u5c0f\u751f\u6210\u6811\u95ee\u9898</p> <p></p>"},{"location":"Courses/ADS.html#12-randomize","title":"12 Randomize","text":""},{"location":"Courses/ADS.html#121-introduction","title":"12.1 Introduction","text":"<p>Pr[A]: \u4e8b\u4ef6A\u7684\u6982\u7387</p> <p>\\(\\overline{A}\\): \u4e8b\u4ef6A\u7684\u8865\u96c6</p> <p>\u7b97\u6cd5\u968f\u673a\uff0c\u4e0d\u662f\u8f93\u5165\u968f\u673a</p>"},{"location":"Courses/ADS.html#122-hiring-problems","title":"12.2 Hiring problems","text":"<p>Naive solution: \u9047\u89c1\u6bd4\u4e4b\u524d\u6700\u597d\u7684\u8d28\u91cf\u66f4\u597d\u7684\u5c31\u66ff\u6362</p> <p>worst case: \u5019\u9009\u4eba\u8d28\u91cf\u5347\u5e8f\u6392\u5e8f \\(O(NC_h)\\)</p> <p>Randomness assumption: \u524di\u4e2a\u5019\u9009\u8005\u90fd\u5e73\u7b49\u7684\u53ef\u80fd\u662f\u6700\u597d\u7684</p> <p>Randomized permutation algorithm</p> <pre><code>//Assign each element A[ i ] a random priority P[ i ],and sort\nvoid PermuteBySorting ( ElemType A[ ], int N )\n{\nfor ( i=1; i&lt;=N; i++ )\nA[i].P = 1 + rand()%(N3 );\n/* makes it more likely that all priorities are unique */\nSort A, using P as the sort keys;\n}\n//Claim: Permute By Sorting produces a uniform random permutation of the input, assuming all priorities are distinct.\n</code></pre> <p>Online hiring algorithm--hire only once</p> <pre><code>\n</code></pre> <p>\\(Pr[S_i]=Pr[A\u2229B]=Pr[A]*Pr[B]=1/N=\\frac{k}{N(i-1)}\\)\u200b</p> <p>\\(Pr[S]=\\sum_{i=k+1}^{N}Pr[S_i]=\\sum_{i=k+1}^{N}\\frac{k}{N(i-1)}=\\frac{k}{N}\\sum_{i=k}^{N-1}\\frac{1}{i}\\)\u200b</p> <p>\\(\\frac{k}{N}In(\\frac{N}{k})\u2264Pr[S]\u2264\\frac{k}{N}In(\\frac{N-1}{k-1})\\)</p> <p>best value of k=\\(\\(\\frac{N}{e}\\)\\)</p> <p>succeed in hiring the best-qualified applicant with probability at least 1/e</p>"},{"location":"Courses/ADS.html#123-randomized-quick-sort","title":"12.3 Randomized quick sort","text":"<p>\u968f\u673a\u9009pivot\uff0c\u5f97\u5230central splitter\u7684\u6982\u7387Pr=0.5</p> <p>\\(E[T_{type j}]=O(N)\\)</p> <p>number of different types = O(logN)</p> <p>\u603bO(NlogN)</p>"},{"location":"Courses/ADS.html#13-parallel-algorithm","title":"13 Parallel Algorithm","text":""},{"location":"Courses/ADS.html#131-introduction","title":"13.1 Introduction","text":""},{"location":"Courses/ADS.html#parallel-random-access-machinepram","title":"Parallel Random Access Machine(PRAM)","text":"<p>To solve access conflicts, Exclusive-Read-Exclusive-Write(EREW)</p> <p>concurrent-read Exclusive-Write(CREW)</p> <p>Concurrent-Read Concurrent-Write(CRCW)</p> <p>\\(T(n)=logn+2\\)</p>"},{"location":"Courses/ADS.html#work-depthwd","title":"Work-Depth(WD)","text":"<p>W(n): total number of operations</p> <pre><code>1\n</code></pre> <p>W(n)=2n</p>"},{"location":"Courses/ADS.html#132-prefix-sums","title":"13.2 Prefix-sums","text":"<p>W(n)=O(n)</p> <p>T(n)=O(logn)</p> <p>C\u662f\u4ece\u4e0a\u5f80\u4e0b\u8ba1\u7b97\u7684\uff0cB\u662f\u4ece\u4e0b\u5f80\u4e0a\u7b97\u7684</p>"},{"location":"Courses/ADS.html#133-merging","title":"13.3 Merging","text":"<p>merge-&gt;rank</p> <p>T=O(1)</p> <p>W=O(n+m)=O(nlogn)--binary search</p>"},{"location":"Courses/ADS.html#parallel-ranking","title":"Parallel ranking","text":"<ol> <li>partition \u5206\u7ec4AB\uff1ap=n/logn</li> <li>actual ranking\uff1a\u6700\u591a2p\u4e2aO(logn)\u5b50\u95ee\u9898</li> </ol> <p>W(n)=O(n)\uff1bT(n)=O(logn)</p>"},{"location":"Courses/ADS.html#134-maximum-finding","title":"13.4 Maximum finding","text":"<p>a doubly-logarithmic paradigm</p> <p>h=loglogn</p> <p>All paris:T(n)=O(1)</p> <p>Random samplin: W(n)=O(n)\uff1bT(n)=O(1)</p> <p>\\(O(1/n^c)\\)\u200b</p> <p>\u5e76\u884c\u65b9\u6cd5\u5c06\u95ee\u9898\u5206\u6210\u5b50\u95ee\u9898\u53ea\u80fd\u51cf\u5c11workload\uff0c\u4e0d\u80fd\u964d\u4f4e\u6700\u574f\u60c5\u51b5</p>"},{"location":"Courses/ADS.html#questions_11","title":"Questions","text":"<p>[\u9898\u89e3]ADS14 Parallel Algorithms_while comparing a serial algorithm with its parall-CSDN\u535a\u5ba2</p>"},{"location":"Courses/ADS.html#14-external-sorting","title":"14 External Sorting","text":""},{"location":"Courses/ADS.html#141-introduction","title":"14.1 Introduction","text":"<p>mergesort</p> <p>store data on tapes, can use at least 3 drives</p> <p>N: number of records M: size of internal memory</p>"},{"location":"Courses/ADS.html#exmaple","title":"Exmaple","text":"<p>10M(10,000,000) records of 128 Bytes each and 4MB internal memory. </p> <ol> <li>the number of runs: 128*10MB/4MB = 320 runs</li> <li>1(the first run generation) + \\(log_2320\\) = 10 passes</li> </ol> <p>Then, the number of passes is \\(1+\\lceil log_2{N/M}\\rceil\\)\u200b</p> <p>seek time: O(number of passes)</p>"},{"location":"Courses/ADS.html#142-pass-reduction","title":"14.2 Pass reduction","text":"<p>use k-way merge</p> <p>\u6bcf\u7ec4\u7b2c\u4e00\u4e2a\u5148\u52a0\u5165heap\uff0c\u6700\u5c0f\u7684\u5f39\u51fa\uff0c\u7136\u540e\u5176\u4f59\u4e24\u4e2a\u4e0a\u79fb\u5de6\u79fb\uff0c\u518d\u52a0\u5165\u65b0\u7684\u5143\u7d20\uff08\u6309\u7b2c\u4e00\u7ec4\u7b2c\u4e00\u4e2a\u3001\u7b2c\u4e8c\u7ec4\u7b2c\u4e00\u4e2a\u3001\u7b2ck\u7ec4\u7b2c\u4e00\u4e2a\u3001\u7b2c\u4e00\u7ec4\u7b2c\u4e8c\u4e2a\u3001\u7b2c\u4e8c\u7ec4\u7b2c\u4e8c\u4e2a\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\uff09</p> <p>The number of passes is \\(1+\\lceil log_k{N/M}\\rceil\\)\u200b;  we need 2k tapes</p>"},{"location":"Courses/ADS.html#polyphase-merge","title":"Polyphase merge","text":"<p>require k+1 tapes only, split into \\(F_{N-1}, F_{N-2},\u00b7\u00b7\u00b7,F_{N-k}\\), where \\(F_N^k=0, F_{k-1}^k=1\\), number of runs is the Fibonacci number \\(F_N\\)</p> <p>\u6309\u6590\u6ce2\u90a3\u5951\u6570\u5206\u5272\u66f4\u597d</p>"},{"location":"Courses/ADS.html#143-buffer-handling","title":"14.3 Buffer handling","text":"<p>k-way merge: 2k input buffers &amp; 2 output buffers</p> <p>I/O time will increase despite the decrease of passes, the optimal k depends on the disk parameters and amount of internal memory available for buffers</p>"},{"location":"Courses/ADS.html#144-run-generation-and-merge","title":"14.4 Run generation and merge","text":"<p>Replacement selection</p> <p>\\(L_{avg}=2M\\) (expected value) \u5bf9\u57fa\u672c\u6709\u5e8f\u7684\u8f93\u5165\u5f88\u6709\u7528\uff0c\u8f93\u51fa\u6709\u5e8f\u6bb5\u957f\u77ed\u4e0d\u540c</p> <p>Huffman\u54c8\u592b\u66fc tree can get minimum merge times.</p> <p>\u63d0\u9ad8\u5185\u5b58\u5229\u7528\u7387\uff0c\u5347\u7ea7\u786c\u76d8\uff0c\u63d0\u5347I/O\u901f\u5ea6</p> <p></p> <p>A.  T(N, k) is O(N log k) for a fixed N</p> <p>\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5 \u5916\u90e8\u6392\u5e8f_to merge 55 runs using 3 tapes for a 2-way merge, -CSDN\u535a\u5ba2</p>"},{"location":"Courses/DB.html","title":"\u6570\u636e\u5e93\u7cfb\u7edf Database System","text":"<p> \u7ea6 13686 \u4e2a\u5b57  349 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 50 \u5206\u949f</p>"},{"location":"Courses/DB.html#1-introduction","title":"1 Introduction","text":"<p>Database-management system(DBMS) </p>"},{"location":"Courses/DB.html#2-relation-schema","title":"2 Relation schema","text":"<p>realtion \u8868tuple \u5143\u7ec4attribute \u5217domain \u57dfatomic \u539f\u5b50\u7684\uff1a\u57df\u4e2d\u7684\u5143\u7d20\u662f\u4e0d\u53ef\u518d\u5206\u5355\u5143\uff0ceg \u5e74\u9f84\u662f\u539f\u5b50\u7684\uff0c\u5730\u5740\u4e0d\u662f\u539f\u5b50\u7684null value \u7a7a\u503c\uff1a\u8868\u793a\u503c\u672a\u77e5\u6216\u4e0d\u5b58\u5728instance \u5b9e\u4f8bsuper key \u8d85\u7801\uff1a\u4e00\u4e2a\u6216\u591a\u4e2a\u5c5e\u6027\u7684\u96c6\u5408\uff0c\u53ef\u4ee5\u5728\u4e00\u4e2a\u5173\u7cfb\u4e2d\u552f\u4e00\u5730\u6807\u8bc6\u51fa\u4e00\u4e2a\u5143\u7ec4candidate key \u5019\u9009\u7801\uff1a\u6700\u5c0f\u7684\u8d85\u7801primary key(constraint) \u4e3b\u7801\uff1a\u4e00\u4e2a\u5173\u7cfb\u4e2d\u53ef\u4ee5\u533a\u5206\u4e0d\u540c\u5143\u7ec4\u7684\u4e3b\u8981\u65b9\u5f0f\u7684\u5019\u9009\u7801\uff1b\u5e94\u9009\u62e9\u90a3\u4e9b\u503c\uff08\u57fa\u672c\uff09\u4ece\u4e0d\u53d8\u5316\u7684\u5c5e\u6027foreign key\uff1ar1 \u5f15\u7528 r2\uff08\u4e3b\uff09\uff0cr1 \u4e2d\u6bcf\u4e2a\u5143\u7ec4\u5bf9 A \u7684\u53d6\u503c\u5fc5\u987b\u662f r2 \u4e2d\u67d0\u4e2a\u5143\u7ec4\u5bf9 B\uff08\u88ab\u5f15\u7528\uff09 \u7684\u53d6\u503c</p> <ul> <li>\u88ab\u5f15\u7528\u5c5e\u6027\uff08\u96c6\uff09\u5fc5\u987b\u662f\u5f15\u7528\u5173\u7cfb\u7684\u4e3b\u7801</li> </ul> <p>relational database schema \u5173\u7cfb\u6570\u636e\u5e93\u67b6\u6784</p> <p>eg, \\(Match(\\underline{match\\_id},location,time)\\)</p>"},{"location":"Courses/DB.html#3-sql","title":"3 SQL","text":"<p>\u6570\u636e\u5b9a\u4e49\u8bed\u8a00 DDL\u6570\u636e\u64cd\u7eb5\u8bed\u8a00 DML</p>"},{"location":"Courses/DB.html#31","title":"3.1 \u57fa\u672c\u7c7b\u578b","text":"<pre><code>char(n) /*\u56fa\u5b9a\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\uff0c\u82e5\u6ca1\u6ee1n\uff0c\u5219\u8865\u7a7a\u683c*/\nvarchar(n)\nint\nsmallint /*\u5c0f\u6574\u6570*/\nnumeric(p,d)/*\u5171p\u4f4d\uff0c\u5c0f\u6570\u70b9\u5de6\u8fb9\u6709d\u4f4d*/\nreal, double precision\nfloat(n)\n</code></pre>"},{"location":"Courses/DB.html#32","title":"3.2 \u67e5\u8be2\u57fa\u672c\u7ed3\u6784","text":"<p><pre><code>select A1,A2...,An \u5c5e\u6027\nfrom r1,r2,....,rn \u5173\u7cfb\u5217\u8868\nwhere P \u8c13\u8bcd\n\nselect distinct name/*\u53bb\u91cd*/\nselect all name/*\uff08\u663e\u5f0f\uff09\u4e0d\u53bb\u91cd*/\n</code></pre> <code>distinct</code> \u5f3a\u884c\u53bb\u91cd<code>all</code>\uff08\u663e\u5f0f\uff09\u4e0d\u53bb\u91cdselect \u5b50\u53e5\u53ef\u542b\u6709 +\u3001-\u3001\u3001/ \u8fd0\u7b97\u7b26where \u5b50\u53e5\u53ef\u4ee5\u4f7f\u7528\u903b\u8f91\u8fde\u8bcd and\u3001or \u548c not\uff0c\u4e5f\u652f\u6301 between and \u6307\u5b9a\u67e5\u8be2\u8303\u56f4\uff0c\u652f\u6301\u6bd4\u8f83\u8fd0\u7b97\u7b26from* \u5217\u51fa\u4e86\u5b50\u53e5\u4e0a\u5173\u7cfb\u7684\u7b1b\u5361\u5c14\u79ef</p> <p><code>as</code>\u91cd\u547d\u540d <pre><code>select distinct T.name\nfrom instructor as T, instructor as S\nwhere T.salary &gt;S.salary and S.dept_name = 'Biology';\n# \u540c\u4e00\u5f20\u8868\u9700\u8981\u5728\u4e24\u5904\u51fa\u73b0\n</code></pre></p>"},{"location":"Courses/DB.html#_1","title":"\u5b57\u7b26\u4e32\u8fd0\u7b97","text":"<p><code>upper(s)</code>\u5927\u5199<code>lower(s)</code>\u5c0f\u5199<code>trim(s)</code>\u53bb\u540e\u9762\u7684\u7a7a\u683c</p> <p><code>'Intro%'</code>\u5339\u914d\u4ee5 Intro \u5f00\u5934\u7684\u5b57\u7b26\u4e32<code>'%Comp%'</code>\u5339\u914d\u5305\u542b Comp \u7684\u5b57\u7b26\u4e32<code>'___'</code>\u5339\u914d\u4efb\u610f\u4e09\u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32<code>'___%'</code>\u5339\u914d\u81f3\u5c11\u542b\u6709\u4e09\u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32escape \u5b9a\u4e49\u8f6c\u4e49\u5b57\u7b26, eg <code>like 'ab\\%cd%' escape '\\'</code> <pre><code>select\nfrom\nwhere xx like 'yy%'\nwhere zz like 'ab\\%cd%' escape '\\'\n</code></pre></p> <p><code>*</code>\u53ef\u4ee5\u5728 select \u5b50\u53e5\u4e2d\u8868\u793a\u201c\u6240\u6709\u7684\u5c5e\u6027\u201d\uff0ceg <code>select instructor.*****</code>\uff0c<code>select *</code>\uff08from \u4e2d\u6240\u6709\u5173\u7cfb\u7684\u5c5e\u6027\uff09</p> <p><code>order by</code> \u6392\u5e8f\uff0cdesc \u964d\u5e8f\u3001asc \u5347\u5e8f\uff0ceg <code>order by salary desc, name asc</code>\uff0c\u9ed8\u8ba4\u5347\u5e8f</p> <p>where \u5b50\u53e5\u4e2d\u53ef\u4ee5\u7528 <code>between</code> \u6216\u8005 <code>not between</code></p> <pre><code>where A.a = B.a and C = xx\n\u76f8\u5f53\u4e8e\nwhere (A.a, C) = (B.a, xx)\n</code></pre>"},{"location":"Courses/DB.html#_2","title":"\u96c6\u5408\u8fd0\u7b97","text":"<p>union \u5c06\u4e24\u4e2a\u67e5\u8be2\u8bed\u53e5\u5408\u5e76\uff0c\u81ea\u52a8\u53bb\u91cd\uff1b\u4fdd\u7559\u91cd\u590d\u9879\u7528 <code>union all</code></p> <ul> <li>UNION\u548cUNION ALL\u7684ORDER BY\u5b50\u53e5\u8981\u5199\u5728\u6700\u540e\u4e00\u6761SELECT\u8bed\u53e5\u540e\u9762\uff01</li> </ul> <p>intersect \u4ea4\u8fd0\u7b97 \u53d6\u4ea4\u96c6\uff0c\u81ea\u52a8\u53bb\u91cd\uff1b\u4fdd\u7559\u91cd\u590d\u9879\u7528 <code>intersect all</code></p> <p>except \u5dee\u8fd0\u7b97\uff0c\u8f93\u51fa\u5728\u7b2c\u4e00\u4e2a\u4f46\u4e0d\u5728\u7b2c\u4e8c\u4e2a\u7684\u5143\u7ec4\uff0c\u4fdd\u7559\u91cd\u590d\u9879\u7528 <code>except all</code></p>"},{"location":"Courses/DB.html#_3","title":"\u5173\u4e8e\u7a7a\u503c","text":"A B result and true unknown unknown false unknown false unknown unknown unknown or true unknown true false unknown unknown unknown unknown unknown not unknown unknown unknown <p><code>is null</code>, <code>is not null</code><code>is unknown</code>, <code>is not unknown</code></p> <ul> <li>\u6ce8\u610f\uff1a<code>null=null</code> \u8fd4\u56de unknown</li> <li>Where\u8bed\u53e5\u4e2d\u8c13\u8bcdunknown\u6700\u7ec8\u88ab\u4f5c\u4e3afalse\u5904\u7406</li> </ul>"},{"location":"Courses/DB.html#33-aggregate-function","title":"3.3 Aggregate function \u805a\u96c6\u51fd\u6570","text":"<p>avg(col) \u5fc5\u987b\u6570\u5b57\u96c6min(col)max(col)sum(col) \u5fc5\u987b\u6570\u5b57\u96c6\uff0c\u5ffd\u7565\u8f93\u5165\u7684 null \u503c**count(col) **</p> <ul> <li><code>count(*)</code>\u8ba1\u7b97\u4e00\u4e2a\u5173\u7cfb\u4e2d\u5143\u7ec4\u7684\u6570\u91cf\uff0c\u9664\u4e86count(*) \u4e4b\u5916\u7684\u805a\u96c6\u51fd\u6570\u90fd\u5ffd\u7565\u8f93\u5165\u7684 null \u503c</li> <li>AVG()\u3001MAX()\u3001MIN()\u3001SUM()\u51fd\u6570\u5ffd\u7565\u5217\u503c\u4e3aNULL\u7684\u884c</li> <li>\u4f7f\u7528COUNT(column)\u5bf9\u7279\u5b9a\u5217\u4e2d\u5177\u6709\u503c\u7684\u884c\u8fdb\u884c\u8ba1\u6570\uff0c\u5ffd\u7565NULL\u503c</li> </ul> <pre><code>select max(salary) max_salary\nfrom employee natural join participate\nwhere pId=\"p1102\"\n# \u53c2\u52a0\"p1102\"\u9879\u76ee\u4e2demployee\u5de5\u8d44\u6700\u5927\u7684\u503c\n</code></pre>"},{"location":"Courses/DB.html#group-by","title":"group by \u5206\u7ec4\u805a\u96c6","text":"<ul> <li>\u4efb\u4f55\u51fa\u73b0\u5728 select \u4e2d\u4f46\u6ca1\u6709\u88ab\u805a\u96c6\uff08\u4ee5\u4e0a 5 \u4e2a\u51fd\u6570\uff09\u7684\u5c5e\u6027\u5fc5\u987b\u51fa\u73b0\u5728 group by \u4e2d\uff0c\u5426\u5219\u662f\u9519\u8bef\u67e5\u8be2</li> </ul> <pre><code># \u5e73\u5747\u5de5\u8d44\u5927\u4e8e 10000 \u7684\u4eba\u540d\u5e76\u53bb\u91cd\nselect count(distinct name)\nfrom table_name1\ngroup by dept_name\nhaving avg(salary) &gt; 10000\n</code></pre> <p>having \u5b50\u53e5\u5728 group by \u540e\uff0c\u9488\u5bf9 group by \u6bcf\u4e2a\u5206\u7ec4\uff0c\u53ef\u4ee5\u5728 having \u4e2d\u4f7f\u7528\u805a\u96c6\u51fd\u6570</p> <ul> <li>where \u662f\u9488\u5bf9 from \u5b50\u53e5\u7684\u7ed3\u679c\u5173\u7cfb</li> <li>select \u6700\u540e\u5bf9\u5269\u4e0b\u7684\u5206\u7ec4\u5f97\u5230\u5355\u4e2a\u7ed3\u679c\u5143\u7ec4</li> </ul> <p>some() \u67d0\u4e00\u4e2a\uff1b=some \u7b49\u4ef7\u4e8e in\uff0c\u2260some\u4e0d\u7b49\u4ef7\u4e8e not inall() \u6240\u6709\uff1b\u2260all\u7b49\u4ef7\u4e8e not in\uff0c=all \u4e0d\u7b49\u4ef7\u4e8e in</p> <p></p> <pre><code>select eID\nfrom participate\ngroup by eId\nhaving count(distinct role = 3)\n# \u4ee53\u79cd\u4e0d\u540c\u8eab\u4efd\u53c2\u52a0\u9879\u76ee\u7684employee id\n\nselect type from movie,comment\nwhere movie.title = commment.title\ngroup by title\nhaving avg(grade) &gt;= all(select avg(grade)\n                         from movie,commment\n                         where movie.title=comment.title\n                         group by title)\n# \u5e73\u5747\u5206\u6700\u9ad8\u7684\u7535\u5f71\u79cd\u7c7b\n\nSELECT A.branch_name, avg(balance)\nFROM account A, branch B\nWHERE A.branch_name = B.branch_name and\n    branch_city =\u2018Brooklyn\u2019\nGROUP BY A.branch_name\nHAVING avg(balance) &gt; 1200\n# \u5e73\u5747\u4f59\u989d\u5927\u4e8e\u5206\u652f\u57ce\u5e02\u662fBrooklyn\u7684\u6240\u6709\u5206\u652f\u7684\u5206\u652f\u540d\u5b57\n\nselect account_number AN, balance\nfrom account A\nwhere balance &gt;=(\n    select max(balance)\n    from account B\n    where A.branch_name=B.brantch_name\n    )\norder by balance\n# \u6bcf\u5bb6\u94f6\u884c\u4f59\u989d\u6700\u591a\u7684\u8d26\u6237\n</code></pre>"},{"location":"Courses/DB.html#_4","title":"\u6267\u884c\u987a\u5e8f","text":"<p>select-&gt;from-&gt;where-&gt;group by-&gt;having-&gt;select-&gt;distinct-&gt;order by</p>"},{"location":"Courses/DB.html#34-nested-subqueries","title":"3.4 Nested Subqueries \u5d4c\u5957\u5b50\u67e5\u8be2","text":"<p>\u5728where \u548c from \u91cc\u9762</p>"},{"location":"Courses/DB.html#in-not-in","title":"in &amp; not in","text":"<p>\u6d4b\u8bd5\u8d44\u683c <pre><code>select\nfrom\nwhere xx in yy(\u53ef\u4ee5\u662f\u5d4c\u5957\u8bed\u53e5\uff09;\n\nSELECT distinct customer_name\nFROM borrower\nWHERE customer_name in (\n    SELECT customer_name\n    FROM depositor)\n\nSELECT distinct customer_name\nFROM borrower\nWHERE customer_name not in (\n    SELECT customer_name\n    FROM depositor)\n</code></pre></p>"},{"location":"Courses/DB.html#exist-not-exist","title":"exist &amp; not exist","text":"<ul> <li> <p>exist \u975e\u7a7a\u65f6\u8fd4\u56de true</p> </li> <li> <p>\u5173\u7cfb A \u5305\u542b\u5173\u7cfb B == not exist ( B except A )</p> </li> <li>for all X, P(X) == not exist X such that not P(X)</li> </ul> <pre><code>Select title from movie\nExcept\nSelect title from movie\nWhere exists ( \n    select *\n    From comment A, comment B\n    Where A.title=movie.title \n    And A.user_name = B.user_name\n    And B.title=\u2019 the avenger\u2019\n    And A.grade &lt;=B.grade )\n</code></pre>"},{"location":"Courses/DB.html#unique","title":"unique","text":"<p>\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7ec4 unique = true\u5982\u679c\u5224\u65ad\u5143\u7ec4\u7ed3\u679c\u4e3a\u7a7a\uff0cunique = true\u5f53\u4e14\u4ec5\u5f53\u5173\u7cfb\u4e2d\u5b58\u5728\u4e24\u4e2a\u5143\u7ec4 t1, t2 &amp; t1=t2\uff0c\u5219 unique = false</p>"},{"location":"Courses/DB.html#with","title":"with","text":"<p>\u5b9a\u4e49\u4e00\u79cd\u4e34\u65f6\u5173\u7cfb\uff0c\u53ea\u5bf9\u5305\u542b with \u5b50\u53e5\u7684\u67e5\u8be2\u6709\u6548 <pre><code>with max_budget(value) as (select xx from table1) /* \u547d\u540d\uff08\u53d8\u91cf\u540d\uff09as \u4e00\u79cd\u5173\u7cfb */\nselect\nfrom\nwhere ;\n</code></pre></p>"},{"location":"Courses/DB.html#_5","title":"\u6807\u91cf\u5b50\u67e5\u8be2","text":"<p>\u53ea\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u5355\u4e2a\u5c5e\u6027\u7684\u5143\u7ec4</p> <pre><code>select dept_name,\n(\n    select count(*)\n    from instructor\n    where department.dept_name = instructor.dept_name\n)as num_instructors\nfrom department;\n</code></pre>"},{"location":"Courses/DB.html#35","title":"3.5 \u6570\u636e\u5e93\u521b\u5efa\u3001\u4fee\u6539","text":""},{"location":"Courses/DB.html#ddl","title":"DDL \u6570\u636e\u5b9a\u4e49\u8bed\u8a00","text":"<p>Create, alter, drop table</p> <p>create &amp; drop &amp; alter</p> <p><pre><code>create table department\n  (\n    dept_name varchar(20),\n\n    /*\u4ee5\u4e0b\u662f\u5b8c\u6574\u6027\u7ea6\u675f*/\n    primary key(dept_name),\n    foreign key(x) references y,\n\n    check(\u6761\u4ef6);\n    check()in();\n  );\n\ndrop table r; /*\u5220\u9664\u8868\uff0c\u8868\u6ca1\u4e86*/\ndelete from r;/*\u5220\u9664\u5143\u7ec4\uff0c\u8868\u8fd8\u5728*/\n\nalter table r add A D;\nalter table r drop A;\nALTER TABLE employees ADD age INT;\nALTER TABLE employees MODIFY COLUMN salary DECIMAL(10,2);\n</code></pre> sql \u7981\u6b62\u7834\u574f\u5b8c\u6574\u6027\u7684\u6570\u636e\u66f4\u65b0</p>"},{"location":"Courses/DB.html#dml","title":"DML \u6570\u636e\u64cd\u4f5c\u8bed\u8a00","text":"<p>Select, insert, delete, update</p> <p>delete</p> <p><pre><code>delete from r\nwhere P;\n</code></pre> where \u7701\u7565\u65f6\u5220\u9664\u6240\u6709\u5173\u7cfb\u4e2d\u7684\u5143\u7ec4\uff0c\u4f46\u5173\u7cfb\u8fd8\u5b58\u5728\uff0c\u53ea\u662f\u53d8\u7a7a\u4e86</p> <p>insert</p> <p><pre><code>insert into table1(A,B,C)\n  values(a,b,c);\n\ninsert into table2\n  select\n  from\n  where;\n</code></pre> \u5728\u6267\u884c\u63d2\u5165\u4e4b\u524d\u6267\u884c\u5b8c select \u8bed\u53e5\u5f88\u91cd\u8981\uff0c\u5426\u5219\u4ee5\u4e0b\u4f1a\u4ea7\u751f\u95ee\u9898\uff08\u65e0\u9650\u63d2\u5165\uff09\uff1a <pre><code>insert into table1\n  select * \n  from table1 ;\n</code></pre> \u63d2\u5165\uff08\u590d\u5236\uff09\u4e0d\u80fd\u662f\u4e3b\u952e</p> <p>update</p> <pre><code>update table1\nset xxx\nwhere yyy;\n</code></pre>"},{"location":"Courses/DB.html#case","title":"case","text":"<pre><code>update table1\nset salary = case\n  when salary &lt;= 10000 \n  then salary*1.05\n  else salary *1.03\n  end;\n\nselect case [col_name] # \u7b80\u5355\u51fd\u6570\n  when [value1]\n  then [result1]\n  else [default]\n end;\n\n CASE WHEN [expr] THEN [result1]...ELSE [default] END\n</code></pre>"},{"location":"Courses/DB.html#dcl","title":"DCL \u6570\u636e\u63a7\u5236\u8bed\u8a00","text":"<p>Grant, revoke \u8be6\u89c1 4.7</p>"},{"location":"Courses/DB.html#36","title":"3.6 \u5f62\u5f0f\u5316\u5173\u7cfb\u67e5\u8be2\u8bed\u8a00","text":"<p>\u9009\u62e9\u3001\u6295\u5f71\u3001\u5e76\u3001\u4ea4\u3001\u5dee\u3001\u7b1b\u5361\u5c14\u79ef\u3001\u91cd\u547d\u540d\u3001\u81ea\u7136\u8fde\u63a5\u3001\u9664</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"Courses/DB.html#4-sql-medium","title":"4 SQL medium","text":""},{"location":"Courses/DB.html#41-join","title":"4.1 Join \u8fde\u63a5","text":""},{"location":"Courses/DB.html#natural-join","title":"natural join","text":"<p>\u53ea\u8003\u8651\u4e24\u4e2a\u5173\u7cfb\u6a21\u5f0f\u4e2d\u90fd\u51fa\u73b0\u7684\u5c5e\u6027\u4e0a\u53d6\u503c\u76f8\u540c\u7684\u5143\u7ec4\u5bf9\u7ed3\u679c\u4e2d\uff0c\u76f8\u540c\u7684\u5c5e\u6027\u6392\u5728\u6700\u524d\uff08\u53bb\u91cd\uff09\uff0c\u7136\u540e\u5148\u5de6\u8fb9\u518d\u53f3\u8fb9\u7684\u5c5e\u6027 <pre><code>select name,course_id \nfrom student, takes # \u5404\u8868\u505a\u7b1b\u5361\u5c14\u79ef\nwhere student.ID = takes.ID;\n/*\u76f8\u5f53\u4e8e*/\nselect name,course_id\nfrom student natural join takes;\n</code></pre> <pre><code>select name, title\nfrom student natural join takes, course\nwhere takes.course_id = course.course_id\n/*\u76f8\u5f53\u4e8e*/\nselect name, title\nfrom (student natural join takes) join course using (course_id);\n</code></pre></p> <ul> <li>using \u8c13\u8bcd\u53ef\u4ee5\u6307\u5b9a\u5c5e\u6027\u540d\u5217\u8868\uff0c<code>r1 join r2 using(A1, A2)</code></li> <li>on \u5141\u8bb8\u5728\u53c2\u4e0e\u8fde\u63a5\u4e0a\u7684\u5173\u7cfb\u4e0a\u8bbe\u7f6e\u901a\u7528\u7684\u8c13\u8bcd\uff0c\u7c7b\u4f3c where\uff1b\u7528\u6cd5\u4e0e using \u4e00\u6837\uff0c\u5728\u8fde\u63a5\u8868\u8fbe\u5f0f\u672b\u5c3e\uff0c<code>join\u00b7\u00b7\u00b7on P</code>\u3002</li> </ul> <p><code>select from student join takes on student.ID=takes.ID;</code>\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\uff0con \u53ef\u4ee5\u7528 where \u7b49\u4ef7\u66ff\u6362\uff0c\u4f46\u5b83\u4eec\u5bf9\u5916\u8fde\u63a5\u7684\u8868\u73b0\u662f\u4e0d\u540c\u7684</p>"},{"location":"Courses/DB.html#outer-join","title":"outer join \u5916\u8fde\u63a5","text":"<p>\u7c7b\u4f3c\u8fde\u63a5\uff0c\u4f46\u662f\u7ed3\u679c\u4e2d\u4f1a\u521b\u5efa\u5305\u542b\u7a7a\u503c(NULL)\u7684\u5143\u7ec4\uff0c\u6765\u4fdd\u7559\u5728\u8fde\u63a5\u4e2d\u4f1a\u4e22\u5931\u7684\u5143\u7ec4\u5de6\uff08\u53f3\uff09\u5916\u8fde\u63a5\uff1a\u53ea\u4fdd\u7559\u8fd0\u7b97\u4e4b\u524d\u5de6\uff08\u53f3\uff09\u8fb9\u5173\u7cfb\u7684\u5143\u7ec4\u5168\u5916\u8fde\u63a5\uff08full outer join\uff09\uff1a\u4fdd\u7559\u4e24\u4e2a\u5173\u7cfb\u4e2d\u7684\u5143\u7ec4eg\uff0c<code>select from student natural left outer join takes;</code></p>"},{"location":"Courses/DB.html#42-views","title":"4.2 Views \u89c6\u56fe","text":"<p>\u4e00\u79cd\u201c\u865a\u62df\u5173\u7cfb\u201d\uff0c\u5728\u6982\u5ff5\u4e0a\u5305\u542b\u67e5\u8be2\u7684\u7ed3\u679c\uff0cwith \u5b50\u53e5\u62d3\u5c55\u5230\u5355\u4e2a\u67e5\u8be2\u4e4b\u5916\u7684\u65b9\u5f0f</p> <p>\u4e00\u79cd\u53ea\u663e\u793a\u6570\u636e\u8868\u4e2d\u90e8\u5206\u5c5e\u6027\u503c\u7684\u673a\u5236\uff1a\u4e0d\u4f1a\u5728\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u65b0\u7684\u8868\uff0c\u53ea\u662f\u9690\u85cf\u4e86\u90e8\u5206\u6570\u636e</p> <p>\u4f18\u70b9\uff1a\u5b89\u5168\uff0c\u7b80\u5355\u6613\u7528\uff0c\u903b\u8f91\u72ec\u7acb</p>"},{"location":"Courses/DB.html#_6","title":"\u5b9a\u4e49\u89c6\u56fe","text":"<p><code>create view v\uff08\u89c6\u56fe\u540d\uff09 as &lt;\u67e5\u8be2\u8868\u8fbe\u5f0f&gt;</code></p> <ul> <li>\u4e00\u65e6\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u89c6\u56fe\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u89c6\u56fe\u540d\u6765\u4ee3\u6307\u8be5\u89c6\u56fe\u6240\u751f\u6210\u7684\u865a\u62df\u5173\u7cfb\uff0c\u7528\u5728 from \u5b50\u53e5\u4e2d</li> <li>\u89c6\u56fe\u4e0e with \u8bed\u53e5\u7684\u4e0d\u540c\uff1a\u89c6\u56fe\u4e00\u65e6\u521b\u5efa\uff0c\u5728\u5b83\u88ab\u663e\u5f0f\u5220\u9664\u524d\u90fd\u53ef\u7528\uff1b\u800c with \u8bed\u53e5\u5bf9\u5b9a\u4e49\u5b83\u7684\u67e5\u8be2\u6765\u8bf4\u53ea\u662f\u672c\u5730\u53ef\u7528\u7684</li> </ul> <p>\u89c6\u56fe\u5c5e\u6027\u540d\u53ef\u4ee5\u663e\u793a\u6307\u5b9a\uff0c\u4e0b\u4f8b\uff1a <pre><code>create view de_total_salary(dept_name, total_salary) as\n  select dept_name, sum(salary) # \u5c06sum(salary)\u540d\u5b57\u6307\u5b9a\u4e3atotal_salary\n  from instructor\n  group by dept_name\n</code></pre> \u89c6\u56fe\u53ef\u5d4c\u5957\u5b9a\u4e49</p>"},{"location":"Courses/DB.html#materialized-view","title":"\u7269\u5316\u89c6\u56fe Materialized view","text":"<p>\u5b9a\u4e49\u89c6\u56fe\u7684\u5b9e\u9645\u5173\u7cfb\u53d1\u751f\u6539\u53d8\uff0c\u89c6\u56fe\u4e5f\u968f\u4e4b\u53d1\u751f\u6539\u53d8\u4fdd\u6301\u7269\u5316\u89c6\u56fe\u4e00\u76f4\u5728\u66f4\u65b0\u72b6\u6001\u7684\u8fc7\u7a0b\u4e3a\u7269\u5316\u89c6\u56fe\u7ef4\u62a4\uff0c\u7b80\u79f0\u89c6\u56fe\u7ef4\u62a4\uff08view maintenance\uff09</p>"},{"location":"Courses/DB.html#update","title":"\u66f4\u65b0 update","text":"<p><pre><code>insert into faculty\n  values('30765','Green','Music');\n</code></pre> \u66f4\u65b0\u53ef\u80fd\u6709\u95ee\u9898\uff08\u63d2\u5165\u7684\u503c\u5728\u539f\u6765\u5173\u7cfb\u4e0a\u662f\u88ab\u65b0\u521b\u5efa\u7684\uff09\uff0c\u90a3\u4e48\u8fd9\u4e9b\u503c\u5c06\u4e3a null \u5728\u5173\u7cfb\u8868\u4e2d\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u901a\u8fc7\u5229\u7528\u7a7a\u503c\u6765\u66f4\u65b0\u5173\u7cfb\u6765\u5f97\u5230\u5bf9\u89c6\u56fe\u7684\u66f4\u65b0\u662f\u4e0d\u53ef\u884c\u7684sql \u4e0d\u63a8\u8350\u66f4\u65b0\u548c\u4fee\u6539\u5982\u679c\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff0c\u89c6\u56fe\u662f\u53ef\u66f4\u65b0\u7684\uff08\u63d2\u5165\u3001\u66f4\u65b0\u3001\u5220\u9664\uff09\uff1a</p> <ul> <li>from \u5b50\u53e5\u4e2d\u53ea\u8981\u4e00\u4e2a\u6570\u636e\u5e93\u5173\u7cfb\uff08\u521b\u5efa\u65f6\u53ea\u4f7f\u7528\u4e86\u4e00\u5f20\u8868\u7684\u6570\u636e</li> <li>The select clause contains only attribute names of the relation and does not have any expressions, aggregates, or distinct specification.  \u521b\u5efa\u65f6\u6ca1\u6709\u8fdb\u884cdistinct\u548c\u805a\u5408\u64cd\u4f5c</li> <li>Any attribute not listed in the select clause can be set to null; that is, it does not have a not null constraint and is not part of a primary key. \u6ca1\u6709\u51fa\u73b0\u7a7a\u503c\u548cdefault</li> <li>The query does not have a group by or having clause.</li> </ul>"},{"location":"Courses/DB.html#43-transaction","title":"4.3 \u4e8b\u7269 transaction","text":"<p>\u67e5\u8be2\u6216\u66f4\u65b0\u8bed\u53e5\u7684\u5e8f\u5217\u7ec4\u6210commitrollback</p>"},{"location":"Courses/DB.html#44-integrity-constraints","title":"4.4 \u5b8c\u6574\u6027\u7ea6\u675f Integrity Constraints","text":"<p>\u5b8c\u6574\u6027\u7ea6\u675f\u4fdd\u8bc1\u6388\u6743\u7528\u6237\u5bf9\u6570\u636e\u5e93\u6240\u505a\u7684\u66f4\u6539\u4e0d\u4f1a\u5bfc\u81f4\u6570\u636e\u4e00\u81f4\u6027\u7684\u4e22\u5931\uff1b\u800c\u5b89\u5168\u6027\u7ea6\u675f(Security constraints) \u662f\u9632\u6b62\u672a\u7ecf\u6388\u6743\u7684\u7528\u6237\u8bbf\u95ee\u6570\u636e\u5e93</p>"},{"location":"Courses/DB.html#441","title":"4.4.1 \u5355\u5173\u7cfb","text":"<p>\u5728 create table \u4e2d\uff0c<code>not null</code> \u975e\u7a7a\u7ea6\u675f\uff0c\u662f\u4e00\u79cd\u57df\u7ea6\u675f<code>unique</code> \u552f\u4e00\u6027\u7ea6\u675f\uff0c\u53ef\u4ee5\u4e3a null<code>check(P)</code> \u5173\u7cfb\u4e2d\u7684\u6bcf\u4e2a\u5143\u7ec4\u5fc5\u987b\u6ee1\u8db3\u8c13\u8bcd P\uff08\u53ef\u4ee5\u662f\u5305\u542b\u5b50\u67e5\u8be2\u5728\u5185\u7684\u4efb\u610f\u8c13\u8bcd\uff09\uff1b\u82e5\u8ba1\u7b97\u7ed3\u679c\u4e3a\u672a\u77e5\uff0c\u5b83\u4e5f\u662f\u6ee1\u8db3\u7684</p>"},{"location":"Courses/DB.html#442","title":"4.4.2 \u5f15\u7528\u5b8c\u6574\u6027","text":"<p><code>foreign key(x) references y</code>\u6216\u8005<code>foreign key(x) references y(x)</code></p> <p>\u7b2c\u4e8c\u79cd\u88ab\u6307\u5b9a\u7684\u5c5e\u6027\u5217\u8868\u5fc5\u987b\u58f0\u660e\u4e3a\u88ab\u5f15\u7528\u5173\u7cfb\u7684\u8d85\u7801</p> <ul> <li>\u5916\u7801\u5fc5\u987b\u5f15\u7528\u4e00\u7ec4\u517c\u5bb9\u7684\u5c5e\u6027\uff0c\u6570\u91cf\u548c\u6570\u636e\u7c7b\u578b\u5fc5\u987b\u517c\u5bb9</li> <li>\u53ef\u4ee5\u548c\u5b9a\u4e49\u540c\u65f6\u58f0\u660e\u5916\u7801</li> <li>\u5982\u679c\u4e00\u4e2a\u7ea7\u8054\u7684\u66f4\u65b0\u6216\u5220\u9664\u6240\u5bfc\u81f4\u7684\u5bf9\u7ea6\u675f\u7684\u8fdd\u53cd\u4e0d\u80fd\u901a\u8fc7\u8fdb\u4e00\u6b65\u7684\u7ea7\u8054\u64cd\u4f5c\u6765\u89e3\u51b3\uff0c\u90a3\u4e48\u7cfb\u7edf\u5c31\u4f1a\u4e2d\u6b62\u8be5\u4e8b\u7269\uff0c\u4fee\u6539\u88ab\u5168\u90e8\u64a4\u9500</li> </ul> <pre><code>create table course\n(\n    ...\n    foreign key(dept_name)references department\n        on delete cascade\n        on update cascade,\n)\n</code></pre> <p>\u7ea7\u8054\u5220\u9664<code>on delete cascade</code>\uff1a\u5220\u9664\u5f15\u7528\u4e86\u88ab\u5220\u9664\u7cfb\u5f97\u7684\u5143\u7ec4</p>"},{"location":"Courses/DB.html#443","title":"4.4.3 \u7ed9\u7ea6\u675f\u8d4b\u540d","text":"<p>\u5728<code>create table()</code>\u91cc\u547d\u540d</p> <pre><code>salary numeric(8,2),constraint minsalary check(salary&gt;29000)\uff0c\n</code></pre> <p>\u53d6\u6d88\u7ea6\u675f\u7528drop</p> <pre><code>alter table instructor drop constraint minsalary;\n</code></pre>"},{"location":"Courses/DB.html#444","title":"4.4.4 \u65ad\u8a00","text":"<p>\u65ad\u8a00\u5c31\u662f\u4e00\u4e2a\u8c13\u8bcd\uff0c\u6570\u636e\u5e93\u603b\u80fd\u6ee1\u8db3\u4e00\u4e2a\u6761\u4ef6\uff0c\u68c0\u6d4b\u548c\u7ef4\u62a4\u7684\u5f00\u9500\u8f83\u9ad8</p> <pre><code>create assertion &lt;assertion-name&gt; check &lt;predicate&gt;;\n</code></pre>"},{"location":"Courses/DB.html#45","title":"4.5 \u6570\u636e\u7c7b\u578b","text":""},{"location":"Courses/DB.html#451","title":"4.5.1 \u65f6\u95f4","text":"<p>\u65f6\u95f4\u6233timestamp</p> <p><code>extract(field from d)</code>\u4ecedate\u6216time\u4e2d\u63d0\u53d6\u5355\u72ec\u7684\u57df\uff0c\u5982year\u3001second</p>"},{"location":"Courses/DB.html#452","title":"4.5.2 \u7c7b\u578b\u8f6c\u6362","text":"<pre><code>cast(e as t) #\u5c06\u8868\u8fbe\u5f0fe\u8f6c\u6362\u6210t\n</code></pre> <p>\u8f93\u51fa\u7a7a\u503c\u7684\u65b9\u5f0f</p> <pre><code>select ID, coalesce(salary, 0) as salary #\u5c06salary\u4e3anull\u7684\u9879\u8f93\u51fa\u4e3a0\n</code></pre> <ul> <li> <p>coalesce\u8981\u6c42\u6240\u6709\u53c2\u6570\u5fc5\u987b\u662f\u540c\u7c7b\u578b\uff0ceg \u7a7a\u5de5\u8d44\u4e0d\u80fd\u663e\u793a\u4e3a\u2019N/A\u2018</p> </li> <li> <p>decode\u51fd\u6570\u53ef\u4ee5\u66f4\u6539\u7c7b\u578b\uff08\u5728Oracle\u4e2d</p> </li> </ul> <pre><code>select ID, decode(salary, null, 'N/A', salary) as salary\n</code></pre>"},{"location":"Courses/DB.html#453-default","title":"4.5.3 \u7f3a\u7701\u503cdefault","text":"<pre><code>create table student(\n    tot_cred numeric(3,0)default 0,\n)\n</code></pre>"},{"location":"Courses/DB.html#454","title":"4.5.4 \u5927\u5bf9\u8c61","text":"<p>\u5b57\u7b26\u6570\u636e <code>clob()</code></p> <p>\u4e8c\u8fdb\u5236\u6570\u636e <code>blob()</code></p> <p>\u83b7\u53d6\u4e00\u4e2a\u5b9a\u4f4d\u5668\u63d0\u53d6\u6570\u636e\uff0c\u800c\u4e0d\u662f\u90fd\u653e\u5165\u5185\u5b58\u4e2d</p>"},{"location":"Courses/DB.html#455","title":"4.5.5 \u81ea\u5b9a\u4e49\u7c7b\u578b","text":"<p>\u521b\u5efa\u7c7b\u578b</p> <pre><code>create type dollar as numeric(12,2) final;\n# \u5b9a\u4e49\u4e3a\u603b\u517112\u4f4d\u7684\u5c0f\u6570\uff0c\u4e24\u4f4d\u5728\u5c0f\u6570\u70b9\u540e\n# final\u6ca1\u6709\u610f\u4e49\uff0c\u6709\u65f6\u53ef\u7701\n</code></pre> <p>\u521b\u5efa\u57df</p> <pre><code>create domain dollar as numeric(12,2) not null;\n</code></pre> <ul> <li>\u57df\u4e0a\u53ef\u4ee5\u7533\u660e\u975e\u7a7a\u6216\u7f3a\u7701\u503c\uff0c\u4f46\u662f\u81ea\u5b9a\u4e49\u7c7b\u578b\u4e0d\u884c</li> <li>\u57df\u4e0d\u662f\u5f3a\u7c7b\u578b\u7684\uff08not strongly typed\uff09\uff0c\u4e00\u4e2a\u57df\u7c7b\u578b\u7684\u503c\u53ef\u4ee5\u8d4b\u503c\u7ed9\u53e6\u4e00\u4e2a\u57df\u7c7b\u578b</li> </ul>"},{"location":"Courses/DB.html#456","title":"4.5.6 \u751f\u6210\u552f\u4e00\u7801\u503c","text":"<pre><code>ID number(5) generated always as identity #Oracle\u3001DB2\n#\u6b64\u540einsert\u4e0d\u7528\u8f93ID\nID serial #PostgreSQL\nID number(5) atuo_increment #MySQL\nID number(5) as identity #SqlSever\n</code></pre>"},{"location":"Courses/DB.html#457-createtable","title":"4.5.7 createtable \u62d3\u5c55","text":"<p>\u521b\u5efa\u76f8\u540c\u6a21\u5f0f\u7684\u8868</p> <pre><code>create table1 like table2;\n</code></pre> <p>\u521b\u5efa\u67e5\u8be2\u7ed3\u679c\u7684\u8868</p> <pre><code>create table1 as(\n    select\n    from\n    where\n)with data;\n</code></pre> <ul> <li>\u4e0eview\u7684\u533a\u522b\u662f\uff1a\u5f53\u8868\u88ab\u521b\u5efa\u65f6\u5185\u5bb9\u88ab\u52a0\u8f7d\uff0c\u89c6\u56fe\u603b\u662f\u53cd\u5e94\u5f53\u524d\u67e5\u8be2\u7ed3\u679c</li> </ul>"},{"location":"Courses/DB.html#46-index","title":"4.6 Index \u7d22\u5f15","text":"<p>\u7d22\u5f15\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6570\u636e\u7ed3\u6784\u521b\u5efa</p> <pre><code>create (unique) index &lt;\u7d22\u5f15\u540d&gt; on &lt;\u5173\u7cfb\u540d&gt; (&lt;\u5c5e\u6027\u5217\u8868&gt;);\n</code></pre> <p>\u64a4\u9500</p> <pre><code>drop index &lt;\u7d22\u5f15\u540d&gt;;\n</code></pre> <p>\u91cd\u547d\u540d</p> <pre><code>ALTER INDEX SCno RENAME SCSno;\n</code></pre>"},{"location":"Courses/DB.html#47-authorization","title":"4.7 \u6388\u6743 Authorization","text":"<p>\u6743\u9650\u64cd\u4f5c\uff1a\u9009\u62e9\u3001\u63d2\u5165\u3001\u66f4\u65b0\u3001\u5220\u9664</p>"},{"location":"Courses/DB.html#471","title":"4.7.1 \u6388\u6743\u4e0e\u6536\u6743","text":"<p>\u6388\u6743\uff1a</p> <pre><code>grant &lt;\u6743\u9650\u5217\u8868&gt;\non &lt;\u5173\u7cfb\u540d\u6216\u89c6\u56fe\u540d&gt;\nto &lt;\u7528\u6237/\u89d2\u8272\u5217\u8868&gt;;\n</code></pre> <p>\u5982<code>grant select on department to Amit; grant update(budget) on departmrnt to Amit;</code></p> <p>\u6536\u6743\uff1a</p> <pre><code>revoke &lt;\u6743\u9650\u5217\u8868&gt;\non &lt;\u5173\u7cfb\u540d\u6216\u89c6\u56fe\u540d&gt;\nto &lt;\u7528\u6237/\u89d2\u8272\u5217\u8868&gt;;\n</code></pre> <p>\u5982<code>revoke select on department to Amit; revoke update(budget) on departmrnt to Amit;</code></p>"},{"location":"Courses/DB.html#472","title":"4.7.2 \u89d2\u8272","text":"<p><code>create role A;</code></p> <p>\u4e00\u4e2a\u7528\u6237/\u89d2\u8272\u7684\u6743\u9650\u5305\u62ec\uff1a</p> <ol> <li>\u76f4\u63a5\u6388\u4e88\u8be5\u7528\u6237/\u89d2\u8272\u7684\u6240\u6709\u6743\u9650\uff1b\uff08\u7ed9\u81ea\u5df1\u6388\u6743\uff09</li> <li>\u6388\u4e88\u8be5\u7528\u6237/\u89d2\u8272\u6240\u62e5\u6709\u89d2\u8272\u7684\u6240\u6709\u6743\u9650</li> </ol> <ul> <li>\u6743\u9650\u53ef\u88ab\u7ee7\u627f\uff0c\u5982<code>grant A to B; grant B to C;</code>\uff0c\u90a3\u4e48C\u6709A\u548cB\u7684\u6240\u6709\u6743\u9650</li> </ul>"},{"location":"Courses/DB.html#473","title":"4.7.3 \u89c6\u56fe","text":""},{"location":"Courses/DB.html#5-advanced-sql","title":"5 Advanced SQL","text":""},{"location":"Courses/DB.html#51-sql","title":"5.1 \u4f7f\u7528\u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00\u8bbf\u95eeSQL","text":""},{"location":"Courses/DB.html#511-jdbc","title":"5.1.1 JDBC","text":"<p>\u52a8\u6001SQL\uff1aJDBC\uff0cODBC</p> <p>\u5d4c\u5165\u5f0fSQL</p> <pre><code>public static void JDBCexample(String userid, String passwd)\n{\n    try (\n        Connection conn = DriverManager.getConnection(//\u8fde\u63a5\n            \"jdbc:oracle:thin:@db.yale.edu:1521:univdb\",//\u534f\u8bae \u670d\u52a1\u5668\u4e3b\u673a\u540d\u79f0 \u7aef\u53e3\u53f7 \u7279\u5b9a\u6570\u636e\u5e93\n            userid, //\u6570\u636e\u5e93\u7528\u6237\u6807\u8bc6\n            passwd);//\u5bc6\u7801\n        Statement stmt = conn.createStatement();\n    ) {\n        try {\n            stmt.executeUpdate(//\u6267\u884c\u8bed\u53e5\n                \"insert into instructor values(\u201977987\u2019,\u2019Kim\u2019,\u2019Physics\u2019,98000)\");\n        }\n        catch ( SQLException sqle) {\n            System.out.println(\"Could not insert tuple. \" + sqle);\n        }\n        ResultSet rset = stmt.executeQuery(//\u6267\u884c\u8bed\u53e5\n            \"select dept name, avg (salary) \"+\n            \" from instructor \"+\n            \" group by dept name\");\n        while (rset.next()) {//\u662f\u5426\u8fd8\u5b58\u5728\u5c1a\u672a\u63d0\u53d6\u7684\u5143\u7ec4\n            System.out.println(rset.getString(\"dept name\") + \" \" +\n                               rset.getFloat(2));\n        }\n    }\n    catch (Exception sqle)\n    {\n        System.out.println(\"Exception : \" + sqle);\n    }\n}\n</code></pre>"},{"location":"Courses/DB.html#prepared-statement","title":"\u9884\u5907\u8bed\u53e5 prepared statement","text":"<p>\u7528\uff1f\u4ee3\u66ff\u67d0\u4e9b\u503c</p> <pre><code>PreparedStatement pStmt = conn.prepareStatement(\n\"insert into instructor values(?,?,?,?)\");\npStmt.setString(1, \"88877\");\npStmt.setString(2, \"Perry\");\npStmt.setString(3, \"Finance\");\npStmt.setInt(4, 125000);\npStmt.executeUpdate();\npStmt.setString(1, \"88878\");\npStmt.executeUpdate();\n</code></pre> <ul> <li> <p>\u76f8\u540c\u7684\u8bed\u53e5\u53ea\u7528\u7f16\u8bd1\u4e00\u6b21</p> </li> <li> <p>\u9884\u5907\u8bed\u53e5\u53ef\u4ee5\u907f\u514dSQL\u6ce8\u5165\uff0c\u56e0\u4e3a\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u5c06\u88ab\u63d2\u5165\u8f6c\u4e49\u5b57\u7b26</p> </li> <li> <p>\u4e0d\u8981\u521b\u5efa\u4e00\u6761\u8fde\u63a5\u5b57\u7b26\u4e32\u7684\u67e5\u8be2</p> </li> </ul> <p><code>.getMetaData()</code> \u5728\u8fd0\u884c\u65f6\u4ece\u6570\u636e\u5e93\u7cfb\u7edf\u83b7\u5f97\u6240\u5904\u6570\u636e\u7684\u58f0\u660e</p> <p><code>.setAutoCommit(true/false)</code> \u5f00/\u5173\u81ea\u52a8\u63d0\u4ea4</p> <p><code>.commit()</code>\u4e8b\u7269\u5fc5\u987b\u663e\u5f0f\u5730\u63d0\u4ea4/\u56de\u9000</p> <p><code>.rollback()</code></p>"},{"location":"Courses/DB.html#512-odbc","title":"5.1.2 ODBC","text":"<p>open data connectivity</p> <pre><code>void ODBCexample()\n{\n    RETCODE error;\n    HENV env; /* environment */\n    HDBC conn; /* database connection */\n    SQLAllocEnv(&amp;env);\n    SQLAllocConnect(env, &amp;conn);\n    SQLConnect(conn, \"db.yale.edu\", SQL NTS , \"avi\", SQL NTS ,\"avipasswd\", SQL NTS );\n{\n    char deptname[80];\n    float salary;\n    int lenOut1, lenOut2;\n    HSTMT stmt;\n    char * sqlquery = \"select dept name, sum (salary)\nfrom instructor group by dept name\";\n    SQLAllocStmt(conn, &amp;stmt);\n    error = SQLExecDirect(stmt, sqlquery, SQL NTS );\n    if (error == SQL SUCCESS ) {\n        SQLBindCol(stmt, 1, SQL C CHAR , deptname , 80, &amp;lenOut1);\n        SQLBindCol(stmt, 2, SQL C FLOAT, &amp;salary, 0 , &amp;lenOut2);\n        while ( SQLFetch (stmt) == SQL SUCCESS ) {\n            printf (\" %s %g\u2216n\", deptname, salary);\n        }\n    }\n    SQLFreeStmt(stmt, SQL DROP );\n}\n    SQLDisconnect(conn);\n    SQLFreeConnect(conn);\n    SQLFreeEnv(env);\n}\n</code></pre>"},{"location":"Courses/DB.html#sql","title":"\u5d4c\u5165\u5f0fSQL","text":"<p><code>EXEC SQL &lt;\u5d4c\u5165\u5f0fSQL\u8bed\u53e5&gt; END_EXEC;</code> \u8bc6\u522b\u5d4c\u5165sql\u8bf7\u6c42</p> <p>\u53ef\u4f7f\u7528\u5bbf\u4e3b\u8bed\u8a00host language\u7684\u53d8\u91cf\uff0c\u9700\u5728\u53d8\u91cf\u540d\u524d\u52a0\u4e0a:</p> <p>\u904d\u5386\u4e00\u4e2a\u5d4c\u5165\u5f0fsql\u7684\u67e5\u8be2\u7ed3\u679c\uff0c\u58f0\u660e\u4e00\u4e2a\u6e38\u6807\u53d8\u91cf(cursor)\uff0c<code>declare c cursor for &lt;SQL query&gt;</code></p> <p><code>EXEC SQL open c;</code> open \u6267\u884c\u8bed\u53e5\u5e76\u5c06\u7ed3\u679c\u5b58\u5728\u4e00\u4e2a\u4e34\u65f6\u5173\u7cfb\u4e2d</p> <p><code>EXEC SQL fetch c into :si, :sn</code> fetch \u5728\u67e5\u8be2\u7ed3\u679c\u4e2d\u4e00\u4e2a\u5143\u7ec4\u7684\u503c\u653e\u5728\u5bbf\u4e3b\u8bed\u8a00\u53d8\u91cf\u4e2d</p> <p>\u5982\u4f55\u66f4\u65b0\uff1a</p> <pre><code>EXEC SQL\ndeclare c curor for\n    select*\n    from instructor\n    where dept_name='Music'\n    for update\n</code></pre>"},{"location":"Courses/DB.html#52","title":"5.2 \u51fd\u6570\u4e0e\u8fc7\u7a0b","text":""},{"location":"Courses/DB.html#521","title":"5.2.1 \u51fd\u6570","text":"<pre><code>create function dept_count(dept_name varchar(20))\n    returns integer\n    begin\n    declare d_count integer;\n        select count(*) into d_count\n        from instructor\n        where instructor.dept_name= dept_name\n    return d_count;\n    end\n</code></pre> <p>\u200b   \u4f7f\u7528\u65b9\u6cd5\uff1a<code>dept_count(dept_name)</code></p> <p>\u8868\u51fd\u6570\uff08table function\uff09</p> <pre><code>create function instructor of (dept name varchar(20))\nreturns table (\n    ID varchar (5),\n    name varchar (20),\n    dept name varchar (20),\n    salary numeric (8,2))\nreturn table\n(select ID, name, dept name, salary\n from instructor\n where instructor.dept name = instructor of.dept name);\n</code></pre> <p>\u200b   \u4f7f\u7528\u65b9\u6cd5\uff1a<code>select * from table(instructor_of('Finance'));</code></p>"},{"location":"Courses/DB.html#522-procedures","title":"5.2.2 \u8fc7\u7a0b procedures","text":"<p>\u4ee5\u4e0adept_count\u4e5f\u53ef\u4ee5\u5199\u6210\u4e00\u4e2a\u8fc7\u7a0b\uff1a</p> <pre><code>create procedure dept_count_proc(in dept_name varchar(20),out d_count integer)\n    begin\n        select count(*) into d_count\n        from instructor\n        where instructor.dept_name= dept_count_proc.dept_name\n    end\n</code></pre> <p>\u200b   in \u5f85\u8d4b\u503c\u7684\u53c2\u6570\uff1bout \u8fd4\u56de\u7ed3\u679c\u53c2\u6570</p> <p>\u200b   \u4f7f\u7528\u65b9\u5f0f\uff1a<code>declare d_count integer; call dept_count_proc('Physics',d_count);</code></p>"},{"location":"Courses/DB.html#while-and-repeat-statements","title":"while and repeat statements","text":"<pre><code>while boolean expression do\n    sequence of statements ;\nend while\nrepeat\n    sequence of statements ;\nuntil boolean expression\nend repeat\n</code></pre>"},{"location":"Courses/DB.html#loop","title":"loop","text":"<pre><code>declare n integer default 0;\nfor r as\n    select budget from department\n    where dept_name = 'Music'\ndo\n    set n = n + r.budget\nend for\n</code></pre>"},{"location":"Courses/DB.html#if-then-else","title":"if-then-else","text":"<pre><code>if boolean expression\n    then statement or compound statement\nelseif boolean expression\n    then statement or compound statement\nelse statement or compound statement\nend if\n</code></pre>"},{"location":"Courses/DB.html#53-trigger","title":"5.3 Trigger \u89e6\u53d1\u5668","text":"<p>\u53ea\u8981\u53d1\u751f\u7279\u5b9a\u7684\u4e8b\u4ef6\u5e76\u4e14\u6ee1\u8db3\u76f8\u5e94\u7684\u6761\u4ef6\uff0c\u6570\u636e\u5e93\u7cfb\u7edf\u81ea\u52a8\u6267\u884c</p> <p>\u53ef\u7528\u6765\u5b9e\u884c\u7279\u6b8a\u7684\u5b8c\u6574\u6027\u7ea6\u675f</p> <p>\u4ee5\u4e0b\u5c55\u793a\u89e6\u53d1\u5668\u786e\u4fddsection\u5173\u7cfb\u7684time_slot_id\u5c5e\u6027\u4e0a\u7684\u5f15\u7528\u5b8c\u6574\u6027</p> <pre><code>create trigger timeslot check1 after insert on section # \u63d2\u5165\u540e\u542f\u52a8\nreferencing new row as nrow # \u521b\u5efa\u4e86\u4e00\u4e2a\u8fc7\u6e21\u53d8\u91cfnrow\uff0c\u7528\u6765\u5b58\u50a8\u6240\u63d2\u5165\u884c\u7684\u503c\uff08\u9664\u4e86\u63d2\u5165\u8fd8\u53ef\u4ee5\u7528\u6765\u66f4\u65b0\nfor each row # \u663e\u5f0f\u5730\u5728\u88ab\u63d2\u5165\u6bcf\u4e00\u884c\u4e0a\u8fed\u4ee3\nwhen (nrow.time slot id not in ( # when\u6307\u5b9a\u6761\u4ef6\n    select time slot id\n    from time slot)) /* time slot id not present in time slot */\nbegin\nrollback\nend;\n\ncreate trigger timeslot check2 after delete on timeslot #\u5220\u9664\u540e\nreferencing old row as orow # \u521b\u5efa\u4e00\u4e2a\u53d8\u91cf\u5b58\u50a8\u5df2\u66f4\u65b0\u6216\u5220\u9664\u7684\u884c\u7684\u503c\nfor each row\nwhen (orow.time slot id not in (\n    select time slot id\n    from time slot) /* last tuple for time slot id deleted from time slot */\n      and orow.time slot id in (\n          select time slot id\n          from section)) /* and time slot id still referenced from section*/\nbegin\nrollback\nend; # begin automic &lt;sql\u8bed\u53e5&gt; end;\n</code></pre>"},{"location":"Courses/DB.html#6-e-r","title":"6 E-R \u6a21\u578b\u7684\u6570\u636e\u5e93\u8bbe\u8ba1","text":"<p>\u5b9e\u4f53-\u8054\u7cfb\u6a21\u578b</p>"},{"location":"Courses/DB.html#61","title":"6.1 \u8bbe\u8ba1","text":"<p>E-R\u6a21\u578b\u7531\u5b9e\u4f53entities\u548c\u5173\u7cfbrelation\u7ec4\u6210 \u2022 \u5b9e\u4f53\uff1a\u7528\u4e8e\u533a\u5206\u5176\u4ed6\u79cd\u7c7b\u7684\u7269\u4f53 \u2022 \u53ef\u4ee5\u662f\u5177\u4f53\u7684\u8d27\u62bd\u8c61\u7684 \u2022 \u62e5\u6709\u81ea\u8eab\u7684\u5c5e\u6027 \u2022 \u5173\u7cfb\uff1a\u5b9e\u4f53\u4e4b\u95f4\u7684\u8054\u7cfb \u2022 \u4e00\u5bf9\u4e00\u3001\u4e00\u5bf9\u591a\u3001\u591a\u5bf9\u591a</p>"},{"location":"Courses/DB.html#62","title":"6.2 \u5b9e\u4f53\u548c\u8054\u7cfb","text":"<p>\u5b9e\u4f53(entity)\uff1a\u53ef\u533a\u522b\u4e8e\u5176\u4ed6\u5bf9\u8c61\u7684\u201c\u4e8b\u7269\u201d\u6216\u201c\u5bf9\u8c61\u201d\uff1b\u4f8b\u5982\uff0c\u4eba\u3001\u8bfe\u7a0b</p> <p>\u5b9e\u4f53\u96c6(entity set)\uff1a\u5171\u4eab\u76f8\u540c\u6027\u8d28\u3001\u5177\u6709\u76f8\u540c\u7c7b\u578b\u7684\u5b9e\u4f53\u7684\u96c6\u5408</p> <ul> <li>\u5b9e\u4f53\u96c6\u662f\u77e9\u5f62\uff0c\u5c5e\u6027\u662f\u7531\u76f4\u7ebf\u8fde\u63a5\u7684\u692d\u5706\u5f62</li> <li></li> </ul> <p>\u8054\u7cfb(relationship)\uff1a\u591a\u4e2a\u5b9e\u4f53\u4e4b\u95f4\u76f8\u4e92\u5173\u8054</p> <p>\u8054\u7cfb\u96c6(relationship set)\uff1a\u76f8\u540c\u7c7b\u578b\u8054\u7cfb\u7684\u96c6\u5408</p> <ul> <li>\u8054\u7cfb\u96c6\u5728E-R\u56fe\u4e2d\u7528\u83f1\u5f62\u8868\u793a\uff0c\u83f1\u5f62\u901a\u8fc7\u7ebf\u6761\u8fde\u63a5\u90fd\u591a\u4e2a\u4e0d\u540c\u7684\u5b9e\u4f53\u96c6\uff08\u77e9\u5f62\uff09</li> </ul> <p></p> <ul> <li>\u8054\u7cfb\u96c6\u7684\u5ea6(degree)\uff1a\u53c2\u4e0e\u8054\u7cfb\u96c6\u7684\u5b9e\u4f53\u96c6\u7684\u6570\u76ee\uff08\u4e8c\u5143\u8054\u7cfb\u96c6\u7684\u5ea6\u4e3a2\uff09</li> <li>\u8054\u7cfb\u96c6\u7684\u5c5e\u6027\u662f\u672a\u5206\u5272\u7684\u77e9\u9635\uff0c\u7528\u865a\u7ebf\u4e0e\u8054\u7cfb\u96c6\u7684\u83f1\u5f62\u76f8\u8fde</li> <li>\u8054\u7cfb\u96c6\u4ec5\u663e\u793a\u5728\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4f46\u5b9e\u4f53\u96c6\u53ef\u4ee5\u5728\u4e0d\u6b62\u4e00\u4e2a\u4f4d\u7f6e\u91cd\u590d\u51fa\u73b0</li> </ul>"},{"location":"Courses/DB.html#63","title":"6.3 \u590d\u6742\u5c5e\u6027","text":"<ul> <li> <p>\u57df/\u503c\u96c6\uff1a\u5c5e\u6027\u53ef\u4ee5\u53d6\u503c\u7684\u96c6\u5408</p> </li> <li> <p>\u7b80\u5355\u5c5e\u6027\u4e0d\u80fd\u88ab\u5212\u5206\u6210\u5b50\u90e8\u5206\uff1b\u590d\u5408(composite)\u5c5e\u6027\u53ef\u4ee5\u5212\u5206\uff0c\u5982name\u5305\u62ecfirst name,last name</p> </li> <li> <p>\u5355\u503csingle-valued\u5c5e\u6027\uff1a\u5c5e\u6027\u5bf9\u4e00\u4e2a\u7279\u5b9a\u5b9e\u4f53\u53ea\u6709\u4e00\u4e2a\u5355\u72ec\u7684\u503c\uff08\u5982\u5b66\u751f\u7684ID\uff09\uff1b\u591a\u503c mutivalued\u5c5e\u6027\uff1a\u5bf9\u5e94\u4e8e\u4e00\u7ec4\u503c\uff08\u6559\u5e08\u7684\u7535\u8bdd\u53f7\u7801{phone_num}\uff09</p> </li> <li> <p>\u6d3e\u751f\u5c5e\u6027derived\uff1a\u4e0d\u5b58\u50a8\u5b83\u7684\u503c\uff0c\u53ea\u5728\u9700\u8981\u7684\u65f6\u5019\u8ba1\u7b97\u51fa\u6765</p> </li> </ul>"},{"location":"Courses/DB.html#64","title":"6.4 \u6620\u5c04\u57fa\u6570","text":"<p>\u6620\u5c04\u57fa\u6570(mapping cardinality)\uff1a\u4e00\u4e2a\u5b9e\u4f53\u989d\u80fd\u901a\u8fc7\u4e00\u4e2a\u8054\u7cfb\u96c6\u5173\u8054\u9886\u4e00\u4e9b\u5b9e\u4f53\u7684\u6570\u91cf</p> <p>\u8054\u7cfb\u96c6\u548c\u5b9e\u4f53\u96c6\u4e4b\u95f4\uff1a</p> <ul> <li> <p>\u6709\u5411\u7ebf\u6bb5\u2192\u6307\u5411\u201d\u4e00\u201c\u7684\u4e00\u4fa7\uff0c\u65e0\u5411\u7ebf\u6bb5\u2013 \u6307\u5411\u201d\u591a\u201c\u7684\u4e00\u4fa7</p> </li> <li> <p>\u53cc\u7ebf\u8868\u793a\u4e00\u4e2a\u5b9e\u4f53\u5728\u8054\u7cfb\u96c6\u4e2d\u5168\u90e8\u53c2\u4e0e</p> </li> </ul> <p>\u5168\u90e8\u53c2\u4e0e\uff1a\u4e00\u4e2a\u5b9e\u4f53\u96c6E\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b9e\u4f53\u90fd\u53c2\u4e0e\u5230\u8054\u7cfb\u96c6R\u7684\u81f3\u5c11\u4e00\u4e2a\u8054\u7cfb\u4e2d\uff0c\u5426\u5219\u5c31\u662f\u90e8\u5206\u53c2\u4e0e</p> <p><code>l..h</code>\uff1al\u8868\u793a\u6700\u5c0f\u57fa\u6570\uff0ch\u8868\u793a\u6700\u5927\u57fa\u6570</p> <p></p> <p>\u200b   \u4e00\u4f4d\u6559\u5e08\u53ef\u4ee5\u67090\u6216\u591a\u540d\u5b66\u751f\uff0c\u6bcf\u540d\u5b66\u751f\u5fc5\u987b\u6709\u4e14\u53ea\u6709\u4e00\u4f4d\u5bfc\u5e08</p>"},{"location":"Courses/DB.html#65","title":"6.5 \u4e3b\u7801","text":""},{"location":"Courses/DB.html#651-r","title":"6.5.1 \u8054\u7cfb\u96c6R\u7684\u4e3b\u7801","text":"<p>\u8054\u7cfb\u96c6R\u7684\u4e3b\u7801\uff1a\u5b9e\u4f53\u96c6\u7684\\(primary-key(E_i)\\) \u7684\u96c6\u5408\uff0c\u4e5f\u662f\u8d85\u7801</p> <p>\u82e5\u6709\u5c5e\u6027\uff0c\u5b9e\u4f53\u96c6\u7684\\(primary-key(E_i)\\) \u7684\u96c6\u5408\u518d\u5e76\u4e0a\u5c5e\u6027\u80fd\u6784\u6210\u8054\u7cfb\u96c6R\u4e2d\u4e00\u4e2a\u5355\u72ec\u7684\u8054\u7cfb</p> <p>\u6211\u4eec\u81f3\u591a\u5141\u8bb8\u4e00\u4e2a\u7bad\u5934\u4ece\u4e00\u4e2a\u975e\u4e8c\u5143\u7684\u8054\u7cfb\u96c6\u6307\u51fa</p>"},{"location":"Courses/DB.html#652","title":"6.5.2 \u5f31\u5b9e\u4f53\u96c6","text":"<p>\u5f31\u5b9e\u4f53\u96c6(weak entity set)\u7684\u5b58\u5728\u4f9d\u8d56\u4e8e\u53e6\u4e00\u4e2a\u6807\u8bc6\u6027\u5b9e\u4f53\u96c6(indentifying entity set)\uff1b\u6211\u4eec\u4f7f\u7528\u6807\u8bc6\u6027\u5b9e\u4f53\u96c6\u7684\u4e3b\u7801\u548c\u5206\u8fa8\u7b26\u5c5e\u6027(discriminator attribute)\u6765\u552f\u4e00\u5730\u6807\u8bc6\u5f31\u5b9e\u4f53\u3002</p> <p>\u6bcf\u4e00\u4e2a\u5f31\u5b9e\u4f53\u5fc5\u987b\u548c\u4e00\u4e2a\u6807\u8bc6\u6027\u5b9e\u4f53\u76f8\u5173\u8054\uff0c\u5b83\u4eec\u7684\u76f8\u5173\u8054\u5173\u7cfb\u88ab\u79f0\u4e3a\u6807\u8bc6\u6027\u8054\u7cfb(identifying relationship)</p> <ul> <li>\u53cc\u8fb9\u6846\u7684\u77e9\u5f62\u63cf\u8ff0\u5f31\u5b9e\u4f53\u96c6\uff0c\u5176\u5206\u8fa8\u7b26\u88ab\u52a0\u4e0a\u865a\u7684\u4e0b\u5212\u7ebf</li> <li>\u5173\u8054\u5f31\u5b9e\u4f53\u96c6\u548c\u6807\u8bc6\u6027\u5f3a\u5b9e\u4f53\u96c6\u7684\u8054\u7cfb\u96c6\u4ee5\u53cc\u8fb9\u6846\u7684\u83f1\u5f62\u8868\u793a</li> </ul>"},{"location":"Courses/DB.html#66","title":"6.6 \u5220\u9664\u5197\u4f59\u5c5e\u6027","text":""},{"location":"Courses/DB.html#67-e-r","title":"6.7 \u5c06E-R\u56fe\u8f6c\u6362\u6210\u5173\u7cfb\u6a21\u5f0f","text":""},{"location":"Courses/DB.html#68","title":"6.8 \u62d3\u5c55","text":""},{"location":"Courses/DB.html#681","title":"6.8.1 \u7279\u5316","text":"<p>\u5728\u5b9e\u4f53\u96c6\u5185\u90e8\u8fdb\u884c\u5206\u7ec4\u7684\u8fc7\u7a0b\u79f0\u4e3a\u7279\u5316(specialization)</p> <ul> <li>\u7279\u5316\u7528\u4ece\u7279\u5316\u5b9e\u4f53\u6307\u5411\u53e6\u4e00\u65b9\u5b9e\u4f53\u7684\u7a7a\u5fc3\u7bad\u5934\u6765\u8868\u793a</li> </ul> <p>\u91cd\u53e0(overlapping)\u7279\u5316\uff1a\u4e00\u4e2a\u5b9e\u4f53\u53ef\u4ee5\u5c5e\u4e8e\u591a\u4e2a\u7279\u5316\u5b9e\u4f53\u96c6</p> <p>\u4e0d\u76f8\u4ea4(disjoint)\u7279\u5316\uff1a\u4e00\u4e2a\u5b9e\u4f53\u5c5e\u4e8e\u81f3\u591a\u4e00\u4e2a\u7279\u5316\u5b9e\u4f53\u96c6</p> <ul> <li>\u7279\u5316\u8054\u7cfb\u8fd8\u53ef\u4ee5\u88ab\u79f0\u4f5c\u8d85\u7c7b-\u5b50\u7c7b\u8054\u7cfb(superclass-subclass)</li> </ul>"},{"location":"Courses/DB.html#682","title":"6.8.2 \u6982\u5316","text":""},{"location":"Courses/DB.html#685","title":"6.8.5 \u805a\u96c6","text":"<p>\u805a\u96c6(aggregation)\u662f\u4e00\u79cd\u62bd\u8c61</p>"},{"location":"Courses/DB.html#69","title":"6.9 \u95ee\u9898","text":"<ul> <li>\u8054\u7cfb\u96c6\u4e2d\u5df2\u7ecf\u9690\u542b\u76f8\u5173\u5b9e\u4f53\u96c6\u4e3b\u7801\u5c5e\u6027\u4e86\uff0c\u4e0d\u80fd\u518d\u5c06\u5b83\u4eec\u4f5c\u4e3a\u8054\u7cfb\u96c6\u7684\u5c5e\u6027</li> </ul>"},{"location":"Courses/DB.html#7","title":"7 \u5173\u7cfb\u6570\u636e\u5e93\u8bbe\u8ba1","text":""},{"location":"Courses/DB.html#71","title":"7.1 \u597d\u7684\u8bbe\u8ba1\u5173\u7cfb\u7684\u7279\u70b9","text":""},{"location":"Courses/DB.html#711","title":"7.1.1 \u5206\u89e3","text":"<p>\u65e0\u635f\u5206\u89e3lossless decomposition\uff1a\u5982\u679c\u7528\u4e24\u4e2a\u5173\u7cfb\u6a21\u5f0fR1\u548cR2\u53bb\u66ff\u4ee3R\u65f6\u6ca1\u6709\u4fe1\u606f\u4e22\u5931\uff0c\u5219\u8be5\u5206\u89e3\u662f\u4e00\u4e2a\u65e0\u635f\u5206\u89e3\u3002</p>"},{"location":"Courses/DB.html#712","title":"7.1.2 \u89c4\u8303\u5316\u7406\u8bba","text":""},{"location":"Courses/DB.html#72","title":"7.2 \u4f7f\u7528\u51fd\u6570\u4f9d\u8d56\u8fdb\u884c\u5206\u89e3","text":""},{"location":"Courses/DB.html#721","title":"7.2.1 \u7b26\u53f7","text":"<p>\u5c5e\u6027\u96c6\uff1a\\(\\alpha\\)</p> <p>\\(r(R)\\)\u200b\uff1a\u5177\u6709\u6a21\u5f0fR\u7684\u5173\u7cfbr</p> <p>K\uff1aR\u7684\u4e00\u4e2a\u8d85\u7801</p> <p>\u51fd\u6570\u4f9d\u8d56\uff1a</p> <p>\u5982\u679c\\(R_1\u2229R_2\\) \u6784\u6210\\(R_1\\) \u6216\\(R_2\\)\u200b\u200b \u7684\u8d85\u7801\uff0c\u90a3\u4e48R\u7684\u8be5\u5206\u89e3\u5c31\u662f\u4e00\u4e2a\u65e0\u635f\u5206\u89e3\u3002</p>"},{"location":"Courses/DB.html#722","title":"7.2.2  \u51fd\u6570\u4f9d\u8d56","text":"<p>\\(F^{+}\\)\u8868\u793a\u96c6\u5408F\u7684\u95ed\u5305\uff0c\u5373\u80fd\u4ece\u7ed9\u5b9a\u7684\u96c6\u5408F \u63a8\u5bfc\u51fa\u6240\u6709\u51fd\u6570\u4f9d\u8d56\u7684\u96c6\u5408\uff0c\\(F^{+}\\)\u200b\u5305\u542b\u6240\u6709\u7684\u51fd\u6570\u4f9d\u8d56</p> <p>\u5e73\u51e1trivial\u51fd\u6570\u4f9d\u8d56\uff1a\u51fd\u6570\u4f9d\u8d56\u88ab\u6240\u6709\u5173\u7cfb\u6ee1\u8db3\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u03b2 \u2286 \u03b1\uff0c\u5219\u5f62\u5982\u03b1 \u2192 \u03b2\u7684\u51fd\u6570\u4f9d\u8d56\u662f\u5e73\u51e1\u7684</p> <p></p>"},{"location":"Courses/DB.html#723","title":"7.2.3 \u65e0\u635f\u5206\u89e3","text":"<p>\u6709\u635f\u5206\u89e3\uff1a\u4e0d\u80fd\u7528\u5206\u89e3\u540e\u7684\u51e0\u4e2a\u5173\u7cfb\u91cd\u5efa\u539f\u672c\u7684\u5173\u7cfb</p> <p>\u65e0\u635f\u5206\u89e3\uff1aR\u5206\u89e3\u4e3a\uff08R1\uff0cR2\uff09\u5e76\u4e14R= R1\u222aR2</p> <p>\u65e0\u635f\u5206\u89e3\u5224\u5b9a\u65b9\u6cd5\uff1a</p> <ul> <li>\u5f53\u4e14\u4ec5\u5f53\\(R_1\u2229R_2\u2192R_1\\) or \\(R_1\u2229R_2\u2192R_2\\) \uff0c\u6216\u8005\u8bf4\\(R_1\u2229R_2\\)\u8981\u4e48\u6784\u6210R1\u7684\u8d85\u7801\u8981\u4e48\u6784\u6210R2\u7684\u8d85\u7801</li> </ul>"},{"location":"Courses/DB.html#example","title":"Example","text":"<p>For the relation schema R(A, B, C, D) with the functional dependencies set F={A\u2192B, B\u2192CD}. 1)List all candidate keys of the relation. 2)Decompose the relation into a collection of BCNF relations. The decomposition must be lossless-join.</p> <p>1) A\u662f\u5019\u9009\u7801</p> <p>2) R\u8fd8\u4e0d\u662fBCNF\uff0c\u56e0\u4e3a\u5b58\u5728\u4e00\u6761\u975e\u5e73\u51e1\u7684\u51fd\u6570\u4f9d\u8d56B\u2192CD\uff0c\u5b83\u7684\u5de6\u8fb9\u4e0d\u662fkey\u3002 3) R1={B, C, D}, R2={A, B}. F1={B-&gt;CD}, F2={A-&gt;B}\u3002 R1\u2229R2=(B), B\u662fR1\u7684\u5019\u9009\u7801\uff0c\u6240\u4ee5\u5206\u89e3\u662f\u65e0\u635f\u7684\u3002</p>"},{"location":"Courses/DB.html#73","title":"7.3 \u8303\u5f0f","text":""},{"location":"Courses/DB.html#731-bcnfboyce-codd-normal-form","title":"7.3.1 BCNF(Boyce-Codd Normal Form)","text":""},{"location":"Courses/DB.html#bcnf","title":"BCNF \u5b9a\u4e49","text":"<p>A relation schema R is in BCNF with respect to a set F of functional dependencies if, for all functional dependencies in \\(F^+\\) of the form \u03b1 \u2192 \u03b2, where \u03b1 \u2286 R and \u03b2 \u2286 R, at least one of the following holds \u95ed\u5305F^+^\u4e2d\u7684\u6240\u6709\u51fd\u6570\u4f9d\u8d56\u03b1 \u2192 \u03b2\u81f3\u5c11\u6ee1\u8db3\u4e0b\u9762\u4e00\u6761\uff1a</p> <ul> <li>\u03b1 \u2192 \u03b2 is a trivial functional dependency \u5e73\u51e1\u51fd\u6570\u4f9d\u8d56(\u5373 \u03b2 \u2286 \u03b1).</li> <li>\u03b1 is a superkey\u8d85\u7801 for schema \u5173\u7cfb\u6a21\u5f0fR\uff0c\u5373\u03b1 \u2192 R</li> </ul> <p>\u6ca1\u6709\u51fd\u6570\u4f9d\u8d56\u4e5f\u662fBC\u8303\u5f0f\uff08F\u662f\u7a7a\u7684\uff09</p> <p>\u7b97\u6cd5\uff1a\u5982\u679c\u5de6\u8fb9(\u03b1)\u548c\u53f3\u8fb9(\u03b2)\u6709\u516c\u5171\u5c5e\u6027\uff0c\u628a\u53f3\u8fb9\u7684\u516c\u5171\u5c5e\u6027\u53bb\u6389\uff1b</p> <p></p> <p>\u4f9d\u8d56\u4fdd\u6301dependency preserving\uff1a\u5982\u679c\u901a\u8fc7\u68c0\u9a8c\u5355\u4e00\u5173\u7cfb\u4e0a\u7684\u51fd\u6570\u4f9d\u8d56\uff0c\u5c31\u80fd\u786e\u4fdd\u6240\u6709\u7684\u51fd\u6570\u4f9d\u8d56\u6210\u7acb\uff0c\u90a3\u4e48\u8fd9\u6837\u7684\u5206\u89e3\u65f6\u4f9d\u8d56\u4fdd\u6301\u7684\uff1b\u6216\u8005\u539f\u6765\u5173\u7cfbR\u4e0a\u7684\u6bcf\u4e00\u4e2a\u51fd\u6570\u4f9d\u8d56\uff0c\u90fd\u53ef\u4ee5\u5728\u5206\u89e3\u540e\u7684\u5355\u4e00\u5173\u7cfb\u4e0a\u5f97\u5230\u68c0\u9a8c\u6216\u8005\u63a8\u5bfc\u5f97\u5230\u3002</p> <p></p> <p>\u4ee4\\(F_1\u222aF_2\u222a\u2026\u2026\u222aF_n=F'\\), \\(F'^+=F^+\\)\u7684\u5206\u89e3\u4e3a\u4fdd\u6301\u4f9d\u8d56\u7684\u5206\u89e3(dependency-preserving decomposition)</p> <p>BCNF\u548c\u51fd\u6570\u4f9d\u8d56\u53ef\u80fd\u4e0d\u80fd\u540c\u65f6\u6ee1\u8db3\uff0c\u6240\u4ee5\u51fa\u73b0\u4e86\u7b2c\u4e09\u8303\u5f0f\u2014\u2014\u653e\u677e\u4e86\u5bf9\u975e\u5e73\u51e1\u51fd\u6570\u4f9d\u8d56\u5de6\u8fb9\u5fc5\u987b\u662f\u8d85\u7801\u7684\u7ea6\u675f\u3002</p>"},{"location":"Courses/DB.html#bcnf_1","title":"BCNF\u68c0\u6d4b","text":"<ol> <li> <p>\u68c0\u67e5\u4e00\u4e2a\u975e\u5e73\u51e1\u7684\u51fd\u6570\u4f9d\u8d56<code>\u03b1 \u2192 \u03b2</code>\u662f\u5426\u8fdd\u53cdBCNF\uff1a\u8ba1\u7b97\\(\\alpha^+\\)\uff08\u03b1\u7684\u5c5e\u6027\u95ed\u5305\uff09\u68c0\u67e5\u5b83\u662f\u5426\u5305\u542bR\u4e2d\u7684\u6240\u6709\u5c5e\u6027\uff08\u662f\u5426\u662fR\u7684\u4e00\u4e2a\u8d85\u7801\uff09\uff1b\u5982\u679c\u662f\uff0c\u5219\u6ee1\u8db3BCNF</p> </li> <li> <p>\u68c0\u67e5\u4e00\u4e2a\u5173\u7cfb\u6a21\u5f0fR\u77e5\u5426\u5c5e\u4e8eBCNF\uff1a\u68c0\u67e5\u7ed9\u5b9a\u96c6\u5408F\u4e2d\u7684\u4f9d\u8d56\u662f\u5426\u8fdd\u53cd</p> </li> <li> <p>\u68c0\u67e5R\u4e0a\u7684\u4e00\u4e2a\u5206\u89e3\u6a21\u5f0f\\(R_i\\)\u662f\u5426\u8fdd\u53cdBCNF\uff1a    - \u68c0\u67e5\u7ed9\u5b9a\u96c6\u5408\u4e2d\\(F^+\\)\u4e2d\u7684\u4f9d\u8d56\u662f\u5426\u8fdd\u53cd    - \u5bf9\u4e8e\\(R_i\\)\u4e2d\u5c5e\u6027\u7684\u6bcf\u4e2a\u5b50\u96c6\\(\\alpha\\)\uff0c\u68c0\u67e5\\(\\alpha^+\\)\uff0c\u8981\u4e48\u4e0d\u5305\u542b\\(R_i-\\alpha\\)\u7684\u4efb\u4f55\u5c5e\u6027\uff0c\u8981\u4e48\u5305\u542b\\(R_i\\)\u7684\u6240\u6709\u5c5e\u6027\uff1b\u5982\u679c\\(R_i\\)\u4e2d\u67d0\u4e2a\u5c5e\u6027\u96c6\\(\\alpha\\)\u8fdd\u53cd\u4e86\u8be5\u6761\u4ef6\uff0c\u5219\\(\\alpha \u2192 (\\alpha^+-\\alpha)\u2229R_i\\)\u8fd9\u4e2a\u51fd\u6570\u4f9d\u8d56\u8bf4\u660e\\(R_i\\)\u8fdd\u53cd\u4e86BCNF</p> </li> </ol> <ul> <li>\u5982\u679cF\u4e2d\u6ca1\u6709\u4f9d\u8d56\u8fdd\u6cd5BCNF\uff0c\u5219\u5728\\(F^+\\)\u200b\u4e2d\u4e5f\u4e0d\u4f1a\u6709\u4f9d\u8d56\u8fdd\u53cdBCNF</li> </ul>"},{"location":"Courses/DB.html#example1","title":"Example1","text":"<p>R=(A,B,C), F={A-&gt;B, B-&gt;C}, KEY={A}</p> <p>R\u4e0d\u662fBCNF\uff0c\u56e0\u4e3aB\u4e0d\u662fkey\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u5206\u89e3R\u4f7f\u4e4b\u6ee1\u8db3BCNF</p>"},{"location":"Courses/DB.html#example2","title":"Example2","text":"<p>Decomposition R1=(A, B), R2 =(A, C)</p> <ol> <li>F1=(A\u2192B}\uff0cF2={A\u2192C)</li> <li>R1 and R2 in BCNF</li> <li>Lossless-join decomposition</li> <li>Not dependency preserving, since \\((F1 \u222aF2)^+&lt;&gt; F^+\\)\u200b </li> </ol>"},{"location":"Courses/DB.html#example3","title":"Example3","text":"<p>R=(A,B,C), F={A-&gt;B,B-&gt;C) \u65e0\u635f\u5206\u89e3</p> <p></p>"},{"location":"Courses/DB.html#732-3nf","title":"7.3.2 \u7b2c\u4e09\u8303\u5f0f 3NF","text":"<p>\u5b9a\u4e49\uff1a\u5bf9\\(F^+\\) \u4e2d\u5f62\u5982 \u03b1 \u2192 \u03b2\u7684\u51fd\u6570\u4f9d\u8d56, where \u03b1 \u2286 R and \u03b2 \u2286 R, at least one of the following holds:</p> <ul> <li>\u03b1 \u2192 \u03b2 is a trivial functional dependency \u5e73\u51e1\u51fd\u6570\u4f9d\u8d56(\u5373 \u03b2 \u2286 \u03b1).</li> <li>\u03b1 is a superkey\u8d85\u7801 for schema R</li> <li>\u03b2-\u03b1\u4e2d\u7684\u6bcf\u4e2a\u5c5e\u6027A\u90fd\u88ab\u5305\u542b\u5728R\u7684\u4e00\u4e2a\u5019\u9009\u7801\u4e2d\uff08\u4e0d\u662f\u5355\u4e2a\u5019\u9009\u7801\u5fc5\u987b\u5305\u542b\u03b2-\u03b1\u7684\u6240\u6709\u5c5e\u6027\uff0c\u5c5e\u6027\u53ef\u4ee5\u88ab\u5305\u542b\u5728\u4e0d\u540c\u5019\u9009\u7801\u4e2d\uff09</li> </ul> <p>BCNF\u4e00\u5b9a\u662f3NF\uff0c\u5b9e\u9645\u4e0a3NF\u662f\u4e3a\u4e86\u4fdd\u8bc1\u72ec\u7acb\u6027\u4fdd\u62a4\u7684BCNF</p> <p>3NF\u6709\u5197\u4f59\uff0c\u67d0\u4e9b\u60c5\u51b5\u9700\u8981\u8bbe\u7f6e\u4e00\u4e9b\u7a7a\u503c</p> <p>3NF\u8981\u6c42\u6d88\u9664\u975e\u4e3b\u5c5e\u6027\u5bf9\u4e3b\u952e\u7684\u4f20\u9012\u4f9d\u8d56</p>"},{"location":"Courses/DB.html#3nf","title":"3NF\u5224\u5b9a","text":"<p>\u4e0d\u9700\u8981\u5224\u65ad\u95ed\u5305\u4e2d\u7684\u6240\u6709\u51fd\u6570\u4f9d\u8d56,\u53ea\u9700\u8981\u5bf9\u5df2\u6709\u7684F\u4e2d\u7684\u6240\u6709\u51fd\u6570\u4f9d\u8d56\u8fdb\u884c\u5224\u65ad</p> <p>\u7528\u95ed\u5305\u53ef\u4ee5\u68c0\u67e5\u03b1\u2192\u03b2\u4e2d\u7684a\u662f\u4e0d\u662f\u8d85\u952e\uff1b\u5982\u679c\u4e0d\u662f\uff0c\u5c31\u9700\u8981\u68c0\u67e5\u03b2\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5c5e\u6027\u5305\u542b\u5728R\u7684\u5019\u9009\u952e\u4e2d</p>"},{"location":"Courses/DB.html#74","title":"7.4 \u51fd\u6570\u4f9d\u8d56\u7406\u8bba","text":""},{"location":"Courses/DB.html#741","title":"7.4.1 \u51fd\u6570\u4f9d\u8d56\u7684\u95ed\u5305","text":"\\[\\alpha\\beta=\\alpha\u222a\\beta\\] <p>\u963f\u59c6\u65af\u7279\u6717\u516c\u7406 Armstrong's axiom\uff1a\u7528\u6765\u5bfb\u627e\u88ab\u903b\u8f91\u8574\u542b\u7684\u51fd\u6570\u4f9d\u8d56</p> <p></p>"},{"location":"Courses/DB.html#742","title":"7.4.2 \u5c5e\u6027\u96c6\u7684\u95ed\u5305","text":"<p>\u4ee4\\(\\alpha\\)\u4e3a\u4e00\u4e2a\u5c5e\u6027\u96c6\uff0c\u5982\u679c\\(\\alpha\\)\u7684\u95ed\u5305\\(\\alpha^+\\)\u91cc\u5305\u542bR\u4e2d\u6240\u6709\u5c5e\u6027\uff0c\u5219\\(\\alpha\\)\u200b\u4e3a\u8d85\u7801\uff08\u753b\u6709\u5411\u56fe\uff09</p>"},{"location":"Courses/DB.html#_7","title":"\u7528\u9014\uff08\u4e3a\u4ec0\u4e48\u8ba1\u7b97\u5c5e\u6027\u95ed\u5305\uff1f\uff09","text":"<ol> <li>\u5224\u65ad\\(\\alpha\\)\u662f\u4e0d\u662f\u8d85\u7801\uff08\u4e3b\u952e\uff09\uff1a\u8ba1\u7b97\\(\\alpha^+\\)\uff0c\u68c0\u67e5\u5176\u662f\u5426\u5305\u542bR\u4e2d\u7684\u6240\u6709\u5c5e\u6027\uff1b\u5982\u679ca\u7684\u95ed\u5305\u5305\u542b\u4e86\u6240\u6709\u5c5e\u6027\uff0c\u5219a\u662f\u4e3b\u952e</li> <li>\u68c0\u67e5\u51fd\u6570\u4f9d\u8d56\u03b1 \u2192 \u03b2\u662f\u5426\u6210\u7acb\uff08\u5c5e\u4e8e\\(F^+\\)\uff09\uff1a\u8ba1\u7b97\\(\\alpha^+\\)\uff0c\u68c0\u67e5\u5b83\u662f\u5426\u5305\u542b\\(\\beta\\)</li> <li>\u8ba1\u7b97\u51fd\u6570\u4f9d\u8d56\u95ed\u5305F+\uff0c\u4ee5\u5f97\u5230\u6574\u4e2a\u5173\u7cfb\u6a21\u5f0f\u7684\u95ed\u5305</li> </ol>"},{"location":"Courses/DB.html#743-canonical-cover","title":"7.4.3 \u6b63\u5219\u8986\u76d6 Canonical cover","text":"<p>\u6b63\u5219\u8986\u76d6\u662f\u51fd\u6570\u4f9d\u8d56\u5173\u7cfb\u7684\u6700\u5c0f\u96c6\u5408\uff0c\u975e\u6b63\u5219\u8986\u76d6\u7684\u7684\u4ea7\u751f\u4e3b\u8981\u662f\u56e0\u4e3a\u6709\u4e86\u65e0\u5173\u5c5e\u6027</p> <p>\u65e0\u5173\u5c5e\u6027 extraneous\uff1a\u53bb\u9664\u4e5f\u4e0d\u6539\u53d8\u8be5\u51fd\u6570\u4f9d\u8d56\u96c6\u7684\u95ed\u5305</p> <p></p> <p>\u4ece\u53f3\u4fa7\u79fb\u9664\u4e00\u4e2a\u5c5e\u6027\u53ef\u4ee5\u4f7f\u4e4b\u53d8\u6210\u66f4\u5f3a\u7684\u7ea6\u675f\uff1aIf A \u2208 \u03b2, to check if A is extraneous, consider the set <code>F\u2032 = (F\u2212{\u03b1\u2192\u03b2}) \u222a {\u03b1\u2192(\u03b2\u2212A)}</code>and check if \u03b1 \u2192 A can be inferred from F \u2032. To do so, compute \u03b1+ (the closure of \u03b1) under F \u2032; if \u03b1+ includes A, then A is extraneous in \u03b2.</p> <p>\u4ece\u5de6\u4fa7\u79fb\u9664\u4e00\u4e2a\u5c5e\u6027\u53ef\u4ee5\u4f7f\u4e4b\u53d8\u6210\u66f4\u5f31\u7684\u7ea6\u675f\uff1aTo test if attribute A\u2208a is extraneous in a. Let <code>y=a-{A}</code>. Check if y\u2192\u03b2 can be inferred from F. Compute y using the dependencies in F. If y includes all attributes in \u03b2 then, A is extraneous in a.</p> <p></p>"},{"location":"Courses/DB.html#f_c","title":"\u6b63\u5219\u8986\u76d6\\(F_c\\)\u200b\u200b\u7684\u6027\u8d28","text":"<ul> <li>\\(F\\)\u548c\\(F_c\\)\u4e92\u76f8\u903b\u8f91\u8574\u542b\u5bf9\u9762</li> <li>\\(F_c\\)\u4e2d\u7684\u4efb\u4f55\u51fd\u6570\u4f9d\u8d56\u90fd\u4e0d\u5305\u542b\u65e0\u5173\u5c5e\u6027</li> <li>\\(F_c\\)\u4e2d\u6bcf\u4e2a\u51fd\u6570\u4f9d\u8d56\u7684\u5de6\u4fa7\u90fd\u662f\u552f\u4e00\u7684\uff0ceg \u4e0d\u5b58\u5728\u4e24\u4e2a\u4f9d\u8d56\u5173\u7cfb\\(\\alpha_1\u2192\\beta_1\\)\u548c\\(\\alpha_2\u2192\\beta_2\\)\uff0c\u6ee1\u8db3\\(\\alpha_1=\\alpha_2\\)\u200b</li> </ul> <p>\u6b63\u5219\u8986\u76d6\u4e0d\u4e00\u5b9a\u552f\u4e00</p>"},{"location":"Courses/DB.html#example_1","title":"Example","text":"<ol> <li> <p>\u5047\u5b9aF\u5305\u542b AB \u2192 CD, A \u2192 E, E \u2192 C\u3002\u4e3a\u4e86\u68c0\u9a8c C \u5728 AB \u2192 CD\u4e2d\u662f\u5426\u662f\u65e0\u5173\u7684\uff0c\u8ba1\u7b97F \u2032 = {AB \u2192 D, A \u2192 E, E \u2192 C}\u4e0bAB \u7684\u5c5e\u6027\u95ed\u5305 \u3002\u8be5\u95ed\u5305\u4e3aABCDE\uff0c\u5305\u542bCD\uff0c\u6240\u4ee5C\u662f\u65e0\u5173\u7684\u3002</p> </li> <li> <p>\u5173\u7cfbR(A, B, C, D, E), F={B \u2192 A, A \u2192 B, AB \u2192 C, B\u2192C, CD\u2192E}\u3002</p> </li> </ol> <p>\u5219\u6b63\u5219\u8986\u76d6\u4e3a\uff1a{ A \u2192 B, B \u2192 AC, B\u2192C, CD\u2192E}\uff1b\u5019\u9009\u7801\u4e3aAD\u3001BD\uff1bR\u4e0d\u662fBCNF\uff0c A \u2192 B, A\u4e0d\u662fkey</p> <p>\u53efBCNF\u65e0\u635f\u5206\u89e3\u4e3a\uff1aR1(C, D, E), F1={CD\u2192E}\uff0cR2(B, C), F2={B\u2192C}\uff0cR3(A, B), F3={A\u2192B, B\u2192A}\uff0cR4(A,D), F4={A\u2192D}\uff0c\u4e5f\u662f\u4f9d\u8d56\u4fdd\u6301\u7684\uff1b</p> <p>\u6216\u8005\u5206\u89e3\u4e3a\uff1aR1(B, C), F1={B\u2192C}\uff0cR2(A, B), F2={A\u2192B, B\u2192A}\uff0cR3(A,D,E), F3={AD\u2192E}\uff0c\u4e0d\u662f\u4f9d\u8d56\u4fdd\u6301\u7684\u65e0\u6cd5\u68c0\u9a8cCD\u2192E\uff1b</p> <p>\u6216\u8005\u5206\u89e3\u4e3a\uff1aR1(A B), F1={A\u2192B, B\u2192A}\uff0cR2(C, D, E), F2={CD\u2192E}\uff0cR3(A,C,D), F3={AD\u2192C}\uff0c\u4e0d\u662f\u4f9d\u8d56\u4fdd\u6301\u7684\uff0c\u95ed\u5305\u2260\u539f\u6765\u7684\uff0c\u628aR3\u7ee7\u7eed\u5206\u89e3\u6210R3(A, C), F3={A\u2192C}\uff0cR4(A, D), F2={A\u2192D}\uff0c\u4f9d\u8d56\u4fdd\u6301\uff08\u4e0d\u80fd\u5355\u72ec\u68c0\u9a8c\u4f46F\u5e76\u8d77\u6765\u53ef\u4ee5\u68c0\u9a8c\uff09</p> <p>\u5206\u89e3\u4ece\u53f6\u5b50\uff08\u672b\u5c3e\uff09\u66f4\u53ef\u80fd\u4fdd\u6301\u4f9d\u8d56</p> <p></p>"},{"location":"Courses/DB.html#76","title":"7.6 \u4f7f\u7528\u591a\u503c\u4f9d\u8d56\u7684\u5206\u89e3","text":""},{"location":"Courses/DB.html#761","title":"7.6.1 \u591a\u503c\u4f9d\u8d56","text":"<p>\u591a\u503c\u4f9d\u8d56\u53c8\u79f0\u4e3a\u5143\u7ec4\u4ea7\u751f\u4f9d\u8d56</p> <p>\u591a\u503c\u4f9d\u8d56 \u03b1 \u2192\u2192 \u03b2\uff1a\u03b1\u548c\u03b2\u4e4b\u95f4\u7684\u8054\u7cfb\u72ec\u7acb\u4e8e \u03b1 \u548c R-\u03b2 \u4e4b\u95f4\u7684\u8054\u7cfb\u3002\u82e5\u6a21\u5f0fR\u4e0a\u6240\u6709\u5173\u7cfb\u90fd\u6ee1\u8db3\u591a\u503c\u4f9d\u8d56\u03b1 \u2192\u2192 \u03b2\uff0c\u5219\u03b1 \u2192\u2192 \u03b2\u5728\u6a21\u5f0fR\u4e0a\u662f\u5e73\u51e1\u7684\u591a\u503c\u4f9d\u8d56\uff0c\u5373  \u03b2 \u2286 \u03b1 \u6216 \u03b1\u2229\u03b2=R\uff0c\u5219 \u03b1 \u2192\u2192 \u03b2 \u662f\u5e73\u51e1\u7684</p> <p>eg\uff0c\u4e00\u4f4d\u6559\u5e08\u4e0e\u5176\u5730\u5740\u7684\u8054\u7cfb\u72ec\u7acb\u4e8e\u8be5\u6559\u5e08\u4e0e\u7cfb\u4e4b\u95f4\u7684\u8054\u7cfb</p> <ul> <li>\u82e5\u03b1 \u2192 \u03b2\uff0c\u5219 \u03b1 \u2192\u2192 \u03b2\uff0c\u5373\u6bcf\u4e00\u4e2a\u51fd\u6570\u4f9d\u8d56\u4e5f\u662f\u4e00\u4e2a\u591a\u503c\u4f9d\u8d56</li> <li>\u82e5\u03b1 \u2192\u2192 \u03b2\uff0c\u5219 \u03b1 \u2192\u2192 R- \u03b1 -\u03b2</li> </ul>"},{"location":"Courses/DB.html#762","title":"7.6.2 \u7b2c\u56db\u8303\u5f0f","text":"<p>\u5b9a\u4e49\uff1a\u5bf9\u4e8e \\(D^+\\) \u4e2d\u6240\u6709\u5f62\u5982 \u03b1 \u2192\u2192 \u03b2\u7684\u591a\u503c\u4f9d\u8d56\uff0c\u5176\u4e2d \u03b1 \u2286 R and \u03b2 \u2286 R\uff0c\u81f3\u5c11\u6709\u4e00\u4e0b\u4e4b\u4e00\u6210\u7acb\uff1a</p> <ul> <li>\u03b1 \u2192\u2192 \u03b2 \u662f\u4e00\u4e2a\u5e73\u51e1\u7684\u591a\u503c\u4f9d\u8d56</li> <li>\u03b1 \u662f R\u7684\u4e00\u4e2a\u8d85\u7801</li> </ul> <p>\u6bcf\u4e2a4NF\u90fd\u5c5e\u4e8eBCNF</p>"},{"location":"Courses/DB.html#763-4nf","title":"7.6.3 4NF\u5206\u89e3","text":"<p>\u4ee4r(R)\u662f\u4e00\u4e2a\u5173\u7cfb\u6a21\u5f0f\uff0cD\u4e3aR\u4e0a\u7684\u51fd\u6570\u4f9d\u8d56\u548c\u591a\u503c\u4f9d\u8d56\u7684\u96c6\u5408\u3002\u4ee4r1(R1)\u3001r2(R2)\u4e3a\u4e00\u4e2a\u5206\u89e3\uff0c\u5f53\u4e14\u4ec5\u5f53\u4ee5\u4e0b\u7684\u591a\u503c\u4f9d\u8d56\u81f3\u5c11\u6709\u4e00\u4e2a\u5c5e\u4e8e\\(D^+\\)\uff0c\u8fd9\u4e2a\u5206\u89e3\u662fR\u7684\u65e0\u635f\u5206\u89e3\uff1a</p> <ul> <li>R1\u2229R2\u2192\u2192 R1</li> <li>R1\u2229R2\u2192\u2192 R2</li> </ul>"},{"location":"Courses/DB.html#example_2","title":"Example","text":""},{"location":"Courses/DB.html#77","title":"7.7 \u7b2c\u4e00\u8303\u5f0f","text":"<p>\u5982\u679c\u4e00\u4e2a\u57df\u7684\u5143\u7d20\u88ab\u8ba4\u4e3a\u662f\u4e0d\u53ef\u518d\u5206\u7684\u5355\u5143\uff0c\u5219\u79f0\u8fd9\u4e2a\u57df\u662f\u539f\u5b50\u7684\uff08atomic\uff09\u3002\u5982\u679c\u4e00\u4e2a\u5173\u7cfb\u6a21\u5f0fR\u7684\u6240\u6709\u5c5e\u6027\u7684\u57df\u90fd\u662f\u539f\u5b50\u7684\uff0c\u5219\u79f0R\u5c5e\u4e8e\u7b2c\u4e00\u8303\u5f0f\u3002</p> <p>eg\uff0c\u5982\u679c\u804c\u5458\u7684\u7f16\u53f7\u7ec4\u6210\u4e3a\u201c\u7cfb+\u53f7\u7801\u201d\uff08CS0010\uff09\uff0c\u5219\u8fd9\u4e2a\u5c5e\u6027\u4e0d\u662f\u539f\u5b50\u7684\uff0c\u5373\u8be5\u5173\u7cfb\u6a21\u5f0f\u975e\u7b2c\u4e00\u8303\u5f0f</p> <ul> <li>\u5728\u4efb\u4f55\u5173\u7cfb\u6570\u636e\u5e93\u4e2d\uff0c\u7b2c\u4e00\u8303\u5f0f\u90fd\u662f\u6700\u57fa\u672c\u7684\u8981\u6c42</li> <li>\u7b2c\u4e00\u8303\u5f0f\u4e0d\u8db3\uff1a\u6570\u636e\u5197\u4f59\u3001\u66f4\u65b0\u6570\u636e\u590d\u6742\u3001\u63d2\u5165\u548c\u5220\u9664\u6570\u636e\u5f02\u5e38</li> </ul>"},{"location":"Courses/DB.html#questions","title":"Questions","text":"<ol> <li>For a database table, which description is correct?  </li> </ol> <p>A. First Normal Form (lNF) requires that each column in the table has atomicity </p> <p>B. Second Normal Form (2NF) requires that each column in the table is not null </p> <p>C. Third Normal Form (3NF) requires that each column in the table has uniqueness. </p> <p>D. Bovce-Codd Normal Form (BCNF) requires that each column in the table is a primary key.</p> <ul> <li> <p>Third Normal Form (3NF): A table is in 3NF if it is in 2NF and all the columns are mutually independent except for the primary key dependencies. That means there should be no transitive dependency for non-prime attributes as part of another non-prime attribute.</p> </li> <li> <p>Boyce-Codd Normal Form (BCNF): A stronger version of the 3NF, BCNF is reached when, for every one of its dependencies, the left side is a super key, which is a key that uniquely identifies a row.</p> </li> </ul> <ol> <li>For relation schema R(A,B,C,D)with functional dependencies set F={A\u2192C, C\u2192A, AB\u2192CD, BC\u2192AD).     1) Find all candidate keys of R.     2) Is R in BCNF? Explain the reason.</li> </ol> <ol> <li>AB, BC</li> <li>Since there are dependencies (A\u2192C and C\u2192A) where the left-hand side is not a superkey, R is not in BCNF</li> </ol> <ol> <li></li> </ol> <p>a. Functional Dependencies:</p> <p>From the table structure and description, we can identify the following functional dependencies:</p> <ol> <li>branchID \u2192 addressInformation, mgrStaffID, name    - Since each branchID is unique and identifies a specific branch with its address and manager.</li> <li>mgrStaffID \u2192 name    - Each manager\u2019s ID identifies a unique manager, and therefore, a unique name.</li> </ol> <p>Why this table is not in 3NF:</p> <p>The table is not in Third Normal Form (3NF) because it violates the rule that every non-key attribute must depend only on the primary key. Here:</p> <ul> <li>The non-key attribute <code>name</code> depends on <code>mgrStaffID</code>, which is not part of the primary key (<code>branchID</code>). This dependency creates a transitive dependency (a 3NF violation) as <code>name</code> is dependent on <code>mgrStaffID</code> which in turn depends on <code>branchID</code>.</li> </ul> <p>b. Normalization to Third Normal Form (3NF):</p> <p>Decompose to remove transitive dependencies to make all attributes depend only on the primary key.</p> <ul> <li>Table 1 (BranchTable):</li> <li>branchID: Primary Key</li> <li>addressInformation</li> <li>mgrStaffID: Foreign Key referencing ManagerTable</li> <li>Table 2 (ManagerTable):</li> <li>mgrStaffID: Primary Key</li> <li>name</li> </ul> <p>c. Primary Key and Foreign Keys in the 3NF Relations:</p> <p>as b is showed abo</p>"},{"location":"Courses/DB.html#8","title":"8 \u5b58\u50a8\u7ba1\u7406","text":""},{"location":"Courses/DB.html#81","title":"8.1 \u7269\u7406\u5b58\u50a8\u6982\u8ff0","text":"<p>\u9ad8\u901f\u7f13\u5b58cache\uff1a\u6700\u5feb\u6700\u6602\u8d35 \u4e3b\u5b58 main memory \u95ea\u5b58 flash \u78c1\u76d8magnetic disk\uff1a\u78c1\u76d8\u8bfb\u5199\u6162\u662f\u56e0\u4e3a\u5b83\u662f\u673a\u68b0\u8fd0\u52a8\uff1b\u5199\u6bd4\u8bfb\u6162\uff0c\u56e0\u4e3a\u8981\u68c0\u67e5\u6821\u9a8c\u4f4d \u5149\u5b66\u5b58\u50a8\u5668 optical\uff1aDVD \u78c1\u5e26/\u78c1\u76d8\u5b58\u50a8\u5668 magnetic tapes</p> <p>\u78c1\u5e26\u50a8\u5b58\u5668\u88ab\u79f0\u4e3a\u987a\u5e8f\u8bbf\u95ee\uff1a</p> <ul> <li>\u987a\u5e8f\u8bbf\u95ee(sequantial access)\u6a21\u5f0f\uff1a\u8fde\u7eed\u7684\u8bf7\u6c42\u4f1a\u8bf7\u6c42\u5904\u4e8e\u76f8\u90bb\u7684\u78c1\u9053\u6216\u8005\u76f8\u90bb\u7684\u78c1\u9053\u4e0a\u8fde\u7eed\u7684\u5757\u3002\u987a\u5e8f\u8bbf\u95ee\u4e2d\u53ea\u6709\u8bfb\u53d6\u7b2c\u4e00\u4e2a\u5757\u65f6\u9700\u8981\u5bfb\u9053\uff0c\u540e\u7eed\u7684\u8bf7\u6c42\u4e0d\u9700\u8981\u5bfb\u9053\u3002</li> </ul> <p>\u78c1\u76d8\u548cSSD\u5b58\u50a8\u5668\u88ab\u79f0\u4e3a\u968f\u673a\u8bbf\u95ee\uff1a</p> <ul> <li>\u968f\u673a\u8bbf\u95ee\u6a21\u5f0f(random access)\u6a21\u5f0f\uff1a\u76f8\u7ee7\u7684\u8bf7\u6c42\u4f1a\u8bf7\u6c42\u90a3\u4e9b\u968f\u673a\u4f4d\u4e8e\u78c1\u76d8\u4e0a\u7684\u5757\uff0c\u6bcf\u4e00\u6b21\u8bf7\u6c42\u90fd\u9700\u8981\u4e00\u6b21\u78c1\u76d8\u5bfb\u9053\u3002\u4e00\u5f20\u78c1\u76d8\u5728\u6bcf\u79d2\u80fd\u591f\u6ee1\u8db3\u7684\u968f\u673a\u5757\u8bbf\u95ee\u7684\u6570\u91cf\u53d6\u51b3\u4e8e\u5bfb\u9053\u65f6\u95f4</li> </ul> <p>\u78c1\u76d8\u548c\u9ad8\u901f\u7f13\u5b58\u7684\u901f\u5ea6\u5dee\u5927\u7ea67\u4e2a\u6570\u91cf\u7ea7</p> <p></p>"},{"location":"Courses/DB.html#82","title":"8.2 \u78c1\u76d8","text":"<p>\u78c1\u76d8\u8868\u9762\u88ab\u903b\u8f91\u5730\u5212\u5206\u4e3a\u78c1\u9053\uff08track\uff09\uff0c\u78c1\u9053\u53c8\u88ab\u5212\u5206\u4e3a\u6247\u533a\uff08sector\uff09\u3002\u6247\u533a\u662f\u78c1\u76d8\u8bfb\u5199\u4fe1\u606f\u7684\u6700\u5c0f\u5355\u4f4d\uff08\u4e00\u822c512bytes\uff09\u3002 \u6570\u636e\u4ee5\u5757\u4e3a\u5355\u4f4d\u5728\u78c1\u76d8\u548c\u4e3b\u5b58\u95f4\u4f20\u8f93\u3002\u5757\u662f\u4e00\u4e2a\u903b\u8f91\u5355\u5143\uff0c\u5305\u542b\u56fa\u5b9a\u6570\u76ee\u7684\u6247\u533a</p> <p>\u78c1\u76d8\u8d28\u91cf\u7684\u4e3b\u8981\u5ea6\u91cf\u6307\u6807\uff1a\u5bb9\u91cfcapacity\u3001\u8bbf\u95ee\u65f6\u95f4access time\u3001\u6570\u636e\u4f20\u8f93\u7387data-transfer rate\u3001\u53ef\u9760\u6027\uff08\u5e73\u5747\u6545\u969c\u65f6\u95f4Mean time to failure\uff09</p> <p>\u8bbf\u95ee\u65f6\u95f4 = \u5bfb\u9053\u65f6\u95f4seek time + \u65cb\u8f6c\u5ef6\u8fdf\u65f6\u95f4rotatinal lantency time</p> <p>\u5e73\u5747\u6545\u969c\u65f6\u95f4\uff08MTTF\uff09\u8d8a\u957f\u8d8a\u597d\uff08\u6211\u4eec\u5e0c\u671b\u8bbe\u5907\u65e0\u6545\u969c\u8fd0\u884c\u7684\u65f6\u95f4\uff09</p> <p>\u6bcf\u79d2I/O\u64cd\u4f5c\u6570\uff08IOPS\uff09</p> <p>RAID\uff08Redundant Array of Independent Disk\uff09\u72ec\u7acb\u78c1\u76d8\u5197\u4f59\u9635\u5217\u3002</p> <ul> <li>\u901a\u8fc7\u5197\u4f59\u63d0\u9ad8\u53ef\u9760\u6027</li> <li>\u901a\u8fc7\u5e76\u884c\u63d0\u9ad8\u6027\u80fd</li> </ul> <p>\u4f18\u5316\u65b9\u6cd5\uff1abuffering, read-ahead, disk-arm-scheduling, file organization</p>"},{"location":"Courses/DB.html#83","title":"8.3 \u95ea\u5b58","text":"<p>NAND</p> <p>SSD\u56fa\u6001\u786c\u76d8\uff0c\u548c\u78c1\u76d8\u76f8\u6bd4\u5177\u6709\u66f4\u4f4e\u7684\u6570\u636e\u8bbf\u95ee\u5ef6\u8fdf\u548c\u66f4\u9ad8\u7684\u6570\u636e\u4f20\u8f93\u5e26\u5bbd</p> <p>\u95ea\u5b58\u5fc5\u987b\u5148\u64e6\u9664\u540e\u518d\u5199\uff1b\u4e3a\u4e86\u5feb\u901f\u8bbf\u95ee\uff0c\u903b\u8f91\u5230\u7269\u7406\u7684\u9875\u9762\u6620\u5c04\u88ab\u590d\u5236\u5230\u5185\u5b58\u4e2d\u7684\u8f6c\u6362\u8868\u4e2d</p>"},{"location":"Courses/DB.html#84","title":"8.4 \u6587\u4ef6\u7ec4\u7ec7","text":"<p>\u5757\u662f\u50a8\u5b58\u5206\u914d\u548c\u6570\u636e\u4f20\u8f93\u7684\uff08\u6700\u5c0f\uff09\u5355\u4f4d</p> <p>\u6bcf\u6761\u8bb0\u5f55\u88ab\u5b8c\u5168\u5305\u542b\u5728\u5757\u5185\uff08\u4e0d\u5141\u8bb8\u8de8\u5757\u5b58\u50a8</p>"},{"location":"Courses/DB.html#841","title":"8.4.1 \u5b9a\u957f\u8bb0\u5f55","text":"<p>\u6587\u4ef6\u7684\u5f00\u5934\u5206\u914d\u4e86\u7279\u5b9a\u6570\u91cf\u7684\u5b57\u8282\u4f5c\u4e3a\u6587\u4ef6\u5934\uff1b\u88ab\u5220\u9664\u7684\u8bb0\u5f55\u5f62\u6210\u4e86\u4e00\u6761\u81ea\u7531\u94fe\u8868</p> <p>\u6bcf\u4e2a\u6587\u4ef6\u88ab\u5212\u5206\u4e3a\u56fa\u5b9a\u957f\u5ea6\u7684block\uff0cblock\u662f\u6570\u636e\u5b58\u53d6/\u5b58\u50a8\u7a7a\u95f4\u5206\u914d\u7684\u57fa\u672c\u5355\u4f4d</p> <ul> <li>\u8bb0\u5f55\u7684\u957f\u5ea6\u4e0d\u80fd\u8d85\u8fc7block</li> <li>\u6bcf\u6761\u8bb0\u5f55\u4e00\u5b9a\u90fd\u662f\u5b8c\u6574\u7684</li> <li>\u53c2\u8003\u5b9e\u73b0\uff1aFree List \u7528\u94fe\u8868\u7684\u5f62\u5f0f\u6765\u5b58\u50a8records</li> <li>\u4f18\u52bf\uff1a\u5b58\u50a8\u548c\u8bfb\u53d6\u8bbf\u95ee\u5bfb\u5740\u7b80\u5355</li> <li>\u7f3a\u70b9\uff1a\u53ef\u80fd\u6d6a\u8d39\u5b58\u50a8\u7a7a\u95f4</li> </ul>"},{"location":"Courses/DB.html#842","title":"8.4.2 \u53d8\u957f\u8bb0\u5f55","text":"<p>\u5728\u8bb0\u5f55\u7684\u521d\u59cb\u90e8\u5206\u88ab\u8868\u793a\u4e3a\uff08\u504f\u79fb\u91cf\uff0c\u957f\u5ea6\uff09\u5bf9\uff0c\u5373\uff08\u6570\u636e\u5f00\u59cb\u4f4d\u7f6e\uff0c\u53d8\u957f\u5c5e\u6027\u7684\u5b57\u8282\u957f\u5ea6\uff09</p> <ul> <li>\u5c5e\u6027\u6309\u7167\u987a\u5e8f\u8fde\u7eed\u5b58\u50a8</li> <li>\u53d8\u957f\u7684\u53d8\u91cf\u7528offset+data\u7684\u5f62\u5f0f\u5b58\u50a8\uff0c\u7a7a\u503c\u7528null-value bitmap\u5b58\u50a8</li> </ul> <p>\u7a7a\u4f4d\u56fe(null bitmap)</p> <p></p> <p>\u5206\u69fd\u7684\u9875slotted page\u7ed3\u6784\uff0c\u8bb0\u5f55\u4ece\u672b\u5c3e\u5904\u5f00\u59cb\u8fde\u7eed\u5206\u914d\u7a7a\u95f4</p> <p></p> <p>Block Header\u5185\u5bb9</p> <ul> <li>\u8bb0\u5f55\u7684\u603b\u6570</li> <li>lock\u4e2d\u7684\u7a7a\u95f2\u533a\u57df\u7684end</li> <li>\u6bcf\u6761\u8bb0\u5f55\u6240\u5728\u7684\u4f4d\u7f6e\u548c\u5927\u5c0f</li> </ul> <p>\u6307\u9488\u6307\u5411\u5934\u4e2d\u8bb0\u5f55\u7684\u6761\u76ee</p>"},{"location":"Courses/DB.html#843","title":"8.4.3 \u5217\u5f0f\u5b58\u50a8","text":"<p>\u4f18\u70b9\uff1a</p> <ul> <li>\u5f53\u53ea\u8bbf\u95ee\u90e8\u5206\u5c5e\u6027\u65f6\uff0c\u51cf\u5c11IO\u5f00\u9500</li> <li>\u63d0\u9ad8CPU\u7f13\u5b58\u6027\u80fd</li> <li>\u63d0\u9ad8\u538b\u7f29\u7387</li> <li>\u53ef\u4ee5\u5728\u73b0\u4ee3CPU\u67b6\u6784\u4e2d\u5b9e\u73b0Vector Processing</li> </ul> <p>\u7f3a\u70b9\uff1a</p> <ul> <li>\u884c\u91cd\u6784\u5f00\u9500\u66f4\u5927</li> <li>\u5220\u9664\u548c\u66f4\u65b0\u7684\u5f00\u9500\u66f4\u5927</li> <li>\u89e3\u538b\u6240\u9700\u65f6\u95f4\u66f4\u957f</li> </ul> <p>\u5217\u5f0f\u5b58\u50a8column\u5728\u6570\u636e\u67e5\u8be2\u65b9\u9762\u8868\u73b0\u66f4\u597d\uff0c\u4f46\u662f\u5728\u4e8b\u52a1\u5904\u7406\u65b9\u9762\u8868\u73b0\u8f83\u5dee</p>"},{"location":"Courses/DB.html#85","title":"8.5 \u6587\u4ef6\u4e2d\u8bb0\u5f55\u7684\u7ec4\u7ec7","text":""},{"location":"Courses/DB.html#851","title":"8.5.1 \u5806\u6587\u4ef6\u7ec4\u7ec7","text":"<p>\u81ea\u7531\u7a7a\u95f4\u56fe\uff08free-space map\uff09</p> <p>\u6bcf\u4e2a\u9879\u8868\u793a\u4e00\u4e2a\u6bd4\u4f8bf\uff0c\u5373\u5757\u4e2d\u6709\u81f3\u5c11\u6bd4\u4f8b\u4e3af\u7684\u7a7a\u95f4\u662f\u81ea\u7531\u7684</p> <p>\u5757i\u7684\u81ea\u7531\u7a7a\u95f4\u6bd4\u4f8b=\u503c/2^n(bits)^</p> <p>\u4e8c\u7ea7\u81ea\u7531\u7a7a\u95f4\u56fe\uff1a\u6bcf\u4e2a\u9879\u8868\u793a\u81ea\u7531\u7a7a\u95f4\u56fe100\u4e2a\u9879\uff0c\u5b58\u50a8\u503c\u4e3a100\u4e2a\u9879\u4e2d\u7684\u6700\u5927\u503c</p>"},{"location":"Courses/DB.html#852","title":"8.5.2 \u987a\u5e8f\u6587\u4ef6\u7ec4\u7ec7","text":"<p>\u6309\u67d0\u4e2a\u641c\u7d22\u7801\u6392\u5e8f</p> <p>\u641c\u7d22\u7801\u662f\u4efb\u610f\u5c5e\u6027\u6216\u8005\u5c5e\u6027\u7684\u96c6\u5408</p> <p>\u6bcf\u6761\u8bb0\u5f55\u6307\u5411\u6309\u641c\u7d22\u7801\u987a\u5e8f\u6392\u5e8f\u7684\u4e0b\u4e00\u6761\u8bb0\u5f55\uff0c\u5904\u7406\u65f6\u987a\u5e8f\u548c\u7269\u7406\u987a\u5e8f\u4e0d\u540c</p>"},{"location":"Courses/DB.html#853","title":"8.5.3 \u591a\u8868\u805a\u7c07\u6587\u4ef6\u7ec4\u7ec7","text":"<p>\u805a\u7c07\u7801\uff08cluster key\uff09\u5b9a\u4e49\u4e86\u54ea\u4e9b\u8bb0\u5f55\u88ab\u5b58\u50a8\u5728\u4e00\u8d77</p>"},{"location":"Courses/DB.html#854","title":"8.5.4 \u5212\u5206","text":"<p>\u8868\u5212\u5206\uff08table partitioning\uff09\u901a\u5e38\u57fa\u4e8e\u4e00\u4e2a\u5c5e\u6027\u503c\u5b8c\u6210\uff0c\u5c06\u5173\u7cfb\u5212\u5206\u6210\u66f4\u5c0f\u7684\u5173\u7cfb\u6765\u5b58\u50a8</p>"},{"location":"Courses/DB.html#86","title":"8.6 \u6570\u636e\u5b57\u5178\u5b58\u50a8","text":"<p>\u6570\u636e\u5b57\u5178\u5b58\u50a8\u5143\u6570\u636e</p> <p>\u5143\u6570\u636e\uff08metadata\uff09\uff1a\u5173\u4e8e\u6570\u636e\u7684\u6570\u636e\uff0c\u4f8b\u5982\u7ef4\u62a4\u5173\u4e8e\u5173\u7cfb\u7684\u6570\u636e</p>"},{"location":"Courses/DB.html#87","title":"8.7 \u6570\u636e\u5e93\u7f13\u51b2\u533a","text":""},{"location":"Courses/DB.html#871","title":"8.7.1 \u7f13\u51b2\u533a\u7ba1\u7406\u5668","text":"<p>\u5728\u4e00\u4e2a\u8fdb\u7a0b\u4ece\u7f13\u51b2\u5757\u4e2d\u8bfb\u53d6\u6570\u636e\u4e4b\u524d\uff0c\u5148\u6267\u884cpin\uff08\u9489\u4f4f\uff09\u8fd9\u4e2a\u5757\uff1b\u8fdb\u7a0b\u5b8c\u6210\u6570\u636e\u8bfb\u53d6\u540e\uff0c\u518d\u6267\u884c\u89e3\u9664\u9489\u4f4f\u64cd\u4f5c</p> <p>\u5bf9\u591a\u8fdb\u7a0b\uff0c\u6bcf\u4e2a\u7f13\u51b2\u5757\u7ef4\u62a4\u9489\u4f4f\u8ba1\u6570\uff0c\u53ea\u6709\u4e00\u4e2a\u9875\u9762\u7684\u9489\u4f4f\u8ba1\u6570\u4e3a0\u65f6\uff0c\u5757\u624d\u80fd\u88ab\u79fb\u9664</p> <p>\u5171\u4eab/\u6392\u4ed6\u9501\uff1a\uff1f</p>"},{"location":"Courses/DB.html#872-buffer-replacement-policy","title":"8.7.2 \u66ff\u6362\u7b56\u7565 Buffer-Replacement Policy","text":"<p>\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\uff08LRU\uff09\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u65f6\u53ef\u4ee5\u63a5\u53d7\u7684\uff0c\u4f46\u5728\u6570\u636e\u5e93\u4e2d\u66ff\u6362\u5757\u7684\u6700\u4f18\u7b56\u7565\u662f\u6700\u8fd1\u6700\u5e38\u4f7f\u7528\uff08MRU\uff09</p> <p>\u65e5\u5fd7\u78c1\u76d8\uff08log disk\uff09\uff1a\u5199\u64cd\u4f5c\uff0c\u5148\u5199\u65e5\u5fd7\uff08buffer\u4e2d\uff0c\u518d\u4fee\u6539\u6570\u636e</p> <p>https://chatgpt.com/share/29bc8b7e-8a42-44d6-a99b-45d5d77d95cb</p>"},{"location":"Courses/DB.html#questions_1","title":"Questions","text":"<p>\u54c8\u5e0c\u67e5\u8be2\u9002\u5408\u5355\u70b9\u67e5\u8be2\uff0c\u8303\u56f4\u67e5\u8be2\u7684\u8bdd\u987a\u5e8f\u67e5\u8be2\u66f4\u597d</p>"},{"location":"Courses/DB.html#9","title":"9 \u7d22\u5f15","text":""},{"location":"Courses/DB.html#91","title":"9.1 \u57fa\u7840","text":"<p>\u5982\u679c\u4e00\u4e2a\u6587\u4ef6\u4e0a\u6709\u591a\u4e2a\u7d22\u5f15\uff0c\u90a3\u5b83\u5c31\u6709\u591a\u4e2a\u641c\u7d22\u7801</p> <p>\u4e24\u79cd\u57fa\u672c\u7d22\u5f15\u7c7b\u578b\uff1a\u987a\u5e8f\u3001\u6563\u5217</p> <p>\u8bc4\u4ef7\u56e0\u7d20\uff1a\u8bbf\u95ee\u7c7b\u578b\u3001\u8bbf\u95ee\u65f6\u95f4\u3001\u63d2\u5165\u65f6\u95f4\u3001\u5220\u9664\u65f6\u95f4\u3001\u7a7a\u95f4\u5f00\u9500</p> <p>\u7d22\u5f15\u9879\uff08index entry\uff09\u7531\u4e00\u4e2a\u641c\u7d22\u7801\u503c\u548c\u6307\u9488\u6784\u6210</p> <p>\u4e3b\u7d22\u5f15\uff08primary index\uff09\u6bd4secondary index \u9ad8\u6548</p>"},{"location":"Courses/DB.html#92","title":"9.2 \u987a\u5e8f\u7d22\u5f15","text":"<p>\u805a\u96c6\uff08\u4e3b\uff09\u7d22\u5f15\uff1a\u641c\u7d22\u7801\u5b9a\u4e49\u4e86\u6587\u4ef6\u7684\u6b21\u5e8f\uff0c\u5373\u5141\u8bb8\u6309\u7167\u4e0e\u4e00\u4e2a\u6587\u4ef6\u4e2d\u7684\u7269\u7406\u987a\u5e8f\u76f8\u5bf9\u5e94\u7684\u987a\u5e8f\u53bb\u8bfb\u53d6\u8be5\u6587\u4ef6\u7684\u8bb0\u5f55</p> <p>\u7a20\u5bc6\u7d22\u5f15\uff08dense index\uff09\uff1a\u6bcf\u4e2a\u641c\u7d22\u7801\u503c\u90fd\u6709\u4e00\u4e2a\u7d22\u5f15\u9879</p> <p>\u7a00\u758f\u7d22\u5f15\uff08Sparse index\uff09\uff1a\u53ea\u4e3a\u67d0\u4e9b\u641c\u7d22\u7801\u503csearch-key\u5efa\u7acb\u7d22\u5f15\u9879\uff0c\u53ea\u6709\u662f\u805a\u96c6\u7d22\u5f15\uff08\u987a\u5e8f\u6587\u4ef6\uff09\u65f6\u624d\u4f7f\u7528\u7a00\u758f\u7d22\u5f15</p> <p>\u8f85\u52a9\u7d22\u5f15\uff08Secondary Indices\uff09\uff1a\u6570\u636e\u6587\u4ef6\u4e2d\u7684\u8bb0\u5f55\u987a\u5e8f\u4e0e\u7d22\u5f15\u6587\u4ef6\u4e2d\u7d22\u5f15\u9879\u7684\u987a\u5e8f\u4e0d\u4e00\u81f4\uff0c\u5e94\u7528\u4e8e\u9700\u8981\u67e5\u8be2\u7684field\u5e76\u975e\u4e3b\u952e</p> <p>\u591a\u7ea7\u7d22\u5f15\uff08multilevel indices\uff09\uff1a\u628a\u5185\u5c42\u7d22\u5f15\u6587\u4ef6\u770b\u4f5c\u987a\u5e8f\u6570\u636e\u6587\u4ef6\u4e00\u6837\uff0c\u5728\u5176\u4e0a\u5efa\u7acb\u5916\u5c42\u7684\u7a00\u758f\u7d22\u5f15</p> <p>\u975e\u552f\u4e00\u6027\u641c\u7d22\u7801\uff08nonunique search key\uff09\uff1a\u5982\u679c\u4e00\u79cd\u5173\u7cfb\u53ef\u4ee5\u53c8\u4e0d\u77e5\u4e00\u6761\u5305\u542b\u76f8\u540c\u641c\u7d22\u7801\u503c\u5f97\u8bb0\u5f55</p> <p>\u590d\u5408\u641c\u7d22\u7801\uff08composite search key\uff09\uff1a\u5305\u542b\u591a\u4e2a\u5c5e\u6027\uff0c\u6309\u5b57\u5178\u5e8f\u6392\u5217</p>"},{"location":"Courses/DB.html#93-b","title":"9.3 B+\u6811\u7d22\u5f15","text":""},{"location":"Courses/DB.html#931","title":"9.3.1 \u7ed3\u6784","text":"<p>\u6027\u8d28\uff1a</p> <p></p> <p>B+\u6811\u8ba1\u7b97\uff1a</p> <p>n\uff1aB+\u6811\u6bcf\u4e2a\u8282\u70b9\u7684\u6307\u9488\u6570\u91cf</p> <p>\u975e\u53f6\u7ed3\u70b9\u6709\u2308\ud835\udc5b/2\u2309~n\u4e2a\u5b69\u5b50\uff1b\u6839\u8282\u70b9\u67092 ~ n\u4e2a\u5b69\u5b50</p> <ul> <li> <p>\u6bcf\u4e2a\u53f6\u8282\u70b9\u6700\u591a\u53ef\u6709n-1\u4e2a\u503c\uff0c\u6700\u5c11\u5305\u542b\u2308(\ud835\udc5b-1)/2\u2309\u4e2a\u503c</p> </li> <li> <p>\u975e\u53f6\u8282\u70b9\u662f\u4e00\u4e2a\u591a\u7ea7\u7a00\u758f\u7d22\u5f15\uff0c\u6700\u591a\u5bb9\u7eb3n\u4e2a\u6307\u9488\uff0c\u6700\u5c11\u5bb9\u7eb3\u2308\ud835\udc5b/2\u2309\u4e2a\u6307\u9488</p> </li> <li> <p>\u6839\u8282\u70b9\u5305\u542b\u7684\u6307\u9488\u53ef\u4ee5\u5c11\u4e8e\u2308\ud835\udc5b/2\u2309\uff0c\u4f46\u5fc5\u987b\u81f3\u5c11\u5305\u542b\u4e24\u4e2a\u6307\u9488\uff08\u9664\u4e86\u6811\u53ea\u7531\u4e00\u4e2a\u8282\u70b9\u7ec4\u6210\uff09</p> </li> </ul> <p>N\uff1a\u641c\u7d22\u7801\u4e2a\u6570</p> <p>B^+^\u6811\u9ad8\u5ea6\u4f30\u8ba1\uff1a</p> <ul> <li>\u6700\u5c0f\uff1a\u6240\u6709\u53f6\u8282\u70b9\u90fd\u6ee1\uff0c\\(h=\\lceil{log_n(N)}\\rceil\\) \u4e0d\u592a\u5bf9</li> <li>\u6700\u5927\uff1a\u6240\u6709\u53f6\u8282\u70b9\u90fd\u534a\u6ee1\uff0c\\(h=\\lceil{log_{\\lceil{n/2}\\rceil}(N/2)}\\rceil\\)</li> </ul>"},{"location":"Courses/DB.html#932","title":"9.3.2 \u67e5\u8be2","text":"<p>\u5982\u679c\u6587\u4ef6\u4e2d\u6709N\u4e2a\u641c\u7d22\u7801\u503c\uff0c\u90a3\u4e48\u8fd9\u6761\u8def\u5f84\u7684\u957f\u5ea6\uff08\u6811\u9ad8\uff09\u4e0d\u8d85\u8fc7\\(\\(\u2308log_{\u2308\ud835\udc5b/2\u2309}N\u2309\\)\\)\u200b\uff0c\u8fd9\u91cc n(fan-out or entries)=\u78c1\u76d8\u89c4\u6a21(4096B)/\uff08\u641c\u7d22\u7801+\u6307\u9488\u89c4\u6a21\uff09(B)</p> <ul> <li>\u6700\u574f\u67e5\u8be2Block\u6570\u91cf=\u8def\u5f84\u957f\u5ea6+bucket block+\u67e5\u8be2\u5185\u5bb9block</li> </ul> <p>\u5728\u53f6\u5b50\u8282\u70b9\uff0c\u5982\u679c\u7ed9\u5b9a\u8303\u56f4\u5185\u6709M\u4e2a\u6307\u9488\uff0c\u5219\u6700\u591a\u9700\u8981\u8bbf\u95ee\u2308M/(n/2)\u2309+1\u4e2a\u53f6\u8282\u70b9\u6765\u68c0\u7d22\u6307\u9488</p> <p>\u65e5\u5fd7\u7ed3\u6784\u5408\u5e76\u6811LSM(log-structured merge tree) trees\uff1a\u4e00\u4e2a\u5185\u5b58\u6811+\u591a\u4e2a\u78c1\u76d8\u6811\uff0c\u5bf9\u5199\u505a\u4f18\u5316\uff0c\u727a\u7272\u4e86\u90e8\u5206\u8bfb\u578b\u8bb7\u8bb7\u611f</p>"},{"location":"Courses/DB.html#933","title":"9.3.3 \u66f4\u65b0","text":"<p>\u63d2\u5165\u65f6\uff0c\u5c06\u539f\u6765\u53f6\u8282\u70b9n-1\u4e2a\u503c\u548c\u5f85\u63d2\u5165\u7684\u4e00\u4e2a\u503c\u5206\u6210\u4e24\u7ec4\uff0c\u524d\u2308\ud835\udc5b/2\u2309\u4e2a\u503c\u653e\u5230\u539f\u6765\u7684\u8282\u70b9\u4e2d</p> <p>\u5728\u8fdb\u884c\u5220\u9664\u540e\uff0cB+\u6811\u79cd\u975e\u53f6\u8282\u70b9\u51fa\u73b0\u7684\u503c\u53ef\u80fd\u5728\u6811\u7684\u4efb\u4f55\u53f6\u8282\u70b9\u4e2d\u90fd\u4e0d\u5b58\u5728</p> <p>\u66f4\u65b0\u7684\u590d\u6742\u5ea6\uff1a\u548c\\(\\(log_{\u2308\ud835\udc5b/2\u2309}N\\)\\)\u6210\u6b63\u6bd4</p> <p>Buffer trees\uff1a\u7ed9B+\u6811\u6bcf\u4e2a\u5185\u90e8\u8282\u70b9\u4e00\u4e2abuffer</p> <p>\u5bf9\u4e8e\u53f6\u8282\u70b9\uff0c\u7d22\u5f15\u5c06\u88ab\u63d2\u5165\u5230\u6839\u7684\u7f13\u51b2\u533a\u4e2d\uff0c\u800c\u4e0d\u662f\u904d\u5386\u6811\u3002\u5982\u679c\u7f13\u51b2\u533a\u6ee1\u65f6\uff0c\u7f13\u51b2\u533a\u4e2d\u7684\u6bcf\u4e2a\u7d22\u5f15\u8bb0\u5f55\u90fd\u4f1a\u4ece\u6811\u5411\u4e0b\u63a8\u4e00\u7ea7\u5230\u76f8\u5e94\u7684\u5b50\u8282\u70b9\u3002\u5982\u679c\u5b50\u8282\u70b9\u662f\u5185\u90e8\u8282\u70b9\uff0c\u5219\u5c06\u7d22\u5f15\u8bb0\u5f55\u6dfb\u52a0\u5230\u5b50\u8282\u70b9\u8282\u70b9\u7f13\u51b2\u533a\uff1b\u5982\u679c\u8be5\u7f13\u51b2\u533a\u5df2\u6ee1\uff0c\u5219\u8be5\u7f13\u51b2\u533a\u4e2d\u7684\u6240\u6709\u8bb0\u5f55\u90fd\u4f1a\u7c7b\u4f3c\u5730\u88ab\u4e0b\u63a8\u3002 \u7f13\u51b2\u533a\u4e2d\u7684\u6240\u6709\u8bb0\u5f55\u5728\u6309\u4e0b\u4e4b\u524d\u90fd\u6309\u641c\u7d22\u952e\u8fdb\u884c\u6392\u5e8f\u3002\u5982\u679c\u5b50\u8282\u70b9\u662f\u4e00\u4e2a\u53f6\u8282\u70b9\uff0c\u7d22\u5f15\u8bb0\u5f55\u4ee5\u901a\u5e38\u7684\u65b9\u5f0f\u63d2\u5165\u5230\u53f6\u4e2d\u3002\u5982\u679c\u63d2\u5165\u5bfc\u81f4\u8fc7\u6ee1\u7684\u53f6\u8282\u70b9\u3001\u8be5\u8282\u70b9\u4ee5\u901a\u5e38\u7684B+\u6811\u65b9\u5f0f\u88ab\u5206\u5272\uff0c\u5176\u4e2d\u5206\u88c2\u53ef\u80fd\u4f20\u64ad\u5230\u7236\u8282\u70b9\u3002\u8fc7\u6ee1\u5185\u90e8\u7684\u62c6\u5206\u8282\u70b9\u662f\u4ee5\u901a\u5e38\u7684\u65b9\u5f0f\u5b8c\u6210\u7684\uff0c\u540c\u65f6\u8fd8\u6709\u62c6\u5206\u7f13\u51b2\u533a\u7684\u9644\u52a0\u6b65\u9aa4\uff1b\u8fd9\u4e2a\u7f13\u51b2\u533a\u6761\u76ee\u6839\u636e\u5b83\u4eec\u7684\u952e\u503c\u5728\u4e24\u4e2a\u62c6\u5206\u7684\u8282\u70b9\u4e4b\u95f4\u8fdb\u884c\u5206\u533a\u3002</p> <p>\u63d2\u5165\u6b21\u6570\u51cf\u5c11\uff0c\u6240\u4ee5I/O\u6b21\u6570\u4f1a\u5c11</p>"},{"location":"Courses/DB.html#934","title":"9.3.4 \u975e\u552f\u4e00\u6027\u641c\u7d22\u7801","text":"<p>\u65b9\u6cd51\uff1a\u6bcf\u4e2a\u7801\u53ea\u50a8\u5b58\u4e00\u6b21\uff0c\u7ef4\u62a4\u4e00\u4e2a\u5e26\u6709\u641c\u7d22\u7801\u503c\u7684\u8bb0\u5f55\u6307\u9488\u7684\u6876bucket</p> <p>\u65b9\u6cd52\uff1a\u6bcf\u6761\u8bb0\u5f55\u50a8\u5b58\u4e00\u6b21\u641c\u7d22\u7801\u503c</p>"},{"location":"Courses/DB.html#quiz","title":"Quiz","text":"<ol> <li>Considering a B+ tree for indexing, Each node can fit three pointers and two key values, denoted as \\(&lt;A_1, K_1, A_2, K_2, A_3&gt;\\), Within each node, the keys satisfy K1 &lt; K2, For all search field values X in the sub-tree pointed by Ai, we have:  \\(K_{i-1} \u2264 X&lt;K_i\\); for 1&lt;i&lt;3; \\(X&lt;K_i\\) , for i=1; \\(K_{i-1}\u2264X\\), for i=3; Construct a B+ tree for the following set of key values:(2, 3, 6, 4, 5, 1, 8, 7), assuming that values are inserted one by one, and the number of key values in internal nodes and leaf nodes are both 2. When we split a node, one value remains in the left node and the other two are split out to the newly created right one.  </li> </ol> <ol> <li>Assume that the B+ tree(n=3) contains 2024 index items, estimate the height of the B+ tree. Give the lower and upper bound.</li> </ol> <p>B+ Tree Properties:</p> <ul> <li>Each internal node can have between \u2308\ud835\udc5b/2\u2309=2 and \ud835\udc5b=3 children.</li> <li>Each leaf node can have between \u2308\ud835\udc5b/2\u2309\u22121=1 and \ud835\udc5b\u22121=2 keys.</li> </ul> <p>Lower Bound Calculation:</p> <ul> <li>For the lower bound, assume the internal nodes have the minimum number of children.</li> </ul> <ol> <li>Height 1 (root level): At least 1 node.</li> <li>Height 2: At least 2 nodes (each node at level 1 has at least 2 children).</li> <li>Height 3: At least 2^2^=4 nodes.</li> <li>Height \u210e: At least 2^\u210e\u22121^ nodes.</li> </ol> <p>So, at height \u210e, we have at least:  $$ \\sum_{i=0}^{h-1}2^i=2^h-1 $$ Given 2024 index items: </p> <p>2^\u210e^\u22121 \u2265 2024</p> <p>\u210e \u2265 \\(log\u2061_22025\\) \u2248 10.001</p> <p>So, the lower bound height is approximately 11.</p> <p>Upper Bound Calculation:</p> <ul> <li>For the upper bound, assume the internal nodes have the maximum number of children.</li> </ul> <ol> <li>Height 1 (root level): At most 1 node.</li> <li>Height 2: At most 3 nodes (each node at level 1 has at most 3 children).</li> <li>Height 3: At most 32=932=9 nodes.</li> <li>Height \u210e: At most 3^\u210e\u22121^nodes.</li> </ol> <p>So, at height \u210e, we have at most:  $$ \\sum_{i=0}^{h-1}3^i=\\frac{3^h-1}{2} $$ Given 2024 index items:</p> <p>\\(\\frac{3^h-1}{2}\\)\u22652024</p> <p>\u210e \u2265 \\(log\u2061_34049\\) \u2265 7.56</p> <p>So, the upper bound height is approximately 8.</p> <ol> <li>Assume that the B+ tree (n=3) contains 2024 index items, estimate the size (i.e. the number of nodes) of the B+ tree. Give the lower and upper bound.</li> </ol> <p>Lower Bound Calculation:</p> <p>Maximum keys per node: 2 keys (since \ud835\udc5b=3n=3, each node can hold 2 keys). \u5411\u4e0a\u53d6\u6574\uff01</p> <ul> <li>Number of leaf nodes: \u23082024/2\u2309=1012.</li> <li> <p>Number of internal nodes: \u23081012/3\u2309=338. At the bottom level (just above leaf nodes), each internal node can have up to 3 children (pointers).</p> </li> <li> <p>At the next level: \u2308338/3\u2309=113</p> </li> <li>At the level above that: \u2308113/3\u2309=38</li> <li>Continuing further: \u230838/3\u2309=13</li> <li>Next level: \u230813/3\u2309=5</li> <li>Finally: \u23085/3\u2309=2</li> <li>And at the root level: \u2308\u2154\u2309=1</li> </ul> <p>\u200b So, the total number of nodes (summing all levels) for the lower bound is approximately: 1012+338+113+38+13+5+2+1=1522</p> <p>Upper Bound Calculation:</p> <p>Minimum keys per internal node: 1 key (since each node has at least 2 pointers). \u5411\u4e0b\u53d6\u6574\uff01</p> <ul> <li>Each leaf node can hold at least 1 key.</li> <li>Number of leaf nodes: \u23082024/1\u2309=2024</li> <li>Number of internal nodes at the bottom level (just above leaf nodes), each internal node can have at least 2 children: \u230a2024/2\u230b=1012</li> <li>At the next level: \u230a1012/2\u230b=506</li> <li>At the level above that: \u230a506/2\u230b=253</li> <li>Continuing further: \u230a253/2\u230b=126</li> <li>Next level: \u230a126/2\u230b=63</li> <li>And continuing: \u230a63/2\u230b=31</li> <li>Next: \u230a31/2\u230b=15</li> <li>Next: \u230a15/2\u230b=7</li> <li>Finally: \u230a7/2\u230b=3</li> <li>And at the root level: \u230a3/2\u230b=1</li> </ul> <p>\u200b So, the total number of nodes (summing all levels) for the upper bound is approximately:  </p> <p>2024+1012+506+253+126+63+31+15+7+3+1=4041</p>"},{"location":"Courses/DB.html#94-hash-indices","title":"9.4 \u6563\u5217\u7d22\u5f15 Hash indices","text":"<p>\u7d22\u5f15\u8bb0\u5f55\u968f\u673a\u5206\u5e03</p> <p>\u6876bucket\u8bb0\u5f55\uff0c\u6876\u6ea2\u51fa\u7684\u8bdd\u7528\u6ea2\u51fa\u94fe\u6765\u5904\u7406\u591a\u6761\u8bb0\u5f55</p> <p>\u8ba1\u7b97\\(h(K_i)\\)\u200b\u786e\u5b9a\u6876\u518d\u904d\u5386\u6876\u6765\u67e5\u627e\uff0c\u4e0d\u652f\u6301\u8303\u56f4\u67e5\u8be2</p> <p>\u6876\u7684\u6570\u91cf\uff1a\\((n_r/f_r)*(1+d)\\)\uff0c\\(f_r\\)\u662f\u6bcf\u4e2a\u6876\u5bb9\u7eb3\u7684\u8bb0\u5f55\u7684\u6570\u91cf\uff0cd\u662f\u907f\u8ba9\u56e0\u5b50\uff080.2\u8868\u793a\u6876\u4e2d20%\u7684\u7a7a\u95f4\u5927\u6982\u662f\u7a7a\u7684\uff09</p>"},{"location":"Courses/DB.html#95","title":"9.5 \u591a\u7801\u7d22\u5f15","text":""},{"location":"Courses/DB.html#96","title":"9.6 \u4f4d\u56fe\u7d22\u5f15","text":""},{"location":"Courses/DB.html#10","title":"10 \u67e5\u8be2\u5904\u7406\u548c\u67e5\u8be2\u4f18\u5316","text":""},{"location":"Courses/DB.html#101","title":"10.1 \u6982\u8ff0","text":""},{"location":"Courses/DB.html#102","title":"10.2 \u67e5\u8be2\u4ee3\u4ef7","text":"<p>\u5728\u5927\u578b\u6570\u636e\u5e93\u4e2d\uff0c\u5728\u78c1\u76d8\u4e0a\u5b58\u53d6\u6570\u636e\u7684\u4ee3\u4ef7\u901a\u5e38\u662f\u6700\u4e3b\u8981\u7684\u4ee3\u4ef7</p> <p>\u603b\u6210\u672ccost = b\u4e2a\u5757*\u4f20\u8f93\u4e00\u4e2a\u6570\u636e\u5757\u7684\u65f6\u95f4\\(t_r\\) + \u6267\u884cS\u6b21\u968f\u673aI/O*\u5e73\u5747\u5757\u8bbf\u95ee\u65f6\u95f4\uff08\u5bfb\u9053+\u65cb\u8f6c\u5ef6\u8fdf\uff09\\(t_s\\)\u200b</p> <p>\\(cost = b*t_r + S*t_s\\)</p>"},{"location":"Courses/DB.html#103","title":"10.3 \u5173\u7cfb\u4ee3\u6570\u8fd0\u7b97\u7684\u6267\u884c","text":""},{"location":"Courses/DB.html#1031","title":"10.3.1 \u9009\u62e9\u8fd0\u7b97","text":"<p>\\(h_i\\)\u200b\uff1a\u7d22\u5f15\u7684\u9ad8\u5ea6 \\(b_r\\)\u200b\uff1a\u6587\u4ef6\u4e2d\u7684\u5757\u6570\u91cf \\(t_T\\)\uff1a\u4e00\u4e2a\u5757\u7684\u4f20\u8f93\u65f6\u95f4 \\(t_s\\)\uff1a\u4e00\u4e2a\u5757\u7684\u5bfb\u9053\u65f6\u95f4</p> <p></p>"},{"location":"Courses/DB.html#_8","title":"\u6587\u4ef6\u626b\u63cf","text":"<p>A1 \u7ebf\u6027\u641c\u7d22 A2 \u805a\u96c6\u7d22\u5f15+key\u6bd4\u8f83 A3 \u805a\u96c6\u7d22\u5f15+\u975ekey\u6bd4\u8f83 A4 \u8f85\u52a9\u7d22\u5f15+key\u6bd4\u8f83 A4 \u8f85\u52a9\u7d22\u5f15+\u975ekey\u6bd4\u8f83 A5 \u805a\u96c6\u7d22\u5f15+\u6bd4\u8f83 A6 \u975e\u805a\u96c6\u7d22\u5f15+\u6bd4\u8f83</p>"},{"location":"Courses/DB.html#_9","title":"\u590d\u6742\u9009\u62e9","text":"<p>\u5408\u53d6\u2227\uff1a</p> <p>\u6790\u53d6\u2228\uff1a</p> <p>\u5426\u5b9a-\uff1a</p> <p>A7 \u4f7f\u7528\u4e00\u4e2a\u7d22\u5f15\u7684\u5408\u53d6\u9009\u62e9 A8 \u4f7f\u7528\u7ec4\u5408\u7d22\u5f15\u7684\u5408\u533a\u9009\u62e9 A9 \u4f7f\u7528\u6807\u8bc6\u4ea4\u96c6\u7684\u5408\u533a\u9009\u62e9 A10 \u4f7f\u7528\u6807\u8bc6\u96c6\u7684\u6790\u53d6\u9009\u62e9</p>"},{"location":"Courses/DB.html#1032","title":"10.3.2 \u6392\u5e8f","text":"<p>\u5916\u6392\u5e8f Merge \u5f52\u5e76\uff1a\u5bf9M-1\u4e2a\u5f52\u5e76\u6bb5\u8fdb\u884c\u5f52\u5e76\uff0c\u6bcf\u4e00\u6b21\u5f52\u5e76\u6bb5\u7684\u6570\u91cf\u51cf\u5c11\u4e3a\u539f\u6765\u76841/(M-1)</p> <p>\\(b_b\\)\uff1a\u4e00\u6b21\u8bfb/\u5199\u5757\u7684\u4e2a\u6570 buffer blocks per run = read/write \\(b_b\\)\u200b\u200b blocks at a time</p> <p>\\(b_r\\)\u200b\uff1a\u5173\u7cfbr\u8bb0\u5f55\u7684\u603b\u5757\u6570</p> <p>M\uff1a\u4e3b\u5b58\u7f13\u51b2\u533a\u53ef\u4ee5\u7528\u6765\u6392\u5e8f\u7684\u5757\u6570</p> <p>\u4f20\u8f93\u5757\u603b\u6570 block transfers\uff1a\\(b_r ( 2\u2308log_{\u230aM/b_b\u230b\u20131} (b_r/ M)\u2309 + 1)\\)</p> <p>\u5bfb\u9053\u6b21\u6570 seeks\uff1a\\(2\u2308b_r/M\u2309+\u2308b_r/b_b\u2309( 2\u2308log_{\u230aM/b_b\u230b\u20131} (b_r/ M)\u2309 - 1)\\)</p> <p>Example</p> <p></p> <p>\u5757\u4f20\u8f93\u603b\u6570\uff1a\\(b_b=1, b_r=12, M=3\\)\u200b\uff0c12 \u2217 (2*2 + 1) = 60 </p> <p>\u78c1\u76d8\u5bfb\u9053\u603b\u6570\uff1a\\(b_b=1, b_r=12, M=3\\)\uff0c 2*12/3 + 12 \u2217 (2 \u22172 \u2212 1) = 44 </p>"},{"location":"Courses/DB.html#1033","title":"10.3.3 \u8fde\u63a5\u8fd0\u7b97","text":"<p>\u7b49\u503c\u8fde\u63a5\uff08equal-join\uff09\u8868\u793a\u5f62\u5982\u7684\u8fde\u63a5</p>"},{"location":"Courses/DB.html#-nested-loop-join","title":"\u5d4c\u5957-\u5faa\u73af \u8fde\u63a5\uff08Nested-loop join\uff09","text":"<p>r is called the outer relation and s the inner relation of the join\uff1b r\u5916\u5c42s\u5185\u5c42 \\(b_r\\)\uff1a\u5173\u7cfbr\u8bb0\u5f55\u7684\u603b\u5757\u6570 \\(n_r\\)\uff1a\u5173\u7cfbr\u4e2d\u5305\u542b\u7684\u5143\u7ec4\u4e2a\u6570</p> <p>worst case \u7f13\u51b2\u533a\u53ea\u80fd\u5bb9\u7eb3\u6bcf\u4e2a\u5173\u7cfb\u7684\u4e00\u4e2a\u6570\u636e\u5757: \\((b_r + n_r \u2217 b_s )block-transfers + (b_r + n_r) seeks\\)</p> <p>best case \u7f13\u51b2\u533a\u80fd\u540c\u65f6\u5bb9\u7eb3\u4e24\u4e2a\u5173\u7cfb\uff08\u6216\u4e00\u4e2a\u80fd\u5b8c\u5168\u653e\u5728\u5185\u5b58\u4e2d\u7684\u5173\u7cfb\u4f5c\u4e3a\u5185\u5c42\uff09\uff1a\\((b_r + b_s )block-transfers + (2) seeks\\)</p>"},{"location":"Courses/DB.html#-block-nested-loop-join","title":"\u5757\u5d4c\u5957-\u5faa\u73af \u8fde\u63a5\uff08Block nested-loop join\uff09","text":"<p>worst case \u7f13\u51b2\u533a\u53ea\u80fd\u5bb9\u7eb3\u6bcf\u4e2a\u5173\u7cfb\u7684\u4e00\u4e2a\u6570\u636e\u5757: \\((b_r*b_s + b_r)block-transfers + (2b_r)seeks\\)</p> <p>best case \u7f13\u51b2\u533a\u80fd\u540c\u65f6\u5bb9\u7eb3\u4e24\u4e2a\u5173\u7cfb\uff08\u6216\u4e00\u4e2a\u80fd\u5b8c\u5168\u653e\u5728\u5185\u5b58\u4e2d\u7684\u5173\u7cfb\u4f5c\u4e3a\u5185\u5c42\uff09: \\((b_s + b_r)block-transfers + (2)seeks\\)</p> <p>\u56e0\u4e3a\u662fblock\u6240\u4ee5\u7b97\u7684\u65f6\u5019\u662f\u770bnumber of blocks</p> <ul> <li>\u5982\u679c\u4e24\u4e2a\u5173\u7cfb\u90fd\u4e0d\u80fd\u653e\u8fdb\u5185\u5b58\u4e2d\uff0c\u5219\u5c0f\u5173\u7cfb\u4f5c\u4e3a\u5916\u5c42\u5173\u7cfb\u8fde\u63a5\u6548\u7387\u66f4\u9ad8</li> </ul> <p>Improved: M\u4e3a\u5757\u6570</p>"},{"location":"Courses/DB.html#-indexed-nested-loop-join","title":"\u7d22\u5f15\u5d4c\u5957-\u5faa\u73af\u8fde\u63a5\uff08indexed nested-loop join\uff09","text":"<p>\\(t_T\\)\uff1a\u4e00\u4e2a\u5757\u7684\u4f20\u8f93\u65f6\u95f4 \\(t_s\\)\uff1a\u4e00\u4e2a\u5757\u7684\u5bfb\u9053\u65f6\u95f4</p> <p>worst cost = \\(b_r(t_T+t_S)+n_r*c\\)\u200b</p> <ul> <li>c \u8868\u793a\u4f7f\u7528\u8fde\u63a5\u6761\u4ef6\u5bf9\u5173\u7cfbs\u8fdb\u884c\u5355\u6b21\u9009\u62e9\u64cd\u4f5c\u7684\u4ee3\u4ef7</li> <li>\u6700\u574f\u60c5\u51b5\uff0c\u7f13\u51b2\u533a\u53ea\u80fd\u5bb9\u7eb3\u5173\u7cfbr\u7684\u4e00\u5757\u548c\u7d22\u5f15\u7684\u4e00\u5757</li> </ul> <p>\u7b97\u7684\u65f6\u5019\\(n_r\\)\u770bnumber of records\uff0c\\(b_r\\)\u770bnumber of blocks</p> <p>\u5c06tuple\u5c11\u7684\u5173\u7cfb\u4f5c\u4e3a\u5916\u5173\u7cfb</p>"},{"location":"Courses/DB.html#-merge-join","title":"\u6392\u5e8f\u5f52\u5e76-\u8fde\u63a5\uff08Merge-join)","text":"<p>\u8bbe\u4e3a\u6bcf\u4e2a\u5173\u7cfb\u5206\u914d\\(b_b\\)\u4e2a\u7f13\u51b2\u5757\uff0c\u5047\u8bbe\u6392\u5e8f\u597d\u7684\uff08\u6ca1\u6392\u5e8f\u8fd8\u8981\u7b97\u4e0a\u6392\u5e8f\u4ee3\u4ef7\uff09</p> <p></p>"},{"location":"Courses/DB.html#-hash-join","title":"\u54c8\u5e0c-\u8fde\u63a5\uff08Hash-join\uff09","text":"<p>\u4e3a\u4e86\u4f7f\u53f3\u8fb9si\u4e2a\u4e1c\u897f\u5b58\u8fdb\u5185\u5b58\uff0cn is chosen as \\(\u2308b_s/M\u2309 * f\\)\u200b where f is a \u201cfudge factor\u201d, typically around 1.2</p> <p>M: number of pages n: number of partitions</p> <p>\u5f53\\(M&gt;(b_s/M)+1\\)\uff0c\u5176\u4e2d\\(b_s/M=n_h\\)\u5206\u533a\u7684\u89c4\u6a21\uff0c\u5219\u5173\u7cfb\u4e0d\u9700\u8981\u9012\u5f52\u5206\u533a</p> <p></p> <p>\\(b_b=\\lfloor\\frac{M}{n+1}\\rfloor=\\lfloor\\frac{M}{b_s/M+1}\\rfloor\\) \u6bcf\u6b21\u80fd\u4f20\u8f93\u7684buffer\u6570</p> <p>\u5982\u679c\u9700\u8981\u9012\u5f52\u5206\u533a\uff08M&gt;\\(\\sqrt{b_s}\\)\uff09</p> <p></p> <p>\u6563\u5217\u5177\u6709\u968f\u673a\u6027\u548c\u5747\u5300\u6027</p>"},{"location":"Courses/DB.html#example_3","title":"Example","text":""},{"location":"Courses/DB.html#104","title":"10.4 \u8868\u8fbe\u5f0f\u6267\u884c","text":"<p>\u7269\u5316</p> <p>\u7b97\u5b50\u6811\u5bf9\u8868\u8fbe\u5f0f\u8fdb\u884c\u56fe\u5f62\u5316\u5c55\u793a</p> <p>\u7269\u5316\u6267\u884c\uff1a\u6bcf\u4e2a\u4e2d\u95f4\u8fd0\u7b97\u7684\u7ed3\u679c\u90fd\u5185\u521b\u5efa\uff08\u7269\u5316\uff09\uff0c\u7136\u540e\u7528\u4e8e\u4e0b\u4e00\u5c42\u8fd0\u7b97\u7684\u6267\u884c</p>"},{"location":"Courses/DB.html#105","title":"10.5 \u67e5\u8be2\u4f18\u5316","text":""},{"location":"Courses/DB.html#1051","title":"10.5.1 \u7b49\u4ef7\u5173\u7cfb","text":"<ol> <li> <p>Conjuctive\u5408\u53d6\u9009\u62e9\u53ef\u5206\u4e3a\u5355\u4e2a\u9009\u62e9\u8fd0\u7b97\u7684\u7ea7\u8054 </p> </li> <li> <p>\u9009\u62e9\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8bcommutative </p> </li> <li> <p>\u4e00\u7cfb\u5217\u6295\u5f71\u8fd0\u7b97\u4e2d\u53ea\u6709\u6700\u540e\u4e00\u4e2a\u662f\u5fc5\u987b\u7684 </p> </li> <li> <p>\u9009\u62e9\u8fd0\u7b97\u53ef\u4e0e\u7b1b\u5361\u5c14\u79ef\u4ee5\u53ca\u03b8\u8fde\u63a5\u76f8\u7ed3\u5408</p> </li> <li> <p>\u03b8\u8fde\u63a5\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b </p> </li> <li>\u81ea\u7136\u8fde\u63a5\u7ed3\u5408\u5f8b</li> <li>\u03b8\u8fde\u63a5\u7ed3\u5408\u5f8b</li> </ol>"},{"location":"Courses/DB.html#1053","title":"10.5.3 \u67e5\u8be2\u89c4\u6a21\u4f30\u8ba1","text":"<p>\\(n_r\\)\uff1a\u5173\u7cfbr\u4e2d\u7684\u5143\u7ec4\u6570 \\(b_r\\)\uff1a\u5305\u542b\u5173\u7cfbr\u4e2d\u5143\u7ec4\u7684\u5757\u6570 \\(l_r\\)\uff1a\u5173\u7cfbr\u4e2d\u4e00\u4e2a\u5143\u7ec4\u7684\u5b57\u8282\u6570 \\(f_r\\)\uff1a\u5173\u7cfbr\u7684\u5757\u56e0\u5b50\u2014\u2014\u4e00\u4e2a\u5757\u4e2d\u80fd\u5bb9\u7eb3\u5173\u7cfbr\u7684\u5143\u7ec4\u6570 V(A,r)\uff1a\u5173\u7cfbr\u4e2d\u5bf9\u4e8e\u5c5e\u6027A\u7684\u975e\u91cd\u590d\u503c\u7684\u6570\u91cf\uff0c\u4e0e\\(\u03a0_A(r)\\)\u200b\u7684\u89c4\u6a21\u76f8\u540c</p> <p>record number per block of r = blocksize/\\(l_r\\) blocks of r = \\(n_r\\)/record number per block of r\uff08\u5411\u4e0a\u53d6\u6574\uff09</p> <p>\u9009\u62e9\u89c4\u6a21\u4f30\u8ba1</p> <p>\\(\u03c3_{A=\\alpha}(r)\\)\uff1a\\(\\alpha\\)\u662f\u9891\u7e41\u51fa\u73b0\u7684\u503c\uff1b\u5426\u5219\uff0c\u6ca1\u6709\u53ef\u7528\u7684\u76f4\u65b9\u56fe\uff0c\u5047\u8bbe\u53d6\u503c\u662f\u5747\u5300\u5206\u5e03\u7684\uff0c\u4f30\u8ba1\u4e3a\\(n_r/V(A,r)\\)\u4e2a\u5143\u7ec4</p> <p>\\(\u03c3_{A\u2264v}(r)\\)\uff1a\u5047\u8bbe\u6700\u5927\u6700\u5c0f\u50a8\u5b58\u5728\u76ee\u5f55\u4e2d\uff0c\u503c\u5747\u5300\u5206\u5e03\uff0c\u5219</p> <p>\u590d\u6742\u9009\u62e9</p> <p></p> <p>\u8fde\u63a5\u89c4\u6a21\u4f30\u8ba1\uff1a</p> <p></p>"},{"location":"Courses/DB.html#1054","title":"10.5.4 \u6267\u884c\u4f18\u5316","text":""},{"location":"Courses/DB.html#exercises","title":"Exercises","text":"<p>a. </p>"},{"location":"Courses/DB.html#11","title":"11 \u4e8b\u52a1\u7ba1\u7406","text":""},{"location":"Courses/DB.html#111","title":"11.1 \u6982\u5ff5","text":"<p>ACID\uff1a\u539f\u5b50\u6027\u4e00\u81f4\u6027\u9694\u79bb\u6027\u6301\u4e45\u6027</p> <ul> <li>\u539f\u5b50\u6027 Atomicity\uff1a\u4e8b\u52a1\u4e2d\u7684\u6240\u6709\u6b65\u9aa4\u53ea\u80fd\u5b8c\u5168\u6267\u884c(commit)\u6216\u8005\u56de\u6eda(rollback)</li> <li>\u6301\u4e45\u6027 Durability\uff1a\u66f4\u65b0\u4e4b\u540e\u54ea\u6015\u8f6f\u786c\u4ef6\u51fa\u4e86\u95ee\u9898\uff0c\u66f4\u65b0\u7684\u6570\u636e\u4e5f\u5fc5\u987b\u5b58\u5728</li> <li>\u4e00\u81f4\u6027 Consistency\uff1a\u5355\u72ec\u6267\u884c\u4e8b\u52a1\u53ef\u4ee5\u4fdd\u6301\u6570\u636e\u5e93\u7684\u4e00\u81f4\u6027</li> <li>\u72ec\u7acb\u6027 Isolation\uff1a\u4e8b\u52a1\u5728\u5e76\u884c\u6267\u884c\u7684\u65f6\u5019\u4e0d\u80fd\u611f\u77e5\u5230\u5176\u4ed6\u4e8b\u52a1\u6b63\u5728\u6267\u884c\uff0c\u6267\u884c\u4e2d\u95f4\u7ed3\u679c\u5bf9\u4e8e\u5176\u4ed6\u5e76\u53d1\u6267\u884c\u7684\u4e8b\u52a1\u662f\u9690\u85cf\u7684</li> </ul> <p>\u4e8b\u52a1\u7684\u72b6\u6001\uff1a - active \u521d\u59cb\u72b6\u6001\uff0c\u6267\u884c\u4e2d\u7684\u4e8b\u52a1\u90fd\u5904\u4e8e\u8fd9\u4e2a\u72b6\u6001 - partially committed \u5728\u6700\u540e\u4e00\u53e5\u6307\u4ee4\u88ab\u6267\u884c\u4e4b\u540e - failed \u5728\u53d1\u73b0\u6267\u884c\u5931\u8d25\u4e4b\u540e - aborted \u56de\u6eda\u7ed3\u675f\uff0c\u4f1a\u9009\u62e9\u662f\u91cd\u65b0\u6267\u884c\u4e8b\u52a1\u8fd8\u662f\u7ed3\u675f - committed \u4e8b\u52a1\u88ab\u5b8c\u6574\u7684\u6267\u884c</p>"},{"location":"Courses/DB.html#115","title":"11.5 \u5e76\u53d1\u63a7\u5236","text":"<p>\u8c03\u5ea6\uff08schedule\uff09\uff1a\u4e00\u7cfb\u5217\u7528\u4e8e\u6307\u5b9a\u5e76\u53d1\u4e8b\u52a1\u7684\u6267\u884c\u987a\u5e8f\u7684\u6307\u4ee4</p> <p>\u4e32\u884c\u8c03\u5ea6\uff08serial\uff09\uff1a\u5148\u6267\u884cT1\u518d\u6267\u884cT2\uff0c\u4fdd\u8bc1\u6570\u636e\u5e93\u4e00\u81f4\u6027</p> <p>\u7b49\u4ef7\u8c03\u5ea6\uff08equivalent schedule\uff09\uff1a\u6539\u53d8\u5904\u7406\u7684\u987a\u5e8f\u4f46\u662f\u548c\u539f\u6765\u7b49\u4ef7</p> <p>\u53ef\u4e32\u884c\u5316\u8c03\u5ea6\uff1a\u591a\u4e2a\u4e8b\u52a1\u7684\u5e76\u53d1\u6267\u884c\u662f\u6b63\u786e\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u5176\u7ed3\u679c\u4e0e\u6309\u67d0\u4e00\u6b21\u5e8f\u4e32\u884c\u5730\u6267\u884c\u8fd9\u4e9b\u4e8b\u52a1\u65f6\u7684\u7ed3\u679c\u76f8\u540c\uff0c\u79f0\u8fd9\u6837\u7684\u8c03\u5ea6\u7b56\u7565\u4e3a\u53ef\u4e32\u884c\u5316\u8c03\u5ea6\u3002</p> <p>\u53ef\u4e32\u884c\u5316\uff1a\u53ef\u4ee5\u8f6c\u5316\u6210\u4e32\u884c\u8c03\u5ea6</p>"},{"location":"Courses/DB.html#116","title":"11.6 \u53ef\u4e32\u884c\u5316","text":"<p>\u5bf9\u540c\u4e00\u6570\u636e\u9879Q\uff0c\u53ea\u6709I\u3001J\u5168\u662fread\u7684\u60c5\u51b5\u4e0b\uff0c\u4e24\u6761\u6307\u4ee4\u7684\u987a\u5e8f\u624d\u662f\u65e0\u5173\u7d27\u8981\u7684\uff1b\u5982\u679c\u6709\u81f3\u5c11\u4e00\u6761\u6307\u4ee4\u662fwrite\u5219I\u548cJ\u662f\u51b2\u7a81\u7684</p> <p>\u5982\u679c\u8c03\u5ea6S\u53ef\u4ee5\u7ecf\u8fc7\u4e00\u7cfb\u5217\u975e\u51b2\u7a81\u6307\u4ee4\u7684\u4ea4\u6362\u800c\u8f6c\u6362\u6210\u8c03\u5ea6S'\uff0c\u5219\u79f0\u5b83\u4eec\u662f\u51b2\u7a81\u7b49\u4ef7\uff08conflict serializable\uff09\u7684</p> <p>\u82e5\u4e00\u4e2a\u8c03\u5ea6S\u4e0e\u4e00\u4e2a\u4e32\u884c\u8c03\u5ea6\u662f\u51b2\u7a81\u7b49\u4ef7\u7684\uff0c\u5219\u79f0S\u662f\u51b2\u7a81\u53ef\u4e32\u884c\u5316\u7684\uff08conflict serializable\uff09</p>"},{"location":"Courses/DB.html#example_4","title":"Example","text":"<p>\u89c6\u56fe\u53ef\u4e32\u884c\u5316\uff08view serializability</p> <p>\u6bcf\u4e2a\u51b2\u7a81\u53ef\u4e32\u884c\u5316\u7684\u8c03\u5ea6\u4e5f\u662f\u89c6\u56fe~\uff1b\u53cd\u4e4b\u4e0d\u5bf9</p> <p></p> <ul> <li>\u6bcf\u4e2a\u4e0d\u662f\u51b2\u7a81\u4e32\u884c\u5316\u7684\u89c6\u56fe\u53ef\u4e32\u884c\u5316\u8c03\u5ea6\u90fd\u6709\u76f2\u5199</li> </ul>"},{"location":"Courses/DB.html#precedence-graph","title":"Precedence graph \uff08\u524d\u9a71\u56fe \uff09","text":"<p>\\(T_i-&gt;T_j\\)\uff1a</p> <ol> <li>Ti write(Q)\u5728Tj read(Q)\u524d</li> <li>Ti read(Q)\u5728Tj write(Q)\u524d</li> <li>Ti write(Q)\u5728Tj write(Q)\u524d</li> </ol> <ul> <li>\u524d\u9a71\u56fe\u65e0\u73af\uff0c\u5219\u662f\u51b2\u7a81\u53ef\u4e32\u884c\u5316\u7684</li> </ul>"},{"location":"Courses/DB.html#117","title":"11.7 \u4e8b\u7269\u9694\u79bb\u6027\u548c\u539f\u5b50\u6027","text":"<p>\u53ef\u6062\u590d\u8c03\u5ea6\uff08recoverable schedules\uff09\uff1a\u5bf9\u6bcf\u5bf9\u4e8b\u52a1\\(T_i\\)\u548c\\(T_j\\)\uff0c\u5982\u679c\\(T_j\\)\u8bfb\u53d6\u4e86\\(T_i\\)\u4e4b\u524d\u5199\u8fc7\u7684\u6570\u636e\u9879\uff0c\u5219\\(T_i\\)\u5fc5\u987b\u5728\\(T_j\\)\u63d0\u4ea4\u4e4b\u524d\u5148\u63d0\u4ea4 <code>Ti\u5199-&gt;Ti\u63d0\u4ea4-&gt;Tj\u8bfb-&gt;Tj\u63d0\u4ea4</code> or <code>Ti\u5199-&gt;Tj\u8bfb-&gt;Ti\u63d0\u4ea4-&gt;Tj\u63d0\u4ea4</code></p> <p>\u65e0\u7ea7\u8054\u8c03\u5ea6\uff08cascadeless schedules\uff09\uff1a\u5bf9\u6bcf\u5bf9\u4e8b\u52a1\\(T_i\\)\u548c\\(T_j\\)\uff0c\u5982\u679c\\(T_j\\)\u8bfb\u53d6\u4e86\u5148\u524d\u7531\\(T_i\\)\u6240\u5199\u7684\u4e00\u4e2a\u6570\u636e\u9879\uff0c\u5219\\(T_i\\)\u7684\u63d0\u4ea4\u64cd\u4f5c\u5fc5\u987b\u51fa\u73b0\u5728\\(T_j\\)\u8fd9\u4e00\u8bfb\u64cd\u4f5c\u524d\uff1b\u6bcf\u4e2a\u65e0\u6781\u8054\u8c03\u5ea6\u90fd\u662f\u53ef\u6062\u590d\u7684 <code>Ti\u5199-&gt;Ti\u63d0\u4ea4-&gt;Tj\u8bfb</code></p> <p>\u56e0\u5355\u4e2a\u4e8b\u7269\u5931\u6548\u800c\u5bfc\u81f4\u4e00\u7cfb\u5217\u4e8b\u7269\u56de\u6eda\u7684\u73b0\u8c61\u79f0\u4e3a\u7ea7\u8054\u56de\u6eda</p>"},{"location":"Courses/DB.html#12","title":"12 \u5e76\u53d1\u63a7\u5236\u4e0e\u6062\u590d","text":"<p>concurrency-control</p>"},{"location":"Courses/DB.html#121","title":"12.1 \u9501","text":""},{"location":"Courses/DB.html#two-phrase-locking-protocol","title":"two-phrase locking protocol \u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae","text":"<ul> <li>\u4fdd\u8bc1\u53ef\u4e32\u884c\u5316</li> <li>\u4e0d\u4fdd\u8bc1\u4e0d\u4f1a\u6709\u6b7b\u9501</li> <li>\u53ef\u80fd\u53d1\u751f\u7ea7\u8054\u56de\u6eda</li> <li>strict ~\uff1a\u4e25\u683c\u7684\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae\u53ef\u4ee5\u907f\u514d\u7ea7\u8054\u56de\u6eda\uff0c\u4fdd\u8bc1\u6ca1\u6709\u810f\u8bfb\uff08dirty read\uff09</li> <li>rigorous~\uff1a\u6240\u6709\u9501\u5fc5\u987b\u4fdd\u6301\u5230\u4e8b\u52a1commit\u6216\u8005abort</li> </ul> <p>\u673a\u5236\uff1a</p> <ul> <li></li> </ul> <p>tree protocol \u6811\u534f\u8bae</p> <p>\u53ea\u80fd\u7528\u6392\u4ed6\u9501\uff0c\u5bf9\u4e00\u4e2a\u6570\u636e\u9879\u53ea\u80fd\u5c01\u9501\u4e00\u6b21</p> <p>\u4fdd\u8bc1\u51b2\u7a81\u53ef\u4e32\u884c\u5316\uff0c\u4e14\u4e0d\u4f1a\u6709\u6b7b\u9501</p> <p></p>"},{"location":"Courses/DB.html#122","title":"12.2 \u6b7b\u9501\u5904\u7406","text":"<p>\u6b7b\u9501\u4e3e\u4f8b\uff1a</p> <p>  Neither T3 nor T4 can make progress \u2014 executing  lock-S(B) causes T4 to wait for T3 to release its lock on B, while executing  lock-X(A) causes T3  to wait for T4 to release its lock on A.</p> <p>Starvation \u9965\u8352\uff1a\u4e00\u4e2a\u4e8b\u52a1\u5728\u7b49\u4e00\u4e2a\u6570\u636e\u9879\u7684Xlock\uff0c\u4e00\u7fa4\u522b\u7684\u4e8b\u52a1\u5728\u7b49\u4ed6release\uff0c\u9020\u6210\u9965\u8352</p> <p>12.3 \u591a\u7c92\u5ea6</p> <p>granularity</p> <p>\u7ec6\u7c92\u5ea6\uff1a\u4f4e\u5c42\uff08\u53f6\u5b50\u5c42\uff09\u9ad8\u5e76\u53d1\u3001\u5c01\u9501\u4ee3\u4ef7\u9ad8</p> <p>\u7c97\u7c92\u5ea6\uff1a\u9ad8\u5c42\uff08\u6839\uff09</p>"},{"location":"Courses/DB.html#124","title":"12.4 \u63d2\u5165\u3001\u5220\u9664\u4e0e\u8c13\u8bcd\u8bfb","text":"<p>12.4.1 \u5220\u9664</p> <p>12.4.2 \u63d2\u5165</p> <p>12.4.3 \u8c13\u8bcd\u8bfb\u548c\u5e7b\u8c61\u73b0\u8c61</p> <p>\u5e7b\u8c61\uff08phantom phenomenon\uff09</p> <p>\u7d22\u5f15\u5c01\u9501\uff08index-locking\uff09</p>"},{"location":"Courses/DB.html#128","title":"12.8 \u6545\u969c\u5206\u7c7b","text":"<p>\u6062\u590d\u673a\u5236\uff08recovery schema\uff09</p> <p>\u4e8b\u52a1\u6545\u969c transaction failure\uff1a</p> <ul> <li>\u903b\u8f91\u9519\u8bef\uff1a\u975e\u6cd5\u8f93\u5165\u3001\u6ea2\u51fa\u3001\u8d85\u51fa\u8d44\u6e90\u9650\u5236</li> <li>\u7cfb\u7edf\u9519\u8bef\uff1a\u6b7b\u9501</li> </ul> <p>\u7cfb\u7edf\u5d29\u6e83 system crash\uff1a\u786c\u4ef6\u3001\u8f6f\u4ef6\u6216\u64cd\u4f5c\u7cfb\u7edf\u6545\u969c</p> <p>\u78c1\u76d8\u6545\u969c disk failure\uff1a\u5907\u4efd</p>"},{"location":"Courses/DB.html#129","title":"12.9 \u5b58\u50a8\u5668","text":"<p>\u6613\u5931\u6027\u5b58\u50a8\u5668 \u975e\u6613\u5931\u6027\u5b58\u50a8\u5668 \u7a33\u5b9a\u5b58\u50a8\u5668\uff1a\u63a5\u8fd1\u7a33\u5b9a\u7684\uff0c\u4fdd\u5b58\u4e00\u4efdcopy\u7528\u6765\u5b9e\u73b0\u6062\u590d</p>"},{"location":"Courses/DB.html#1210","title":"12.10 \u6062\u590d\u4e0e\u539f\u5b50\u6027","text":"<p>\u57fa\u4e8e\u65e5\u5fd7\u7684\u6062\u590d\uff08log-based\uff09</p> <p>\u6062\u590d\u7b97\u6cd5\u9700\u8981\u80fd\u7ef4\u6301\u5e42\u7b49\u6027\uff08idempotent\uff09\uff0c\u6267\u884c\u6062\u590d\u591a\u6b21\u7684\u7ed3\u679c\u4e00\u6837\uff08\u6062\u590d\u8fc7\u7a0b\u4e2d\u4e2d\u65ad\uff09</p>"},{"location":"Courses/DB.html#12101","title":"12.10.1 \u65e5\u5fd7\u8bb0\u5f55","text":"<p>\u66f4\u65b0\u65e5\u5fd7\u8bb0\u5f55 \\(&lt;T_i,X_i,V_1,V_2&gt;\\)\uff1a</p> <ul> <li>\u4e8b\u52a1\u6807\u8bc6 Ti</li> <li>\u6570\u636e\u9879\u6807\u8bc6 Xi</li> <li>\u65e7\u503c V1</li> <li>\u65b0\u503c V2</li> </ul> <p>\u7acb\u5373\u6570\u636e\u5e93\u4fee\u6539\uff08immediate\uff09\uff1a\u4e8b\u52a1\u8fd8\u6ca1commit\u6570\u636e\u5e93\u5c31\u5df2\u7ecf\u4fee\u6539\u4e86\uff1b\u65e5\u5fd7\u66f4\u65b0\u8bb0\u5f55\u5fc5\u987b\u5728\u6570\u636e\u5e93\u5185\u5bb9\u88ab\u5199\u4e4b\u524d\u88ab\u5199</p> <p>\u5ef6\u8fdf\u6570\u636e\u5e93\u4fee\u6539\uff08deferred\uff09\uff1a\u4e8b\u52a1\u76f4\u81f3\u63d0\u4ea4\u90fd\u6ca1\u6709\u4fee\u6539</p> <p>\u4e8b\u52a1\u63d0\u4ea4\uff1a\u4e00\u4e2a\u4e8b\u52a1commit\u7684\u65e5\u5fd7\u8bb0\u5f55\u88ab\u8f93\u51fa\u5230\u7a33\u5b9a\u5b58\u50a8\u5668\u4e0a</p> <p>\u64a4\u9500undo\uff1a\u65e5\u5fd7\u4e2d\u53ea\u6709\\(&lt;T_i start&gt;\\)\u8bb0\u5f55\uff0c\u4ece\u540e\u5f80\u524d\u4e00\u6b65\u6b65\u64a4\u9500\uff0c\u7ed3\u675f\u4e8e\u4e8b\u52a1\u5f00\u59cb</p> <p>\u91cd\u505aredo\uff1a\u65e5\u5fd7\u4e2d\u5305\u62ec\\(&lt;T_i start&gt;\\)\u8bb0\u5f55\u4ee5\u53ca\\(&lt;T_i commit&gt;\\)\u6216\\(&lt;T_i abort&gt;\\)\u200b\u8bb0\u5f55\uff0c\u54ea\u91cc\u5f00\u59cb\u51fa\u9519\u4ece\u54ea\u91cc\u5f00\u59cb\u91cd\u505a</p> <p></p>"},{"location":"Courses/DB.html#_10","title":"\u5355\u4e2a\u4e8b\u52a1\u56de\u6eda","text":"<p>-\u4ece\u540e\u5f80\u524d\u626b\u63cf\uff0c\u5f53\u53d1\u73b0\u8bb0\u5f55\\(&lt;T_i,X_i,V_1,V_2&gt;\\)\u7684\u65f6\u5019 - \u5c06X\u7684\u503c\u4fee\u6539\u4e3a\u539f\u672c\u7684\u503c - \u5728\u65e5\u5fd7\u7684\u672b\u5c3e\u5199\u5165\u8bb0\u5f55\\(&lt;T_i,X_i,V_1&gt;\\) - \u53d1\u73b0start\u8bb0\u5f55\u7684\u65f6\u5019\uff0c\u505c\u6b62\u626b\u63cf\u5e76\u5728\u65e5\u5fd7\u4e2d\u5199\u5165abort\u8bb0\u5f55</p>"},{"location":"Courses/DB.html#12102-checkpoint","title":"12.10.2 \u68c0\u67e5\u70b9 checkpoint","text":"<p>\u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\uff1a</p> <ol> <li>Output all log records currently residing in main memory onto stable storage.</li> <li>Output all modified buffer blocks to the disk. </li> <li>Write a log record <code>&lt; checkpoint L&gt;</code> onto stable storage where L is a list of all transactions active at the time of checkpoint.</li> </ol> <ul> <li>All updates are stopped while doing checkpointing!!!</li> </ul> <p></p> <p>\u6a21\u7cca\u68c0\u67e5\u70b9\uff08fuzzy checkpoint\uff09</p> <p></p> <p>Write-Ahead Logging \u65e5\u5fd7\u5148\u5199\u539f\u5219\uff1a\u5728checkpoint\u8bb0\u5f55\u65e5\u5fd7\u540e\uff0c\u4fee\u6539\u8fc7\u7684\u7f13\u51b2\u5757\u5199\u5230\u78c1\u76d8\u524d\u5f00\u59cb\u66f4\u65b0\u65e5\u5fd7</p> <ul> <li>\u53ea\u6709\u5728\u4fee\u6539\u8fc7\u7684\u7f13\u51b2\u5757\u5217\u8868\u4e2d\u6240\u6240\u6709\u7f13\u51b2\u5757\u90fd\u8f93\u51fa\u5230\u78c1\u76d8\u4e0a\u540e\uff0c<code>last_checkpoint</code>\u624d\u4f1a\u66f4\u65b0</li> <li>\u6b63\u5728\u8f93\u51fa\u5230\u78c1\u76d8\u7684\u7f13\u51b2\u5757\u4e0d\u80fd\u66f4\u65b0\uff01</li> </ul>"},{"location":"Courses/DB.html#1211","title":"12.11 \u6062\u590d\u7b97\u6cd5","text":"<p>\u5728\u91cd\u505a\u9636\u6bb5\uff0c\u4f1a\u8bb0\u5f55\u4ece\u6700\u8fd1\u7684\u68c0\u67e5\u70b9\u5f00\u59cb\u91cd\u6f14\u7684\u6bcf\u4e00\u5929\u65e5\u5fd7\u8bb0\u5f55</p> <p>\u91cd\u590d\u5386\u53f2\uff08repeating history\uff09\uff1a\u6309\u7167\u539f\u5148\u7684\u6267\u884c\u6b21\u5e8f\u91cd\u590d\u6267\u884c\u52a8\u4f5c</p> <p>\u6062\u590d\u7684\u4e24\u4e2a\u9636\u6bb5\uff1aredo\u548cundo</p> <p>redo\u9700\u8981\u5148\u627e\u5230\u6700\u540e\u4e00\u4e2acheck point\u5e76\u4e14\u8bbe\u7f6eundo-list &gt; 1.\u4ececheckpoint\u5f00\u59cb\u5f80\u4e0b\u8bfb &gt; 2.\u5f53\u53d1\u73b0\u4fee\u6539\u503c\u7684\u8bb0\u5f55 \u65e5\u5fd7\u6216\u8005 \u7684redo-only\u65e5\u5fd7\u7684\u65f6\u5019\uff0c\u6267\u884c\u91cd\u505a\uff0c\u5c06\u503cV2\u5199\u7ed9\u6570\u636e\u9879Xj &gt; 3.\u5f53\u53d1\u73b0start\u7684\u65f6\u5019\u5c06\u8fd9\u4e2a\u4e8b\u52a1\u52a0\u5165undo-list &gt; 4.\u5f53\u53d1\u73b0commit\u6216\u8005abort\u7684\u65f6\u5019\u5c06\u5bf9\u5e94\u7684\u4e8b\u52a1\u4eceundo-list\u4e2d\u79fb\u9664 <p>undo &gt; 1.\u4ece\u65e5\u5fd7\u7684\u672b\u5c3e\u5f00\u59cb\u5f80\u56de\u8bfb &gt; 2.\u5f53\u53d1\u73b0\u8bb0\u5f55 \u5e76\u4e14Ti\u5728undo-list\u4e2d\u7684\u65f6\u5019\uff0c\u8fdb\u884c\u4e00\u6b21\u56de\u6eda &gt; 3.\u5f53\u53d1\u73b0Ti start\u5e76\u4e14Ti\u5728undo-list\u4e2d\u7684\u65f6\u5019\uff0c\u5199\u4e00\u6761abort\u65e5\u5fd7\u5e76\u4e14\u4eceundo-list\u4e2d\u79fb\u9664Ti &gt; 4.\u5f53undo-list\u7a7a\u4e86\u7684\u65f6\u5019\u505c\u6b62undo"},{"location":"Courses/DB.html#1212","title":"12.12 \u7f13\u51b2\u533a\u7ba1\u7406","text":"<p>\u65e5\u5fd7\u8bb0\u5f55\u5148\u5b58\u50a8\u5230\u7f13\u51b2\u533a\u4e2d\uff0c\u7136\u540e\u7b49\u5f85\u88ab\u8f93\u51fa\u5230\u7a33\u5b9a\u5b58\u50a8\u5668</p> <p>\u5f3a\u5236\u65e5\u5fd7\uff08log force\uff09</p> <p>\u5f53\u4e0b\u8ff0\u60c5\u51b5\u4e4b\u4e00\u53d1\u751f\u65f6\u5fc5\u987b\u5199\u5230\u7a33\u5b9a\u5b58\u50a8\u5668\uff1a</p> <ul> <li>\u5728\u65e5\u5fd7\u8bb0\u5f55\u53ef\u4ee5\u88ab\u8f93\u51fa\u5230\u7a33\u5b9a\u5b58\u50a8\u5668\u4e4b\u524d\uff0c\u4e0e\u4e8b\u52a1\u76f8\u5173\u7684\u6240\u6709\u65e5\u5fc5\u987b\u5df2\u7ecf\u88ab\u8f93\u51fa\u5230\u7a33\u5b9a\u5b58\u50a8\u5668\u3002 <li>\u5728\u4e3b\u5b58\u4e2d\u7684\u4e00\u4e2a\u6570\u636e\u5757\u8f93\u51fa\u5230(\u975e\u6613\u5931\u6027\u5b58\u50a8\u5668\u4e2d\u7684)\u6570\u636e\u5e93\u4e4b\u524d\uff0c\u4e0e\u8be5\u5757\u4e2d\u7684\u6570\u636e\u76f8\u5173\u7684\u6240\u6709\u65e5\u5fd7\u8bb0\u5f55\u5fc5\u987b\u5df2\u7ecf\u88ab\u8f93\u51fa\u5230\u7a33\u5b9a\u5b58\u50a8\u5668\u3002</li>"},{"location":"Courses/DB.html#1213-aries-recovery","title":"12.13 ARIES recovery","text":"<p>\u53e6\u4e00\u79cd\u6062\u590d\u7b97\u6cd5</p> <p>log sequence number (LSN) to identify log records \u6807\u6ce8\u65e5\u5fd7\uff0c\u4ee5\u9875\u7684\u5f62\u5f0f\u6765\u5b58\u50a8LSN\u6765\u6807\u6ce8\u6570\u636e\u5e93\u9875\u8868\u4e2d\u8fdb\u884c\u4e86\u54ea\u4e9b\u66f4\u65b0</p> <p>PageLSN \u6700\u540e\u6539\u53d8\u7684\u65e5\u5fd7\u8bb0\u5f55\uff1aPageLSN is used during recovery to prevent repeated redo </p> <p>Dirty page table\uff1a</p> <ul> <li>PageLSN of the page</li> <li>RecLSN is an LSN such that log records before this LSN have   already been applied to the page version on the disk</li> <li>\u4f7f\u7528\u810f\u9875\u8868(dirty page table) \u6765\u907f\u514d\u4e0d\u5fc5\u8981\u7684redo</li> </ul> <p></p> <p>ARIES recovers from a system crash in three passes\u2014\u2014\u4e09\u8f6e\u904d\u5386</p> <ul> <li>Analysis pass: This pass determines which transactions to undo, which pages were dirty at the time of the crash, and the LSN from which the redo pass should start.</li> <li>Redo pass: This pass starts from a position determined during analysis and performs a redo, repeating history, to bring the database to a state it was in before the crash.</li> <li>Undo pass: This pass rolls back all transactions that were incomplete at the time of crash. </li> </ul> <p></p> <p>\u5206\u6790\u9636\u6bb5</p> <p>\u9700\u8981\u51b3\u5b9a\u54ea\u4e9b\u4e8b\u52a1undo\uff0c\u54ea\u4e9b\u9875\u662f\u810f\u9875</p> <p>\u4ece\u6700\u540e\u4e00\u6761\u5b8c\u6574\u7684checkpoint\u65e5\u5fd7\u8bb0\u5f55\u5f00\u59cb</p> <p>\u8bfb\u53d6\u810f\u9875\u8868\u7684\u4fe1\u606f</p> <ul> <li>\u8bbe\u7f6eRedoLSN = min RecLSN(\u810f\u9875\u8868\u4e2d\u7684)\uff0c\u5982\u679c\u810f\u9875\u8868\u662f\u7a7a\u7684\u5c31\u8bbe\u7f6e\u4e3acheckpoint\u7684LSN</li> <li>\u8bbe\u7f6eundo-list\uff1acheckpoint\u4e2d\u8bb0\u5f55\u7684\u4e8b\u52a1</li> <li>\u8bfb\u53d6undo-list\u4e2d\u6bcf\u4e00\u4e2a\u4e8b\u52a1\u7684\u6700\u540e\u4e00\u6761\u8bb0\u5f55\u7684LSN</li> </ul> <p>\u4ececheckpoint\u5f00\u59cb\u6b63\u5411\u626b\u63cf\uff08\u8bfb\u540e\u9762\u7684\u65e5\u5fd7</p> <ul> <li>\u5982\u679c\u53d1\u73b0\u4e86\u4e0d\u5728undo-list\u4e2d\u7684\u8bb0\u5f55\u5c31\u5199\u5165undo-list</li> <li>\u5f53\u53d1\u73b0\u4e00\u6761\u66f4\u65b0\u8bb0\u5f55\u7684\u65f6\u5019\uff0c\u5982\u679c\u8fd9\u4e00\u9875\u4e0d\u5728\u810f\u9875\u8868\u4e2d\uff0c\u7528\u8be5\u8bb0\u5f55\u7684LSN\u4f5c\u4e3aRecLSN\u5199\u5165\u810f\u9875\u8868\u4e2d</li> <li>\u5982\u679c\u53d1\u73b0\u4e86\u6807\u5fd7\u4e8b\u52a1\u7ed3\u675f\u7684\u65e5\u5fd7\u8bb0\u5f55(commit, abort) \u5c31\u4eceundo-list\u4e2d\u79fb\u9664\u8fd9\u4e2a\u4e8b\u52a1</li> <li>\u641c\u7d22\u76f4\u5230undo-list\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4e8b\u52a1\u90fd\u5230\u4e86\u6700\u540e\u4e00\u6761</li> </ul> <p>\u5206\u6790\u7ed3\u675f\u4e4b\u540e</p> <ul> <li> <p>RedoLSN\u51b3\u5b9a\u4e86\u4ece\u54ea\u91cc\u5f00\u59cbredo</p> </li> <li> <p>\u6240\u6709undo-list\u4e2d\u7684\u4e8b\u52a1\u90fd\u9700\u8981\u56de\u6eda</p> </li> </ul> <p>Redo\u9636\u6bb5</p> <p>\u4eceRedoLSN\u5f00\u59cb\u6b63\u5411\u626b\u63cf\uff0c\u5f53\u53d1\u73b0\u66f4\u65b0\u8bb0\u5f55\u7684\u65f6\u5019</p> <ul> <li>\u5982\u679c\u8fd9\u4e00\u9875\u4e0d\u5728\u810f\u9875\u8868\u4e2d\uff0c\u6216\u8005\u8fd9\u4e00\u6761\u8bb0\u5f55\u7684LSN\u5c0f\u4e8e\u9875\u9762\u7684RecLSN\u5c31\u5ffd\u7565\u8fd9\u4e00\u6761</li> <li>\u5426\u5219\u4ece\u78c1\u76d8\u4e2d\u8bfb\u53d6\u8fd9\u4e00\u9875\uff0c\u5982\u679c\u78c1\u76d8\u4e2d\u5f97\u5230\u7684\u8fd9\u4e00\u9875PageLSN\u6bd4\u8fd9\u4e00\u6761\u8981\u5c0f\uff0c\u5c31redo\uff0c\u5426\u5219\u5c31\u5ffd\u7565\u8fd9\u4e00\u6761\u8bb0\u5f55</li> </ul> <p>Undo\u9636\u6bb5</p> <p>\u4ece\u65e5\u5fd7\u672b\u5c3e\u5148\u5411\u524d\u641c\u7d22\uff0cundo\u6240\u6709undo-list\u4e2d\u6709\u7684\u4e8b\u52a1</p> <p>\u7b26\u5408\u5982\u4e0b\u6761\u4ef6\u7684\u8bb0\u5f55\u53ef\u4ee5\u8df3\u8fc7</p> <ul> <li>\u7528\u5206\u6790\u9636\u6bb5\u7684\u6700\u540e\u4e00\u4e2aLSN\u6765\u627e\u5230\u6bcf\u4e2a\u65e5\u5fd7\u6700\u540e\u7684\u8bb0\u5f55</li> <li>\u6bcf\u6b21\u9009\u62e9\u4e00\u4e2a\u6700\u5927\u7684LSN\u5bf9\u5e94\u7684\u4e8b\u52a1undo</li> </ul> <p>\u5728undo\u4e00\u6761\u8bb0\u5f55\u4e4b\u540e</p> <ul> <li>\u5bf9\u4e8e\u666e\u901a\u7684\u8bb0\u5f55\uff0c\u5c06NextLSN\u8bbe\u7f6e\u4e3aPrevLSN</li> <li>\u5bf9\u4e8eCLR\u8bb0\u5f55\uff0c\u5c06NextLSN\u8bbe\u7f6e\u4e3aUndoNextLSN</li> </ul> <p>\u5982\u4f55undo\uff1a\u5f53\u4e00\u6761\u8bb0\u5f55undo\u7684\u65f6\u5019</p> <ul> <li>\u751f\u6210\u4e00\u4e2a\u5305\u542b\u6267\u884c\u64cd\u4f5c\u7684CLR</li> <li>\u8bbe\u7f6eCLR\u7684UndoNextLSN \u4e3a\u66f4\u65b0\u8bb0\u5f55\u7684LSN</li> </ul>"},{"location":"Courses/DM.html","title":"Discrete Mathematics \u79bb\u6563\u6570\u5b66\u53ca\u5176\u5e94\u7528","text":"<p> \u7ea6 7540 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 25 \u5206\u949f</p>"},{"location":"Courses/DM.html#1-the-foundations-logic-and-proofs","title":"1 The Foundations: Logic and Proofs","text":""},{"location":"Courses/DM.html#11-propositional-logic","title":"1.1 Propositional Logic","text":"<p>\u5177\u6709\u786e\u5207\u771f\u503c\u7684\u9648\u8ff0\u53e5\u79f0\u4e3a\u547d\u9898\uff08proposition\uff09</p> <p></p> <ul> <li> <p>\u590d\u5408\u547d\u9898\u6709\u7ec4\u6210\uff0c\u5219\u67092\u7684n\u6b21\u65b9\u884c</p> </li> <li> <p>n\u4e2a\u547d\u9898\u53d8\u91cf\u53ef\u4ee5\u6784\u9020 \\(2^{2^n}\\) \u4e0d\u540c (\u975e\u7b49\u4ef7) \u547d\u9898propositions</p> </li> </ul> <p>p \u2228 q (disjunction of p and q): the proposition \u201cp or q,\u201d which is true if and only if at least one of p and q is true </p> <p>**p \u2227 q (conjunction of p and q): ** the proposition \u201cp and q,\u201d which is true if and only if both p and q are true</p> <p>**p \u2295 q (exclusive or of p and q): ** the proposition \u201cp XOR q,\u201d which is true when exactly one of p and q is true</p> <p>p \u2192 q (_p _implies q): the proposition \u201cif p, then q,\u201d which is false if and only if p is true and q is false</p>"},{"location":"Courses/DM.html#12-applications-of-propositional-logic","title":"1.2 Applications of Propositional Logic","text":"<p>\u5bf9\u5076\u590d\u5408\u547d\u9898</p> <p>The dual compound proposition that contains only the logical operator: \\(\u2227,\u2228,\ufe41\\), the proposition obtained by replacing each \u2228 by \u2227 , each by \u2228 \u2227, each T by F, and each F by T. The dual of S is denoted by S*.</p>"},{"location":"Courses/DM.html#13-propositional-equivalences","title":"1.3 Propositional Equivalences","text":"<p>A minterm is a conjunctive of literals in which each variable is represented exactly once. For example, If a formula has the variables p, q, r, then p\u2227\u00acq\u2227 r is a minterm, but p\u2227\u00acq and p\u2227\u00acp\u2227r are not.</p> <p>Disjunctive normal form \u6790\u53d6\u8303\u5f0f\uff1a\u53d6\u5404\u547d\u9898\u53d8\u91cf\u6216\u5176\u5426\u5b9a\u7684\u5408\u53d6\u5f0f \u2227 \u7684\u6790\u53d6\u5f0f\u2228\uff0c\u5176\u4e2d\u6bcf\u4e00\u7ec4\u5408\u53d6\u8bd5\u5bf9\u5e94\u4e00\u7ec4\u771f\u503c\u7ec4\u5408\uff0c\u4ece\u800c\u4f7f\u8be5\u590d\u5408\u547d\u9898\u4e3a\u771f\u3002 eg, (a\u2227b)\u2228(c\u2227d)\u2228(e\u2227f). </p> <p>If a formula is expressed as a disjunction of minterms, it is said to be in full disjunctive normal form \u5168\u6790\u53d6\u8303\u5f0f.For example, \uff0c\u62ec\u53f7\u95f4\u7528\u6790\u53d6\u2228\u8fde\u63a5\u3002Every compound proposition is logically equivalent to a full DNF</p> <ul> <li>Disjunctive\u6790\u53d6\u8303\u5f0f\uff08\uff09\u5916\u7531\u6790\u53d6\u2228\u8fde\u63a5\uff0c\uff08\uff09\u5185\u7531\u5408\u53d6\u2227\u8fde\u63a5</li> <li>Conjunctive\u5408\u53d6\u8303\u5f0f\uff08\uff09\u5916\u7531\u5408\u53d6\u2227\u8fde\u63a5\uff0c\uff08\uff09\u5185\u7531\u6790\u53d6\u2228\u8fde\u63a5</li> </ul> <p>Any formula A is tautologically equivalent to a formula in full disjunctive normal form</p> <p>\u5176\u4ed6\u903b\u8f91\u8fd0\u7b97\u7b26</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u8054\u7ed3\u8bcd\u96c6\u5408\uff0c\u5982\u679c\u6240\u6709\u547d\u9898\u516c\u5f0f\u90fd\u80fd\u7528\u5176\u4e2d\u7684\u8054\u7ed3\u8bcd\u7b49\u4ef7\u8868\u793a\u51fa\u6765\uff0c\u5219\u79f0\u8be5\u8054\u7ed3\u8bcd\u96c6\u5408\u4e3a\u5168\u529f\u80fd\u8054\u7ed3\u8bcd\u96c6\u5408\uff0c\u6216\u79f0\u8be5\u8054\u7ed3\u8bcd\u96c6\u5408\u4e3a\u529f\u80fd\u5b8c\u5907\u7684 functionally complete \u3002</p> <p>\u4f8b\u5982\uff0c{ \u00ac , \u2228 , \u2227 } \u3001\u3001{ \u00ac , \u2228 } \u3001{ \u00ac , \u2227 }  \u90fd\u662f\u5168\u529f\u80fd\u8054\u7ed3\u8bcd\u96c6\u5408\uff0c\u8fd8\u6709 { \u00ac , \u2192 } \u3001{ \u2191 }\u3001{ \u2193 }  \u4e5f\u662f\u3002</p>"},{"location":"Courses/DM.html#14-predicates-and-quantifiers","title":"1.4 Predicates and Quantifiers","text":"<p>\u2203\uff1aexistential quantifier\u2203\u2200 \u6709\u6700\u9ad8\u7ea7\u4f18\u5148\u6743</p> <p></p> <p>Uniqueness\u2203!x, P(x) == one and only one x in the universe of the discourse</p>"},{"location":"Courses/DM.html#more-logical-equivalences","title":"More logical equivalences","text":""},{"location":"Courses/DM.html#example","title":"Example","text":"<ol> <li>\"Every student in this class has taken a course in Java.\"</li> </ol> <p>Solution 1: If U is all students in this class, define a propositional function J(x) denoting \"x has taken a course in Java\" and translate as \u2200x J(x).</p> <p>Solution 2: But if U is all people, also define a propositional function S(x) denoting \"x is a student in this class\" and translate as \u2200x (S(x)\u2192J(x))</p> <p>! note\uff1a</p> <p>\u2200x (S(x)\u2227J(x)) is not correct \u5b83\u7684\u610f\u601d\u662f\u6240\u6709\u4eba\u90fd\u5728\u8fd9\u4e2a\u73ed\u7ea7\u4e2d\u4e14\u4e0a\u4e86Java\u8bfe\u7a0b</p> <ol> <li>\"Some student in this class has taken a course in Java.\"</li> </ol> <p>Solution 1: If U is all students in this class, translate as \u2203x J(x)</p> <p>Solution 2: But if U is all people, then translate as \u2203x (S(x)\u2227J(x))</p> <p>!note:</p> <p>\u2203x (S(x) -&gt; J(x)) is not correct \u5b83\u5305\u62ec\u4e86\u90a3\u4e9b\u4e0d\u5728\u8fd9\u4e2a\u73ed\u7ea7\u4e0a\u7684\u4eba\u4e5f\u4e0a\u4e86Java\u8bfe\u7a0b\uff0c\u4e0e\u9898\u610f\u4e0d\u7b26</p>"},{"location":"Courses/DM.html#15-nested-quantifiers","title":"1.5 Nested Quantifiers","text":""},{"location":"Courses/DM.html#prenex-normal-form","title":"Prenex normal form \u524d\u675f\u8303\u5f0f","text":"<p>How to obtain prenex normal form?1. Eliminate all occurrences of \u2192 and \u2194 from the formula in question.2. Move all negations inward such that, in the end, negation only appear as part of literals.3. Standardize the variables a part (when necessary).4. The prenex normal form can now be obtained by moving all quantifiers to the front of the formula.</p>"},{"location":"Courses/DM.html#example_1","title":"Example","text":"<p> \u7b2c\u4e8c\u4e2a\u4efb\u610fy\u53ef\u4ee5\u4e0d\u7528\u6362\u6210\u4efb\u610fu\uff0c\u76f4\u63a5\u628a\u4efb\u610fy\u63d0\u5230\u524d\u8fb9\u5c31OK </p>"},{"location":"Courses/DM.html#16-rules-of-inference","title":"1.6 Rules of Inference","text":""},{"location":"Courses/DM.html#example_2","title":"Example","text":"<p>Show that the premises \u201cA student in this class has not read the book,\u201d and \u201cEveryone in this class passed the first exam\u201d imply the conclusion \u201cSomeone who passed the first exam has not read the book.</p> <p>Solution: Let C(x) be \u201cx is in this class,\u201d B(x) be \u201cx has read the book,\u201d and P(x) be \u201cx passed the first exam.\u201d The premises are \u2203x(C(x) \u2227 \u00acB(x)) and \u2200x(C(x) \u2192 P(x)). The conclusion is \u2203x(P(x) \u2227 \u00acB(x)). These steps can be used to establish the conclusion from the premises.</p> <p>Step Reason:</p> <ol> <li>\u2203x(C(x) \u2227 \u00acB(x))     Premise</li> <li>C(a) \u2227 \u00acB(a)         Existential instantiation from (1)</li> <li>C(a)                 Simplification from (2)</li> <li>\u2200x(C(x) \u2192 P(x))  Premise</li> <li>C(a) \u2192 P(a)      Universal instantiation from (4)</li> <li>P(a)                 Modus ponens from (3) and (5)</li> <li>\u00acB(a)            Simplification from (2)</li> <li>P(a) \u2227 \u00acB(a)         Conjunction from (6) and (7)</li> <li>\u2203x(P(x) \u2227 \u00acB(x))     Existential generalization from (8)</li> </ol> <p>Fallacy \u8c2c\u8bba</p> <p>Universal modus ponens\u5e7f\u6cdb\u5047\u8a00\u63a8\u7406\uff1a</p> <p>\u2200x(P(x) \u2192 Q(x))  P(a), a \u662f\u57df\u4e2d\u7684\u4e00\u4e2a\u7279\u5b9a\u503c =&gt; Q(a)</p> <p>\u2200x(P(x) \u2192 Q(x))  \u00acQ(a), a \u662f\u57df\u4e2d\u7684\u4e00\u4e2a\u7279\u5b9a\u503c =&gt; \u00acP(a)</p>"},{"location":"Courses/DM.html#17-introduction-to-proofs","title":"1.7 Introduction to Proofs","text":"<p>\u5b9a\u7406(theorem):\u53ef\u4ee5\u8bc1\u660e\u4e3a\u771f\u7684\u6570\u5b66\u65ad\u8a00\u3002 \u731c\u60f3(conjecture):\u771f\u503c\u672a\u77e5\u7684\u6570\u5b66\u65ad\u8a00\u3002 \u8bc1\u660e(proof):\u5bf9\u5b9a\u7406\u4e3a\u771f\u7684\u5c55\u793a\u8fc7\u7a0b\u3002 \u516c\u7406(axiom):\u5047\u8bbe\u4e3a\u771f\u7684\u5e76\u53ef\u4f5c\u4e3a\u57fa\u7840\u7528\u6765\u8bc1\u660e\u5b9a\u7406\u7684\u547d\u9898\u3002 \u5f15\u7406(lemma):\u7528\u6765\u8bc1\u660e\u5176\u4ed6\u5b9a\u7406\u7684\u5b9a\u7406\u3002 \u63a8\u8bba(corollary):\u53ef\u4ee5\u88ab\u8bc1\u660e\u662f\u521a\u521a\u8bc1\u660e\u7684\u4e00\u4e2a\u5b9a\u7406\u7684\u7ed3\u8bba\u7684\u547d\u9898\u3002</p>"},{"location":"Courses/DM.html#18-proof-methods-and-strategy","title":"1.8 Proof Methods and Strategy","text":"<p>proof by contraposition \u53cd\u8bc1\u6cd5: a proof that p \u2192 q is true that proceeds by showing that p must be false when q is false proof by contradiction \u5f52\u8c2c\u6cd5: a proof that p is true based on the truth of the conditional statement \u00acp \u2192 q, where q is a contradiction exhaustive proof \u7a77\u4e3e\u6cd5: a proof that establishes a result by checking a list of all possible cases proof by cases: a proof broken into separate cases, where these cases cover all possibilities Mathematical induction \u6570\u5b66\u5f52\u7eb3\u6cd5\uff1a\u8be6\u89c1 5</p> <p>counterexample \u53cd\u4f8b</p>"},{"location":"Courses/DM.html#2-basic-structures-sets-functions-sequences-sums-and-matrices","title":"2 Basic Structures: Sets, Functions, Sequences, Sums, and Matrices","text":""},{"location":"Courses/DM.html#21-sets","title":"2.1 Sets","text":"<p>N = {0_, 1_, 2, 3, \u2026}, the set of all natural numbers \u81ea\u7136\u6570\u96c6Z = {\u2026 ,\u22122_,\u22121, _0, 1, 2, \u2026}, the set of all integers \u6574\u6570\u96c6Z+ = {1, 2, 3, \u2026}, the set of all positive integers \u6b63\u6574\u6570\u96c6Q = {p/q \u2223 p \u2208 Z, q \u2208 Z, and q \u2260 0}, the set of all rational numbers \u6709\u7406\u6570\u96c6 R, the set of all real numbers \u5b9e\u6570\u96c6R+, the set of all positive real numbers ** \u6b63\u5b9e\u6570\u96c6C, the set of all complex numbers** \u590d\u6570\u96c6</p> <p>\u3010Definition\u3011A set is an unordered collection of objects</p> <p>A \u2286 B\uff1a\u2200x(x \u2208 A  \u2192  x \u2208  B)</p> <p>For every set S,  \u2205 \u2286 S</p> <p>**S = T (set equality): **  S and T have the same elements\uff08\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u987a\u5e8f\u6216\u8005\u91cd\u590d\u5143\u7d20\u4e0d\u5f71\u54cd\u7ed3\u679c\uff09</p> <p>S \u2286 T (S is a subset\u5b50\u96c6 of T): every element of  S  is also an element of T</p> <p>_S \u2282 T (_S is a proper subset\u771f\u5b50\u96c6 of T): S is a subset of T and S \u2260 T </p> <p>finite set \u6709\u9650\u96c6: a set with n elements, where n is a nonnegative integer</p> <p>infinite set \u65e0\u9650\u96c6: a set that is not finite </p> <p>|S| (the cardinality/size of S): the number of elements in S \u6709\u9650\u96c6\u7684\u5927\u5c0f </p> <p>Power set \u03a1(S)\uff1aS\u7684\u6240\u6709\u5b50\u96c6</p> <p></p> <p>\u6b63\u786e</p> <p></p>"},{"location":"Courses/DM.html#example-1","title":"Example 1","text":"<p>What is the Cartesian product \u7b1b\u5361\u5c14\u79ef of A = {1, 2} and B = {_a, b, c}? Solution: _The Cartesian product  A \u00d7 B  is     A \u00d7 B = {(1, a_), (1_, b_), (1_, c_), (2_, a_), (2_, b_), (2_, c_)}. But the Cartesian product B \u00d7 A  is     B \u00d7 A = {(a, _1), (_a, _2), (_b, _1), (_b, _2), (_c, _1), (_c, _2)}. This is not equal to A \u00d7 B.</p>"},{"location":"Courses/DM.html#example-2","title":"Example 2","text":"<p>What is the Cartesian product A \u00d7 B \u00d7 C, where A = {0, 1}, B = {1, 2}, and C = {0, 1, 2}? _Solution: _The Cartesian product A \u00d7 B \u00d7 C consists of all ordered triples (_a, b, c), where a \u2208 A_, b \u2208 B, and c \u2208 C. Hence, A \u00d7 B \u00d7 C = {(0, 1, 0), (0, 1, 1), (0, 1, 2), (0, 2, 0), (0, 2, 1), (0, 2, 2), (1, 1, 0), (1, 1, 1), (1, 1, 2), (1, 2, 0), (1, 2, 1), (1, 2, 2 )}.</p> <p>Note that when A, B, and C are sets, (_A \u00d7 B_) \u00d7 C is not the same as A \u00d7 B \u00d7 C </p>"},{"location":"Courses/DM.html#example-3","title":"Example 3","text":"<p>Suppose that A = {1, 2}. It follows that A2 = {(1, 1), (1, 2), (2, 1), (2, 2)} and A3= {(1, 1, 1), (1, 1, 2), (1, 2, 1), (1, 2, 2), (2, 1, 1), (2, 1, 2), (2, 2, 1), (2, 2, 2)}.</p>"},{"location":"Courses/DM.html#22-set-operations","title":"2.2 Set Operations","text":"<p>\u5bb9\u65a5\u539f\u7406\uff1a|A \u222a B| = |A| + |B| \u2212 |A \u2229 B| </p> <p>Union\uff1a A\u222aB Intersection\uff1a A\u2229B Complement\uff1a U-A</p> <p>Difference\uff1aA\u975eB\u7684\u90e8\u5206</p> <p>Symmetric\uff1aA\u548cB\u4e2d\u4e0d\u91cd\u5408\u7684\u90e8\u5206</p> <p></p>"},{"location":"Courses/DM.html#example_3","title":"Example","text":"<p>Use set builder notation and logical equivalences to establish the first De Morgan law A\u2229B=A\u222aB. </p> <p>Solution: We can prove this identity with the following steps. </p> <p></p> <p>Let A, B, and C be sets. Show that A\u222a(B \u2229 C ) = (C\u222aB) \u2229 A. </p> <p></p>"},{"location":"Courses/DM.html#23-functions","title":"2.3 Functions","text":"<p>Functions are sometimes also called mappings or transformations.</p> <p>domain\u5b9a\u4e49\u57df\uff1bcodomain\u503c\u57df</p> <p>\u5373 \u2200a\u2200b ( f (a)=f (b) \u2192 a=b\u5355\u5c04 injection/one-to-one\uff1a\u5bf9X\u4e2d\u4efb\u610f\u4e24\u4e2a\u4e0d\u540c\u7684x1\u3001x2\uff0cf(x1)\u4e0d\u7b49\u4e8ef(x2)\uff0c\u96c6\u5408x\u7684\u5143\u7d20\u6570 &lt; \u96c6\u5408y\u5373 \u2200y \u2203x (f(x)=y)\u6ee1\u5c04 surjective/onto\uff1aY\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u90fd\u662fX\u4e2d\u67d0\u5143\u7d20\u7684\u50cf\u53cc\u5c04bijection\uff1a\u65e2\u5355\u53c8\u6ee1</p> <p></p> <p>inverse function\u9006\u51fd\u6570 f^-1^(b)=a iff f(a)=b</p> <p>\u53ea\u6709\u5f53f\u662f\u53cc\u5c04\u65f6\u624d\u6709\u9006\u51fd\u6570</p> <p>arbitrary means \u4efb\u610f</p>"},{"location":"Courses/DM.html#24-sequences-and-summations","title":"2.4 Sequences and Summations","text":""},{"location":"Courses/DM.html#25-cardinality-of-sets","title":"2.5 Cardinality of Sets","text":"<p>\u96c6\u5408\u7684\u57fa\u6570</p>"},{"location":"Courses/DM.html#251-introduction","title":"2.5.1 Introduction","text":"<p>\u5b9e\u6570\u96c6\u7684\u57fa\u6570&gt;\u6709\u7406\u6570 \u4e0d\u662f\u6240\u6709\u65e0\u9650\u96c6\u7684\u57fa\u6570\u662f\u4e00\u6837\u7684</p> <p>The sets A and B have the same cardinality (denoted by | A |= | B |) iff there exists a one-to-one correspondence (bijection) from A to B. \u57fa\u6570\u76f8\u540c\uff0c\u5f53\u4e14\u4ec5\u5f53\u6709\u4e00\u4e00\u5bf9\u5e94\u5173\u7cfb\u3002</p> <p>\u5982\u679cB\u662fA\u7684\u5b50\u96c6\uff0c\u5219|B|\u2264|A|;</p>"},{"location":"Courses/DM.html#252-countable-sets","title":"2.5.2 Countable sets","text":"<p>Countable sets \u53ef\u6570\u96c6\uff1aA set that is either finite or has the same cardinality as the set of positive integers \u548c\u6b63\u6574\u6570\u96c6\u7684\u57fa\u6570\u76f8\u540c\u7684\u96c6\u5408\u662f\u53ef\u6570\u7684</p> <p>Let the cardinality of a countably infinite set S be \\(\\aleph\\).  We write |S|=\\(\\aleph_0\\) and say that S has cardinality \"alepha null\".\u200b</p> <p>An infinite set is countable if and only if it is possible to list the elements of the set in a sequence (indexed by the positive integers) \u65e0\u9650\u96c6\u53ef\u6570\uff0c\u5f53\u4e14\u4ec5\u5f53\u53ef\u4ee5\u7528\u5e8f\u5217\u5217\u51fa\u96c6\u5408\u7684\u5143\u7d20</p>"},{"location":"Courses/DM.html#example-1_1","title":"Example 1","text":""},{"location":"Courses/DM.html#example-2_1","title":"Example 2","text":"<ul> <li>The Positive Rational Numbers are Countable</li> </ul> <ul> <li>The set of all rational numbers Q, positive and negative, is countable infinite. \u6240\u6709\u6709\u7406\u6570\u96c6\u662f\u65e0\u9650\u53ef\u6570\u96c6</li> <li>The set of rational numbers and the set of natural numbers have same cardinality\uff0cnamely |Q| = |N| \u6709\u7406\u6570\u96c6\u548c\u81ea\u7136\u6570\u96c6\u57fa\u6570\u76f8\u540c</li> </ul>"},{"location":"Courses/DM.html#253-uncountable-sets","title":"2.5.3 Uncountable sets","text":"<p>\u3010Theorem\u3011The set of real numbers (between 0 and 1) is uncountable. \u5b9e\u6570\u96c6\u4e0d\u53ef\u6570</p> <p>cantor diagonalization argument \u5bf9\u89d2\u7ebf\u8bba\u8bc1</p>"},{"location":"Courses/DM.html#uncomputable","title":"(Un)Computable","text":"<p>A function is computable \u53ef\u8ba1\u7b97 if there is a computer program in some programming language that finds the values of this function. If a function is not computable we say it is uncomputable.</p>"},{"location":"Courses/DM.html#continuum-hypothesis","title":"Continuum Hypothesis \u8fde\u7eed\u6027\u5047\u8bbe","text":"<ul> <li>\u4efb\u610f\u96c6\u5408\u5176\u6240\u6709\u5b50\u96c6\u7684\u57fa\u6570\u5927\u4e8e\u539f\u6765\u96c6\u5408\u7684\u57fa\u6570</li> <li>\u6b63\u6574\u6570\u96c6\u7684\u6240\u6709\u5b50\u96c6\u548c\u5b9e\u6570\u96c6\u6709\u76f8\u540c\u7684\u57fa\u6570</li> </ul> <p> \u4e0d\u5b58\u5728\u4e00\u4e2a\u65e0\u7a77\u96c6\u5408\uff0c\u5b83\u7684\u52bf\u6bd4\u81ea\u7136\u6570\u96c6(\\(\\aleph_0\\))\u7684\u52bf\u5927\uff0c\u6bd4\u5b9e\u6570\u96c6\uff08\u8fde\u7eed\u7edf\uff09\u52bf\u5c0f</p> <p>The set of all functions from \\(\\mathbb{N}\\) to \\(\\mathbb{N}\\) is uncountably infinite, with a cardinality of \\({2^{\\aleph_0}}\\), the same as the cardinality of the continuum</p>"},{"location":"Courses/DM.html#conclusion","title":"Conclusion","text":""},{"location":"Courses/DM.html#3-algorithms","title":"3 Algorithms","text":""},{"location":"Courses/DM.html#31-algorithms","title":"3.1 Algorithms","text":"<p>Searching Algorithms; Sorting; String Matching; Greedy Algorithms</p> <p>Properties of Algorithms: input, output, definiteness, correctness, finiteness, effectiveness, generality</p>"},{"location":"Courses/DM.html#32-the-growth-of-functions","title":"3.2 The Growth of Functions","text":"<p>f(x) is O(g(x)) : the fact that |f(x)| \u2264 C|g(x)| for all x &gt; k for some constants C and kf(x) is \ud835\udec0(g(x)) : the fact that |f(x)| \u2265 C|g(x)| for all x &gt; k for some positive constants C and k f(x) is \ud835\udeaf(g(x)) :the fact that f(x) is both _O(g(x)) and \u03a9(g(x)) </p>"},{"location":"Courses/DM.html#big-o","title":"Big-O","text":"<p>\\(log(n!) = O(nlog n)\\) </p>"},{"location":"Courses/DM.html#big-omega-and-big-theta-notation","title":"Big-Omega and Big-Theta Notation","text":"<p>\\(\\omega\\)\uff1a\u589e\u7387\u7684\u4e0b\u754c</p> <p></p> <p>f(x) is \\(\\Omega(g(x))\\) if and only if g(x) is O(f(x))</p> <p></p>"},{"location":"Courses/DM.html#example_4","title":"example","text":""},{"location":"Courses/DM.html#33-complexity-of-algorithms","title":"3.3 Complexity of Algorithms","text":""},{"location":"Courses/DM.html#4-number-theory-and-cryptography","title":"4 Number Theory and Cryptography","text":""},{"location":"Courses/DM.html#41-divisibility-and-modular-arithmetic","title":"4.1 Divisibility and Modular Arithmetic","text":"<p>a\u2223b\uff1a a divides b = b/a, b\u662f\u5927\u7684\u88ab\u9664\u6570  </p> <p></p> <p></p> <p></p> <p></p> <p>a div d: a \u6574\u9664d\u4e3aq</p> <p>\u540c\u4f59\u5b9a\u7406 congruence</p> <p>\u3010\u5b9a\u7406\u56db\u3011 a \u2261 b (mod m)\uff0c\u5219a=b+km</p> <p></p> <p></p> <p>\u6a21m\u7b97\u672f\uff1a\u6ee1\u8db3</p> <p></p>"},{"location":"Courses/DM.html#42-integer-representations-and-algorithms","title":"4.2 Integer Representations and Algorithms","text":"<p>n\u7684b\u8fdb\u5236\u5c55\u5f00\u5f0f</p>"},{"location":"Courses/DM.html#43-primes-and-greatest-common-divisors","title":"4.3 Primes and Greatest Common Divisors","text":"<p>relatively prime\u4e92\u7d20prime \u7d20\u6570composite \u5408\u6570Mersenne prime \u6885\u68ee\u7d20\u6570: a prime of the form 2p _\u2212 1, where p is primeTrial Division \u8bd5\u9664\u6cd5</p> <p>The Sieve of Eratosthenes \u57c3\u62c9\u6258\u65af\u7279\u5c3c\u7b5b\u6cd5</p> <p>100\u5185\u7b5b2\u30013\u30015\u30017\u6574\u9664\u7684\u6570</p> <p>\u6b27\u51e0\u91cc\u5f97\u5b9a\u7406\uff1a\u7d20\u6570\u7684\u65e0\u7a77\u6027 \u6885\u68ee\u7d20\u6570 mersenne primes</p> <p>\u3010Prime number theorem \u7d20\u6570\u5b9a\u7406\u3011\uff1a\u968f\u673a\u9009\u53d6\u4e00\u4e2a\u5c0f\u4e8en\u7684\u6b63\u6574\u6570\u662f\u7d20\u6570\u7684\u6982\u7387\u4e3a\\(\\frac{1}{lnn}\\)</p> <p>gcd(Greatest common divisor)\uff1a\u6700\u5927\u516c\u7ea6\u6570</p> <p></p> <p>lcm(least common divisor)\uff1a\u6700\u5c0f\u516c\u500d\u6570</p> <p></p> <p></p>"},{"location":"Courses/DM.html#the-euclidean-algorithm","title":"The Euclidean Algorithm \u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5","text":"<p>\u8d1d\u7956\u5b9a\u7406</p> <p></p> <p>Bezout coefficients of a and b: sa + tb = gcd(a, b)</p> <p>a \u2261 b (mod m) (a is congruent to b modulo m): a \u2212 b is divisible by m\uff0c\u5373a-b\u80fd\u88abm\u6574\u9664</p>"},{"location":"Courses/DM.html#example_5","title":"Example","text":""},{"location":"Courses/DM.html#44-solving-congruences","title":"4.4 Solving Congruences \u6c42\u89e3\u540c\u4f59\u65b9\u7a0b","text":"<p>sa + tm = 1 (mod m) \u2192 s\u662fa mod m\u7684\u9006\uff0c\u6ee1\u8db3 sa\u22611(mod m)</p> <ol> <li>\u7528\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u7b97\u6a21\u7684\u9006s</li> <li>\u5de6\u53f3\u4e24\u8fb9\u540c \u2716s</li> <li>\u7b49\u5f0f\u53f3\u8fb9\u5373\u4e3ax\u7684\u89e3</li> </ol> <p></p> <p></p> <p>\u8be5\u89e3\u6cd5a\uff0cm\u8981\u6c42\u4e92\u7d20\uff0c\u5373gcd(a,m)=1</p>"},{"location":"Courses/DM.html#chinese-remainder-theorem","title":"Chinese remainder theorem \u4e2d\u56fd\u5269\u4f59\u5b9a\u7406","text":"<p>\u5176\u4e2d, = \u4e00\u4e2a\u6570(mod m)Back substitution \u53cd\u5411\u66ff\u6362 \u2192 \u7ffb\u8bd1\u6210\u4e00\u4e2a\u540c\u4f59\u5f0f</p> <p>\u540c\u4f59\u65b9\u7a0b\u91cd\u5199\u4e3a</p> <p></p> <p>pseudo prime to the base  b \u4ee5b\u4e3a\u57fa\u5e95\u7684\u4f2a\u7d20\u6570: a composite integer  n such that  \\(bn\u22121 \u2261 1 (\\mod n)\\) </p>"},{"location":"Courses/DM.html#fermats-little-theorem","title":"Fermat's little theorem \u8d39\u9a6c\u5c0f\u5b9a\u7406","text":"<p>Carmichael \u5361\u7c73\u5207\u5c14\u6570</p>"},{"location":"Courses/DM.html#5-induction-and-recursion","title":"5 Induction and Recursion","text":""},{"location":"Courses/DM.html#51-mathematical-induction","title":"5.1 Mathematical Induction","text":"<p>Mathematical Induction \u6570\u5b66\u5f52\u7eb3\u6cd5</p> <p>(P(1)\u2227\u2200k(P(k)\u2192P(k+1)))\u2192\u2200n P(n)</p> <p>inductive hypothesis \u5f52\u7eb3\u5047\u8bbe</p>"},{"location":"Courses/DM.html#52-strong-induction-and-well-ordering","title":"5.2 Strong Induction and Well-Ordering","text":"<p>\u5f3a\u5f52\u7eb3\u6cd5\uff08\u7b2c\u4e8c\u5f52\u7eb3\u6cd5\uff09\u548c\u826f\u5e8f\u6027</p> <p>(P(\\(n_0\\))\u2227\u2200k(k&gt;=\\(n_0\\)\u2227P(\\(n_0\\))\u2227P(\\(n_0\\)+1)\u2227\u00b7\u00b7\u00b7\u2227P(k)\u2192P(k+1)))\u2192\u2200n P(n)</p> <p></p> <p>\u826f\u5e8f\u6027\uff1aEvery nonempty set of nonnegative integers has the smallest element. \u6bcf\u4e2a\u975e\u7a7a\u7684\u81ea\u7136\u6570\u96c6\u90fd\u6709\u6700\u5c0f\u7684\u5143\u7d20\u3002</p> <p></p> <p></p> <p></p> <p>\u6570\u5b66\u5f52\u7eb3\u6cd5\u548c\u7b2c\u4e8c\u6570\u5b66\u5f52\u7eb3\u6cd5\u7684\u6709\u6548\u6027\u6765\u81ea\u826f\u5e8f\u6027\u539f\u7406\u3002 \u5b9e\u9645\u4e0a\uff0c\u6570\u5b66\u5f52\u7eb3\u6cd5\u3001\u7b2c\u4e8c\u6570\u5b66\u5f52\u7eb3\u6cd5\u548c\u826f\u5e8f\u6027\u662f\u7b49\u4ef7\u7684\u539f\u7406</p>"},{"location":"Courses/DM.html#53-recursive-definitions-and-structural-induction","title":"5.3 Recursive Definitions and Structural Induction","text":"<p>\u9012\u5f52\u5b9a\u4e49\u548c\u7ed3\u6784\u5f52\u7eb3\u6cd5</p> <p>\u8bb0\\(f_n=n!\\)</p> <p></p> <p>LAME'S Theorem</p> <p></p> <p>Well-formed formulae for compound proposition:</p> <p>The set of well-formed formulae in propositional logic involving T, F, propositional variables, and operators from the set {\u00ac,\u2227,\u2228,\u2192,\u2194}. </p> <p></p> <p>Structural Induction \u7ed3\u6784\u5f52\u7eb3</p> <p></p> <p>Generalized Induction \u5e7f\u4e49\u5f52\u7eb3\u6cd5</p> <p>Generalized induction is used to prove results about sets other than the integers that have the well-ordering property.</p> <p></p> <p>lexicographic ordering \u5b57\u5178\u5e8f</p>"},{"location":"Courses/DM.html#54-recursive-algorithms","title":"5.4 Recursive Algorithms","text":"<p>\u9012\u5f52\u7b97\u6cd5</p> <p>geometric progression:\u51e0\u4f55\u6570\u5217\uff08\u7b49\u6bd4\uff09</p> <p>arithmetic progression:\u7b49\u5dee</p>"},{"location":"Courses/DM.html#6-counting","title":"6 Counting","text":""},{"location":"Courses/DM.html#61-the-basics-of-counting","title":"6.1 The Basics of Counting","text":"<p>\u4e58\u79ef\u539f\u5219</p> <p>\u6839\u636e\u4e58\u6cd5\u539f\u5219\uff0c\u4ecem\u4e2a\u5143\u7d20\u7684\u96c6\u5408\u6620\u5c04\u5230n\u4e2a\u5143\u7d20\u7684\u96c6\u5408\u6709n^m^\u4e2a\u4e0d\u540c\u7684\u51fd\u6570\uff1b\u6709n(n-1)\u2026\u2026(n-m+1)\u4e2a\u4e0d\u540c\u7684\u5355\u5c04\u51fd\u6570\uff08m\u2264n\uff09\uff1b\u6709 $$ n^m-C_n^1(n-1)^m+C_n^2(n-2)^m-...+(-1)^{n-1}C_n^{n-1}*1^m $$ \u4e2a\u4e0d\u540c\u7684\u6ee1\u5c04\u51fd\u6570\uff08n\u2264m\uff09\u8be6\u89c18.6</p> <p></p> <p>\u6c42\u548c\u539f\u5219</p> <p></p> <p>The subtraction rule is also known as the principle of inclusion\u2013exclusion</p> <p>\u51cf\u6cd5\u539f\u5219\u53c8\u79f0\u5bb9\u65a5\u539f\u7406</p> <p></p> <p>\u9664\u6cd5\u539f\u5219</p> <p></p>"},{"location":"Courses/DM.html#62-the-pigeonhole-principle","title":"6.2 The Pigeonhole Principle","text":"<p>\u9e3d\u5de2/\u6d1e\u539f\u7406</p> <p></p> <p></p> <p>\u5e7f\u4e49\u9e3d\u6d1e\u539f\u7406\uff1a\u628aN\u4e2a\u7269\u54c1\u653e\u5230k\u4e2a\u7bb1\u5b50\u4e2d\uff0c\u81f3\u5c11\u6709\u4e00\u4e2a\u7bb1\u5b50\u4e2d\u5305\u542b\u81f3\u5c11\\(\u2308N/k\u2309\\) \u4e2a\u7269\u54c1\uff08\u5411\u4e0a\u53d6\u6574\uff09</p> <p></p> <p></p> <p>Example</p> <p>\u57286\u4e2a\u4eba\u7684\u7fa4\u4f53\u4e2d\uff0c\u6bcf\u4e24\u4e2a\u4eba\u4e0d\u662f\u670b\u53cb\u5c31\u662f\u654c\u4eba\uff0c\u90a3\u4e48\u67093\u4e2a\u5171\u540c\u7684\u670b\u53cb\u6216\u8005\u654c\u4eba</p>"},{"location":"Courses/DM.html#63-permutations-and-combinations","title":"6.3 Permutations and Combinations","text":"<p>\u6392\u5e8f\u4e0e\u7ec4\u5408</p> <p>\u7ec4\u5408\u6570\\(C(n,r)=C(n,n-r)\\)\u8bc1\u660e\uff1a\u91cd\u590d\u8ba1\u6570\u65b9\u6cd5\u6216\u8005\u53cc\u5c04\u65b9\u6cd5</p> <p></p>"},{"location":"Courses/DM.html#64-binomial-coefficients","title":"6.4 Binomial Coefficients","text":"<p>\u4e8c\u9879\u5f0f\u5b9a\u7406</p> <p>\u5e15\u65af\u5361\u6052\u7b49\u5f0f pascal's identity</p> <p>Vandermonde's Identity \u8303\u5fb7\u8499\u5fb7\u6052\u7b49\u5f0f</p> <p></p> <p></p> <p></p> <p>\u8bc1\u660e\uff1a\u957f\u5ea6\u4e3an+1\u7684\u4f4d\u4e32\u91cc\u6709r+1\u4e2a1\uff0c\u6700\u540e\u4e00\u4e2a1\u5728\u7b2ck\u4f4d\u3002\u90a3\u4e48\u524dk-1\u4f4d\u5fc5\u987b\u6709r\u4e2a1\uff0c\u5373\u6709C(k-1, r)\u79cd\u60c5\u51b5\uff0c\u540c\u65f6\u5bf9\u4e8e\u6700\u540e\u4e00\u4e2a1\uff0ck\u6700\u5c0f\u4e3ar+1\uff0c\u6700\u5927\u4e3an+1\uff0c\u5219\u628a\u6240\u6709\u60c5\u51b5\u76f8\u52a0\uff0c=\u5de6\u8fb9</p>"},{"location":"Courses/DM.html#65-generalized-permutations-and-combinations","title":"6.5 Generalized Permutations and Combinations","text":"<p>permutation \u6392\u5217</p> <p>Combination with repetition n\u4e2a\u5143\u7d20\u96c6\u5408\u4e2d\u5141\u8bb8\u91cd\u590d\u7684r\u7ec4\u5408\u4e2a\u6570: \\(H_n^r=C_{n-1+r}^r=C_{n-1+r}^{n-1}\\)</p> <p></p> <p></p> <ol> <li>Distinguishable objects and distinguishable boxes\u4e0d\u540c\u7269\u54c1\u4e0d\u540c\u7bb1\u5b50</li> </ol> <p></p> <ol> <li>Indistinguishable objects and distinguishable boxes\u76f8\u540c\u7269\u54c1\u4e0d\u540c\u7bb1\u5b50</li> </ol> <p></p> <ol> <li>Distinguishable objects and indistinguishable boxes\u4e0d\u540c\u7269\u54c1\u76f8\u540c\u7bb1\u5b50</li> </ol> <p>\uff1a\u5c06n\u4e2a\u4e0d\u540c\u7684\u7269\u54c1\u653e\u8fdbk\u4e2a\u76f8\u540c\u7684\u7bb1\u5b50</p> <p>\\(S(n,j)j!\\)\u200b\uff1a\u5c06n\u4e2a\u4e0d\u540c\u7684\u7269\u54c1\u653e\u8fdbj\u4e2a\u76f8\u540c\u7684\u7bb1\u5b50\uff08\u6ca1\u6709\u7bb1\u5b50\u662f\u7a7a\u7684\uff09</p> <p></p> <p></p> <ol> <li>Indistinguishable objects and indistinguishable boxes\u76f8\u540c\u7269\u54c1\u76f8\u540c\u7bb1\u5b50</li> </ol> <p>\u6ca1\u6709\u516c\u5f0f\uff0c\u624b\u7b97</p> <p>Eg, 6\u672c\u76f8\u540c\u7684\u4e66\u653e\u52304\u4e2a\u76f8\u540c\u7684\u76d2\u5b50\u4e2d\uff0c\u6709{6}, {5,1}, {4,2}, {4,1,1}, {3,3}, {3,2,1}, {3,1,1,1}, {2,2,2}, {2,2,1,1}\uff0c\u51719\u79cd\u60c5\u51b5</p>"},{"location":"Courses/DM.html#8-advanced-counting-techniques","title":"8 Advanced Counting Techniques","text":""},{"location":"Courses/DM.html#81-applications-of-recurrence-relations","title":"8.1 Applications of Recurrence Relations","text":"<p>\u9012\u63a8\u5173\u7cfb</p>"},{"location":"Courses/DM.html#82-solving-linear-recurrence-relations","title":"8.2 Solving Linear Recurrence Relations","text":"<p>\u6c42\u89e3\u7ebf\u6027\u9012\u63a8\u5173\u7cfb</p> <p></p> <p>Fibonacci numbers:</p> <p>linear\u7ebf\u6027\uff1a\u53f3\u8fb9\u662f\\(a_k\\)*c\u4e4b\u548c+F(n)</p> <p>homogeneous\u540c\u7c7b\uff1a\u90fd\u662f\u5f62\u5982\\(s_j*s\\)\u7684\u9879</p> <p>constant coefficients\u5e38\u7cfb\u6570\uff1a\u5bf9\u6bcf\u4e2a\\(a_k\\)\u200b\u524d\u7684\u7cfb\u6570\u90fd\u662f\u5e38\u6570</p> <p>degree k\uff1a\u5de6\u8fb9\\(a_n\\)\uff0c\u53f3\u8fb9\u6700\u591a\u8ffd\u6eaf\u5230\u524dk\u9879\u5373\\(a_{n-k}\\)</p> <p></p> <p></p> <p></p> <p></p> <p>\u5b9a\u74066\u662f\u7279\u89e3\u7684\u5f62\u5f0f\uff0c\u548cF(n)\u6709\u5173</p> <p></p> <p></p> <p>\u6700\u540e\\(a_n\\)\u8981\u628a\u901a\u89e3\\(a_n^{(h)}\\)\u548c\u7279\u89e3\\(a_n^{(p)}\\)\u76f8\u52a0</p>"},{"location":"Courses/DM.html#84-generating-functions","title":"8.4 Generating Functions","text":"<p>\u751f\u6210\u51fd\u6570</p> <p></p>"},{"location":"Courses/DM.html#extended-binomial-theorem","title":"Extended Binomial Theorem \u62d3\u5c55\u4e8c\u9879\u5f0f\u7cfb\u6570","text":"<p>\u5229\u7528\u516c\u5f0f\uff0c\u5176\u4e2d\\(a_k=1\\)</p> <p></p> <p>\u5229\u7528\u516c\u5f0f\uff0c\u5176\u4e2d\\(c_k\\)\u5168\u4e3a1\u7684\u751f\u6210\u51fd\u6570\u4e3a\\(\\frac{1}{1-x}\\)</p> <p></p>"},{"location":"Courses/DM.html#solve-recurrence-relations","title":"Solve Recurrence Relations","text":"<p>9.6: Using generating functions to solve recurrences - Mathematics LibreTexts\u8fd9\u4e2a\u5199\u7684\u66f4\u6613\u4e8e\u7406\u89e3</p>"},{"location":"Courses/DM.html#counting-problems","title":"Counting Problems","text":"\\[ G(x)=(1+x+x^2+x^3+...)^n=\\frac{1}{(1-x)^n} \\]"},{"location":"Courses/DM.html#example_6","title":"Example","text":""},{"location":"Courses/DM.html#85-inclusionexclusion","title":"8.5 Inclusion\u2013Exclusion","text":"<p>\u5bb9\u65a5\u539f\u7406</p> <p>\u5411\u4e0b\u53d6\u6574</p> <p></p>"},{"location":"Courses/DM.html#86-applications-of-inclusionexclusion","title":"8.6 Applications of Inclusion\u2013Exclusion","text":"<p>m\u4e2a\u4e1c\u897f\u5206\u914d\u7ed9n\u4e2a\u4eba\uff0c\u6bcf\u4e2a\u4eba\u81f3\u5c11\u6709\u4e00\u4ef6\u4e1c\u897f\u7684\u65b9\u6cd5\u603b\u6570\uff1a</p> <p></p> <p>\u5373\u6620\u4e0a\u51fd\u6570onto/surgective function m \u2192n\uff08\u6bcf\u4e2ay\u81f3\u5c11\u6709\u4e00\u4e2ax\u4e0e\u4e4b\u5bf9\u5e94\uff09</p> <p>derangement \u9519\u6392</p> <p></p> <p>\u5373 \\(\u2248 n!/e\\)\u6700\u63a5\u8fd1\u7684\u6574\u6570</p>"},{"location":"Courses/DM.html#9-relations","title":"9 Relations","text":""},{"location":"Courses/DM.html#91-relations-and-their-properties","title":"9.1 Relations and Their Properties","text":"<p>binary relation from A to B \u4e8c\u5143\u5173\u7cfb </p> <ul> <li>\u4e8c\u5143\u5173\u7cfb\u662f\u4e00\u4e2a\u96c6\u5408\uff0c R\u5305\u542b\u4e8eA\u2716B</li> <li>n\u5143\u5173\u7cfb\u5c31\u662fA1\u2716A2\u2716\u00b7\u00b7\u00b7\u2716An\u7684\u5b50\u96c6</li> </ul> <p></p>"},{"location":"Courses/DM.html#properties-of-binary-relations","title":"Properties of binary relations","text":"<p>reflexive \u81ea\u53cd\u6027</p> <p></p> <p>\u81ea\u53cd\u5173\u7cfb\uff1a\u77e9\u9635\u4e3b\u5bf9\u89d2\u7ebf\u90fd\u662f1\uff1b\u6709\u5411\u56fe\u6bcf\u4e2a\u9876\u70b9\u90fd\u6709\u73af</p> <p>irreflexive \u53cd\u81ea\u53cd\u6027</p> <p>\u53cd\u81ea\u53cd\u5173\u7cfb\uff1a\u77e9\u9635\u4e3b\u5bf9\u89d2\u7ebf\u90fd\u662f0\uff1b\u5b58\u5728\u65e2\u4e0d\u662f\u81ea\u53cd\u4e5f\u4e0d\u662f\u53cd\u81ea\u53cd\u7684\u5173\u7cfb</p> <p>symmetric &amp; antisymmetric \u5bf9\u79f0\u6027\u548c\u53cd\u5bf9\u79f0\u6027</p> <p></p> <p>\u5bf9\u79f0\u6027\uff1a\u77e9\u9635\u4e3b\u5bf9\u89d2\u7ebf\u4e3a\u5bf9\u79f0\u8f74</p> <p>\u53cd\u5bf9\u79f0\u6027\uff0c\u4e3b\u5bf9\u89d2\u7ebf\u968f\u610f\uff0c\u4ee5\u4e3b\u5bf9\u89d2\u7ebf\u4e3a\u8f74\u7684\u4e00\u8fb9\u5982\u679c\u662f1\uff0c\u53e6\u4e00\u8fb9\u5fc5\u987b\u662f0</p> <p>\u5bf9\u79f0\u6027\u548c\u53cd\u5bf9\u79f0\u6027\u4e0d\u662f\u4e92\u65a5\u7684</p> <p>transitive \u4f20\u9012\u6027</p> <p></p> <p>R\u7684n\u6b21\u5e42</p> <p></p> <p></p> <p>\u5bf9\u4e8en\u4e2a\u5143\u7d20\u7684\u96c6\u5408\uff0c\u4ee5\u4e0b\u5173\u7cfb\u6709\u591a\u5c11\u79cd\uff1f</p> reflexive \u81ea\u53cd irreflexive \u53cd\u81ea\u53cd symmetric and reflexive \u5bf9\u79f0+\u81ea\u53cd \\(2^{n^2-n}\\) \\(2^{n^2-n}\\) $$ 2^{n(n-1)/2}$$ symmetric \u5bf9\u79f0 antisymmetric \u53cd\u5bf9\u79f0 asymmetric \u975e\u5bf9\u79f0 \\(2^n\u27162^{\\frac{n^2-n}{2}}= 2^{\\frac{n(n+1)}{2}}\\) \\(2^n*3^{\\frac{n(n-1)}{2}}\\) \\(3^{C(n, 2)}\\) \\[ C(n, 2)=n(n-1)/2 \\] <p></p> <ul> <li>n\u4e2a\u5143\u7d20\u7684\u96c6\u5408A\u4e0a\u5171\u6709\\(2^{n^2}\\)\u200b\u79cd\u4e8c\u5143\u5173\u7cfb</li> </ul>"},{"location":"Courses/DM.html#example_7","title":"Example","text":"<p>\u6b63\u6574\u6570\u7684\u6574\u9664\u5173\u7cfb\u662f\uff1areflexive, symmetric, transitive</p> <p>\u4ecem\u4e2a\u5143\u7d20\u7684\u96c6\u5408\u5230n\u4e2a\u5143\u7d20\u7684\u96c6\u5408\u7684\u4e0d\u540c\u5173\u7cfb\u6709\\(2^{mn}\\)\u4e2a</p>"},{"location":"Courses/DM.html#93-representing-relations","title":"9.3 Representing Relations","text":""},{"location":"Courses/DM.html#combining-relations","title":"Combining relations","text":"<p>\\(R^{-1}\\)\uff1aR\u7684\u9006\uff0c\\(R^{\u22121}=\\)\u200b{(y,x)\u2223(x,y)\u2208R}</p> <p></p> <p>A\u2a00B\uff0c\u4e24\u4e2a\u77e9\u9635\u7684\u5e03\u5c14\u4e58\u79ef</p> <p></p> <p>A\u2a01B\uff1a\u5f02\u6216\uff0c\u4e0d\u4e00\u6837\u5c31\u51fa1</p> <p>\\(M_{S\u2218R}= M_R \u00b7M_S = M_R \u2a00M_S\\)</p> <p>\\(R^{n+1}=R^n\u2218R\\)\u200b\u200b \u2014\u2014\u5173\u7cfbR\u7684\u5e42\u96c6</p> <p></p> <ul> <li>S\u2218R\u2260R\u2218S</li> </ul> <p>\u3010\u96c6\u5408\u8bba\u3011\u5173\u7cfb\u5e42\u8fd0\u7b97 ( \u5173\u7cfb\u5e42\u8fd0\u7b97 | \u5173\u7cfb\u5e42\u8fd0\u7b97\u793a\u4f8b | \u5173\u7cfb\u5e42\u8fd0\u7b97\u6027\u8d28 )_\u5173\u7cfb\u7684\u5e42\u8fd0\u7b97-CSDN\u535a\u5ba2</p> <p></p>"},{"location":"Courses/DM.html#94-closures-of-relations","title":"9.4 Closures of Relations","text":"<p>Reflective Closures \u81ea\u53cd\u95ed\u5305 \\(r(R)\\)\u200b</p> <p>\u3010 Corollary \u3011\\(R = R \u2229 I_A\\)  \u21d4 R is a reflexive relation </p> <p></p> <p>Symmetric Closures \u5bf9\u79f0\u95ed\u5305 \\(s(R)\\)\u200b</p> <p>\u3010 Corollary \u3011\\(R = R \u222a R^{-1}\\)\u200b \u21d4 R is a symmetric relation </p> <p></p> <p>Transitive Closures \u4f20\u9012\u95ed\u5305 </p> <p></p> <p>R^\u2217^ (connectivity relation \u8fde\u901a\u6027\u5173\u7cfb): the relation consisting of those ordered pairs (a, b) such that there is a path from a to b</p> <p></p> <p>\u4f20\u9012\u95ed\u5305\u7b49\u4e8e\u8fde\u901a\u6027\u5173\u7cfb  t(R)=R^*^</p> <p></p> <p>\u4f20\u9012\u95ed\u5305\u76840-1\u77e9\u9635\uff08\u77e9\u9635\u5e76</p> <p></p> <p></p>"},{"location":"Courses/DM.html#warshalls-algorithm","title":"Warshall's algorithm \u6c83\u820d\u5c14\u7b97\u6cd5","text":"<p>use the concept of the interior vertices of a path  \u7528\u5230\u4e86\u4e00\u6761\u8def\u5f84\u5185\u90e8\u9876\u70b9\u7684\u6982\u5ff5</p> <p>\u5185\u90e8\u9876\u70b9\uff1a\u4e00\u6761\u8def\u5f84\u53bb\u6389\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u5982acdafbj\u7684\u5185\u90e8\u9876\u70b9cdafb</p> <p>&lt;\u77e9\u9635\u4e2d\\(\\(a_{ij}={0,1}\\)\\)\u8868\u793a\u6709\u4ecei\u5230j\u7684\u8def\u5f84</p> <p></p> <p>k\u786e\u5b9a\u7684\u60c5\u51b5\u4e0b\uff0c\u539f\u5148\u77e9\u9635\u662f1\u7684\u8fd8\u662f1\uff0c\u53ea\u8981\u68c0\u67e5\u7b2ck\u5217\u662f1\u7684\u884c\u4e2d\u76840\u6709\u6ca1\u6709\u53d8\u5316</p> <p>total number of bit operations\uff08\u65f6\u95f4\u590d\u6742\u5ea6</p>"},{"location":"Courses/DM.html#95-equivalence-relations","title":"9.5 Equivalence Relations","text":""},{"location":"Courses/DM.html#equivalence-relations","title":"Equivalence Relations \u7b49\u4ef7\u5173\u7cfb","text":"<p>equivalent \u7b49\u4ef7: if R is an equivalence relation, a is equivalent to b  if <code>aRb</code></p> <p>\u7b49\u4ef7\u5173\u7cfb\uff1a\u81ea\u53cd+\u5bf9\u79f0+\u4f20\u9012</p> <p></p> <ul> <li>\u6a21m\u540c\u4f59\u662f\u7b49\u4ef7\u5173\u7cfb R={(a,b) | a\u2261b(mod m), a,b\u2208Z}</li> </ul> <p></p>"},{"location":"Courses/DM.html#equivalence-classes","title":"Equivalence Classes \u7b49\u4ef7\u7c7b","text":"<p>representative\u4ee3\u8868\u5143\\([a]_R\\) (equivalence class of a with respect to R ) \u7b49\u4ef7\u7c7b: the set of all elements of A that are equivalent to a</p> <p>[a]m (congruence class modulo m)\u6a21m\u7684\u540c\u4f59\u7c7b</p> <p>\u7b49\u4ef7\u5173\u7cfb\u7684\u6570\u91cf\uff1apartition of a set \u6709\u4e00\u4e2a\u5206\u5316\u5c31\u6709\u4e00\u4e2a\u7b49\u4ef7\u5173\u7cfb</p> <p></p> <p>5\u4e2a\uff083\u4e2a\u5143\u7d20\u96c6\u5408\u7684\u7b49\u4ef7\u5173\u7cfb\u67095\u4e2a\uff09</p> <p></p>"},{"location":"Courses/DM.html#questions","title":"Questions","text":"<p>1 R={(a,b) | a\u2261b(mod m), a,b\u2208Z},  \\(pr(Z)={[0]_m,[1]_m,\u00b7\u00b7\u00b7\u00b7,[m-1]_m}\\)\u200b</p> <p>2 If |A|=n, the p(n)=?  p(n): the number of different equivalence relations on a set with n elements</p> <p>\\(p(n)=B_n=\\sum_{k=0}^{n}C(n,k)\\)</p>"},{"location":"Courses/DM.html#96-partial-orderings","title":"9.6 Partial Orderings","text":""},{"location":"Courses/DM.html#partial-orderings","title":"Partial Orderings","text":"<p>poset (S, R)\u504f\u5e8f\u96c6: a set S and a partial ordering R on this set</p> <p>\u504f\u5e8f\uff1a\u81ea\u53cd+\u53cd\u5bf9\u79f0+\u4f20\u9012</p> <p>Example: </p> <p></p> <p>\u2264: less than or equal to</p> <p></p> <p>totally (or linearly) ordered set \u5168\u5e8f\uff08\u7ebf\u5e8f\uff09\u96c6\uff1a\u4e00\u4e2a\u504f\u5e8f\u96c6\u4e2d\u6bcf\u5bf9\u5143\u7d20\u90fd\u662f\u53ef\u6bd4\u7684</p>"},{"location":"Courses/DM.html#well-ordered","title":"Well-ordered\u826f\u5e8f","text":"<p>\u826f\u5e8f\u5f52\u7eb3\u5b9a\u7406</p> <p></p> <p>Lexicographic ordering \u5b57\u5178\u987a\u5e8f</p>"},{"location":"Courses/DM.html#hasse-diagram","title":"Hasse diagram \u54c8\u585e\u56fe","text":"<p>\u8868\u793a\u7684\u662f\u504f\u5e8f</p> <p></p> <p>Chain and antichain</p> <p></p>"},{"location":"Courses/DM.html#maximal-and-minimal-elements","title":"Maximal and Minimal Elements \u6781\u5927\u5143\u4e0e\u6781\u5c0f\u5143","text":"<p>Let A be a partially ordered set. If A has a least element a, then a is unique, and is also a minimal element of A. However, the converse fails: a minimal element of A is generally not a least element of A, and a partially ordered set A can have many minimal elements (in which case none of them can be least elements)</p> <p>\u4e0a\u754c\u548c\u4e0b\u754c\uff08\u53ef\u4ee5\u6709\u591a\u4e2a\uff09</p> <p>LUB\u6700\u5c0f\u4e0a\u754c&amp;GLB\u6700\u5927\u4e0b\u754c\uff08\u6700\u591a\u53ea\u80fd\u67091\u4e2a\uff09</p>"},{"location":"Courses/DM.html#lattice","title":"lattice \u683c","text":"<p>Definition: A partially ordered set in which every pair of elements has both a least upper bound and a greatest lower bound is called a lattice.</p> <p></p> <ul> <li>\u56feb\u4e2dd\u548ce\u540c\u4e3ab\u3001c\u6700\u5c0f\u4e0a\u754c\uff0c\u4e0d\u552f\u4e00\uff0c\u6700\u5c0f\u4e0a\u754c\u6700\u591a\u53ea\u80fd\u67091\u4e2a</li> </ul> <p></p> <p></p> <ul> <li>\u6bcf\u4e00\u4e2a\u5168\u5e8f\u96c6\uff08totally ordered set\uff09\u90fd\u662f\u683c</li> <li>(Z^+^, |) &amp; (P(s), \u2286) \u662f\u683c</li> </ul>"},{"location":"Courses/DM.html#topological-sorting","title":"Topological Sorting \u62d3\u6251\u6392\u5e8f","text":""},{"location":"Courses/DM.html#10-graphs","title":"10 Graphs","text":""},{"location":"Courses/DM.html#101-graphs-and-graph-models","title":"10.1 Graphs and Graph Models","text":"<p>finite graph \u6709\u9650\u56feA graph in which each edge connects two different vertices and where no two edges connect the same pair of vertices is called a simple graph. \u7b80\u5355\u56fe\u6ca1\u6709\u73af\uff0c\u65e0\u591a\u91cd\u8fb9\uff0c\u65e0\u5411</p> <p>Graphs that may have multiple edges connecting the same vertices are called multigraphs.</p> <p>loops: edges that connect a vertex to itself</p> <p>undirected graphs \u65e0\u5411\u56fe: a graph with undirected edges.directed graph \u6709\u5411\u56fe : a graph with directed edges.mixed graph: a graph with both directed and undirected edges.</p> <p>Simple graph \u7b80\u5355\u56fe: A graph in which each edge connects two different vertices and where no two edges connect the same pair of vertices. Multigraph \u591a\u91cd\u56fe: Graphs that may have multiple edges connecting the same vertices. Pseudograph \u4f2a\u56fe: Graphs that may include loops, and possibly multiple edges connecting the same pair of vertices.</p> <p>When a directed graph has no loops and has no multiple directed edges, it is called a simple directed graph.</p>"},{"location":"Courses/DM.html#102-graph-terminology-and-special-types-of-graphs","title":"10.2 Graph Terminology and Special Types of Graphs","text":""},{"location":"Courses/DM.html#basic-terminology","title":"Basic Terminology","text":"<ul> <li>\u63e1\u624b\u5b9a\u7406\u8bf4\u660e\u65e0\u5411\u56fe\u9876\u70b9\u5ea6\u6570\u4e4b\u548c\u4e3a\u5076\u6570</li> </ul> <p>The undirected graph that results from ignoring the directions of edges is called the underlying undirected graph. \u57fa\u672c\u65e0\u5411\u56fe\u5ffd\u7565\u8fb9\u7684\u65b9\u5411</p> <p>\u975e\u7a7a\u7b80\u5355\u56fe\u4e00\u5b9a\u5b58\u5728\u5ea6\u6570\u4e00\u6837\u7684\u9876\u70b9</p>"},{"location":"Courses/DM.html#some-special-simple-graphs","title":"Some Special Simple Graphs","text":""},{"location":"Courses/DM.html#complete-graphs-kn","title":"Complete Graphs \u5b8c\u5168\u56fe Kn","text":"<p>\u6bcf\u5bf9\u9876\u70b9\u95f4\u90fd\u6709\u4e00\u6761\u8fb9\u7684\u7b80\u5355\u56fe</p> <p></p> <p>Kn\u7684\u8fb9\u6570\uff1a\\(\\(\\frac {n (n-1)} {2}\\)\\)</p>"},{"location":"Courses/DM.html#cn","title":"\u5706\u5708 Cn","text":""},{"location":"Courses/DM.html#wn","title":"\u8f66\u8f6e Wn","text":"<p>\u76f8\u540cn\uff0c\u6bd4Cycles\u591a\u4e00\u4e2a\u70b9\u653e\u4e2d\u95f4\u548c\u5468\u56f4\u7684\u70b9\u8fde</p> <p></p>"},{"location":"Courses/DM.html#qn","title":"\u7acb\u65b9\u4f53 Qn","text":"<p>Qn\u7684\u9876\u70b9\u6570\u662f2^n^\uff0cQn\u7684\u8fb9\u6570\u662fn*2^(n-1)^</p>"},{"location":"Courses/DM.html#bipartite-graphs","title":"Bipartite Graphs \u4e8c\u5206\u56fe","text":"<p>\u6bcf\u6761\u7ebf\u6bb5\u4e00\u7aef\u662f\u7ea2\u8272\u9876\u70b9\uff0c\u4e00\u7aef\u662f\u84dd\u8272\u9876\u70b9</p> <p></p> <ul> <li>\u6811\u662f\u4e8c\u5206\u56fe</li> </ul> <p></p> <p>\u5224\u65ad\u4e8c\u5206\u56fe\u7684\u6761\u4ef6\uff08\u5f53\u4e14\u4ec5\u5f53\u53ef\u4ee5\u7528\u4e24\u4e2a\u989c\u8272\u7740\u8272\u76f8\u90bb\u9876\u70b9\u4e0d\u91cd\u590d\uff09</p> <p></p> <p>complete bipartite graphs \u5b8c\u5168\u4e8c\u5206\u56fe </p> <p>\\(K_{n,n}\\)</p> <p></p>"},{"location":"Courses/DM.html#regular-graphs","title":"Regular Graphs \u6b63\u5219\u56fe","text":"<p>A simply graph is called regular if every vertex of this graph has the same degree.\u6bcf\u4e2a\u9876\u70b9\u5ea6\u6570\u76f8\u540c A regular graph is called n-regular if every vertex in this graph has degree n. For example, \\(K_n\\) is a (n-1)-regualr; \\(K_{n,n}\\) is a n-regular. </p>"},{"location":"Courses/DM.html#new-graphs-from-old","title":"New Graphs from Old","text":"<p>subgraph \u5b50\u56fe</p> <p></p> <p>H is a spanning subgraph of G if W=V, F\u2286E</p> <p></p> <ul> <li>\u9009\u62e9\u9876\u70b9\u6570\u2716\u5269\u4e0b\u6bcf\u6761\u8fb92\u79cd\u53ef\u80fd\u60c5\u51b5\uff0cC(4,3)\u27162^3^\u8868\u793a\u90093\u4e2a\u9876\u70b9\u4fdd\u7559\u3001\u5269\u4e0b3\u6761\u8fb9\u6bcf\u6761\u8fb9\u90fd\u6709\u5728/\u4e0d\u5728\u4e24\u79cd\u60c5\u51b5</li> </ul> <p></p> <p>\u5bfc\u51fa\u7684\u5b50\u56fe\uff1a\u53ea\u6709\u88ab\u79fb\u9664\u7684\u9876\u70b9\u76f8\u5173\u7684\u8fb9\u4e0d\u5728</p> <p></p> <p>GRAPH UNIONS \u5e76\u56fe</p> <p></p>"},{"location":"Courses/DM.html#103-representing-graphs-and-graph-isomorphism","title":"10.3 Representing Graphs and Graph Isomorphism","text":"<p>\u540c\u6784adjacency lists</p>"},{"location":"Courses/DM.html#adjacency-matrices","title":"Adjacency Matrices  \u90bb\u63a5\u77e9\u9635","text":"<p>\u90bb\u63a5\u77e9\u9635 \\(A = [a_{ij}]\\)\u200b\uff0c</p> <p></p> <p>The adjacency matrix of a simple graph is symmetric, that is, \\(a_{ij} = a_{ji}\\).  All undirected graphs, including multigraphs and pseudographs, have symmetric adjacency matrices..\u591a\u91cd\u56fe\u3001\u4f2a\u56fe\u3001\u7b80\u5355\u56fe\u7684\u90bb\u63a5\u77e9\u9635\u90fd\u5bf9\u79f0</p> <p>The adjacency matrix for a directed graph does not have to be symmetric. \u6709\u5411\u56fe\u7684\u90bb\u63a5\u77e9\u9635\u4e0d\u4e00\u5b9a\u5bf9\u79f0</p>"},{"location":"Courses/DM.html#incidence-matrices","title":"Incidence Matrices \u5173\u8054\u77e9\u9635","text":"<p>n \u00d7 m matrix M = \\([m_{ij}]\\)\uff0c</p>"},{"location":"Courses/DM.html#isomorphism-of-graphs","title":"Isomorphism of Graphs \u540c\u6784","text":"<p>graph invariant \u56fe\u5f62\u4e0d\u53d8\u91cf\u9876\u70b9\u6570\u3001\u8fb9\u6570\u3001\u9876\u70b9\u7684\u5ea6\u6570</p> <p>9\u4e2a\u9876\u70b9\u4e0d\u540c\u6784\u7684\u6709\u6839\u6811\u67099\u4e2a</p>"},{"location":"Courses/DM.html#104-connectivity","title":"10.4 Connectivity","text":"<p>simple path/circuit \u7b80\u5355\u901a\u8def/\u56de\u8def\uff1aa path that does not contain an edge more than once \u53ea\u5305\u542b\u4e00\u6761\u8fb9\u4e00\u6b21</p> <p>circuit/cycle\u5706\u5708\uff1a\u8def\u5f84\u5f00\u59cb\u3001\u7ed3\u675f\u4e8e\u540c\u4e00\u4e2a\u9876\u70b9</p> <p>connected graph: an undirected graph with the property that there is a path between every pair of vertices \u65e0\u5411\u56fe\uff0c\u6bcf\u5bf9\u4e0d\u540c\u7684\u9876\u70b9\u95f4\u90fd\u6709\u4e00\u6761\u8def\u5f84</p>"},{"location":"Courses/DM.html#paths-in-acquaintanceship-graphs","title":"Paths in Acquaintanceship Graphs  \u65e0\u5411\u56fe\u7684\u8fde\u901a\u6027","text":"<p>\u6bcf\u5bf9\u9876\u70b9\u4e4b\u95f4\u90fd\u6709\u8def\u5f84\uff0c\u5219\u56fe\u662f\u8fde\u901a\u7684connected components \u8fde\u901a\u5206\u652f\u7ec4\u4ef6</p> <p>\u56feG\u7684\u6781\u5927\u8fde\u901a\u5b50\u56fe\u88ab\u79f0\u4f5c\u8fde\u901a\u7ec4\u4ef6</p> <p></p> <ul> <li>For any nonempty subset S of set V, the number of connected components in G-S &lt;=|S|</li> </ul> <p>cut vertices(or articulation points) \u5272\u70b9\uff1aa vertex v such that G \u2212 v is disconnected</p> <p>cut edge or bridge \u5272\u8fb9\uff1aan edge e such that G - e is disconnected</p> <p>\u5272\u70b9\u548c\u5272\u8fb9\u90fd\u80fd\u4f7f\u56fe\u7684\u7ec4\u4ef6\u53d8\u591a</p> <p></p> <p></p> <p>\u200b   \u4e0d\u662f\u6240\u6709\u8fde\u901a\u56fe\u90fd\u6709\u5272\u70b9\uff0c\u8fd9\u4e9b\u56fe\u88ab\u79f0\u4e3a\u4e0d\u53ef\u5206\u5272\u7684 nonseparable graphs\uff0c\u5b83\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u6bd4\u6709\u5272\u70b9\u7684\u56fe\u8fde\u901a\u6027\u66f4\u5f3a</p> <p>We measure the graph connectivity based on the minimum number of vertices that can be removed to disconnect a graph.\u6211\u4eec\u7528\u4f7f\u56fe\u53d8\u5f97\u4e0d\u8fde\u901a\u7684\u6700\u5c0f\u79fb\u51fa\u9876\u70b9\u6570\u6765\u8861\u91cf\u56fe\u7684\u8fde\u901a\u6027</p> <p>Vextex connectivity \u70b9\u8fde\u901a\u6027</p> <p></p> <p>A subset V\u2032 of the vertex set V of G = (V, E) is a vertex cut, or separating set, if G \u2212 V \u2032 is disconnected.</p> <ul> <li>\u6240\u6709\u8fde\u901a\u56fe\u90fd\u6709\u70b9\u5272\u96c6\uff0c\u9664\u4e86\u5b8c\u5168\u56fe</li> </ul> <p>\ud835\udf3f(G) (the vertex connectivity of G): the size of a smallest vertex cut of G \u70b9\u5272\u96c6</p> <p></p> <p>Edge connectivity \u8fb9\u8fde\u901a\u5ea6</p> <p></p> <p>\ud835\udf40(G) (the edge connectivity of G): the size of a smallest edge cut of G \u8fb9</p> <ul> <li>\u627e\u5230\u5ea6\u6700\u5c0f\u7684\u9876\u70b9\uff0c\u5220\u8fb9</li> </ul> <p>\u70b9\u2264\u8fb9\u2264\u6700\u5c0f\u9876\u70b9\u5ea6\u6570</p>"},{"location":"Courses/DM.html#connectedness-in-directed-graphs","title":"Connectedness in Directed Graphs \u6709\u5411\u56fe\u7684\u8fde\u901a\u6027","text":"<p>Strongly connected\u5f3a\u8fde\u901a\uff1a\u6709\u4e00\u6761\u8def\u4ecea\u5230b\uff0c\u4eceb\u5230a\uff08\u5bf9\u6240\u6709\u56fe\u4e2d\u7684\u9876\u70b9a,b\uff09</p> <p></p> <p>Strong components of a directed graph</p> <p></p>"},{"location":"Courses/DM.html#paths-and-isomorphism","title":"Paths and Isomorphism","text":"<p>\u4e24\u4e2a\u56fe\u540c\u6784\u5f53\u4e14\u4ec5\u5f53\u5b83\u4eec\u6709\u76f8\u540c\u957f\u5ea6\u7684\u7b80\u5355\u56de\u8def or \u4e24\u4e2a\u56fe\u5305\u542b\u7ecf\u8fc7\u9876\u70b9\u7684\u8def\u5f84\u4e14\u4e24\u4e2a\u56fe\u4e2d\u8def\u5f84\u5bf9\u5e94\u7684\u9876\u70b9\u5177\u6709\u76f8\u540c\u7684\u5ea6\u6570</p> <p>\u540c\u6784</p>"},{"location":"Courses/DM.html#counting-paths-between-vertices","title":"Counting Paths Between Vertices","text":"<p>\u77e9\u9635\u7684\u4e58\u6cd5\\(A^{r+1}=A^r\u00b7A=(d_{ij})_{n\u2716n}\\)\uff0c\u7b2cm\u884c\u2716\u7b2cn\u5217\u5f97\u5230\u7b2c(m, n)\u4e2a\u5143\u7d20\u7684\u503c</p> <p></p>"},{"location":"Courses/DM.html#105-euler-and-hamilton-paths","title":"10.5 Euler and Hamilton Paths","text":""},{"location":"Courses/DM.html#euler-paths-and-circuits","title":"Euler Paths and Circuits \u6b27\u62c9\u901a\u8def&amp;\u56de\u8def","text":"<p>\u7ecf\u8fc7\u8fb9</p> <p>NECESSARY AND SUFFICIENT CONDITIONS FOR EULER CIRCUITS AND PATHS \u6b27\u62c9\u56de\u8def/\u901a\u8def\u7684\u5145\u5206\u5fc5\u8981\u6761\u4ef6</p> <p></p> <p>\u6709\u6b27\u62c9\u901a\u8def\u5c31\u4ece\u4e00\u4e2a\u5947\u6570\u5ea6\u7684\u9876\u70b9\u51fa\u53d1\uff0c\u4e8e\u53e6\u4e00\u4e2a\u5947\u6570\u5ea6\u7684\u9876\u70b9\u7ed3\u675f</p> <p>Euler circuits and paths in directed graphs\u6709\u5411\u56fe \u6b27\u62c9\u56de\u8def/\u901a\u8def\u7684\u5145\u5206\u5fc5\u8981\u6761\u4ef6</p> <p>\u6b27\u62c9\u56de\u8def\uff1aA directed multigraph having no isolated vertices has an Euler circuit if and only if</p> <ul> <li>the graph is weakly connected \u5f31\u8fde\u901a</li> <li>the in-degree and out-degree of each vertex are equal \u6bcf\u4e2a\u9876\u70b9\u5165\u5ea6\u548c\u51fa\u5ea6\u4e00\u6837</li> </ul> <p>\u6b27\u62c9\u901a\u8def\uff1aA directed multigraph having no isolated vertices has an Euler path but not an Euler circuit if and only if</p> <ul> <li>the graph is weakly connected \u5f31\u8fde\u901a</li> <li>the in-degree and out-degree of each vertex are equal for all but two vertices, one that has in-degree 1 larger than its out-degree and the other that has out-degree 1 larger than its in-degree \u6bcf\u4e2a\u9876\u70b9\u5165\u5ea6\u548c\u51fa\u5ea6\u4e00\u6837\uff0c\u4f46\u6709\u4e24\u4e2a\u9876\u70b9\u662f\u4f8b\u5916\uff1a\u4e00\u4e2a \u5165\u5ea6=\u51fa\u5ea6+1\uff0c\u53e6\u4e00\u4e2a \u51fa\u5ea6=\u5165\u5ea6+1</li> </ul>"},{"location":"Courses/DM.html#hamilton-paths-and-circuits","title":"Hamilton Paths and Circuits \u54c8\u5bc6\u987f","text":"<p>\u7ecf\u8fc7\u9876\u70b9CONDITIONS FOR THE EXISTENCE OF HAMILTON CIRCUITS</p> <p>\u54c8\u5bc6\u987f\u56de\u8def\u5b58\u5728\uff08\u5145\u5206\uff09\u6761\u4ef6\uff08\u6ca1\u6709\u6709\u6548\u7684\u5fc5\u8981\u6761\u4ef6\uff09</p> <p></p> <p>\u82e5\u4e00\u4e2a\u56fe\u5b58\u5728\u54c8\u5bc6\u987f\u56de\u8def\uff0c\u5c31\u79f0\u4e3a\u54c8\u5bc6\u987f\u56fe hamilton graph</p> <ul> <li>Kn\uff08\u5b8c\u5168\u56fe\uff09\u5b58\u5728\u54c8\u5bc6\u987f\u56de\u8def\uff08n\u22653\uff09</li> <li>n\u4e2a\u9876\u70b9\u7684\u5b8c\u5168\u56fe\u6709\u591a\u5c11\u4e0d\u540c\u957f\u5ea6\u7684\u54c8\u5bc6\u987f\u56de\u8def\uff1f\\(\\frac{(n-1)!}{2}\\)</li> </ul>"},{"location":"Courses/DM.html#106-shortest-path-problems","title":"10.6 Shortest-Path Problems","text":"<p>Graphs that have a number assigned to each edge are called weighted graphs.\u52a0\u6743\u56fe</p> <p></p>"},{"location":"Courses/DM.html#107-planar-graphs","title":"10.7 Planar Graphs","text":"<p>\u5e73\u9762\u56fe</p> <p>\u5b8c\u5168\u4e8c\u5206\u56fe\\(K_{2,n}(n\u22651)\\)\u662f\u5e73\u9762\u56fe\uff1b\u5b8c\u5168\u4e8c\u5206\u56fe\\(K_{1,n}\\)\u662f\u5e73\u9762\u56fe</p>"},{"location":"Courses/DM.html#eulers-formula","title":"Euler's Formula \u6b27\u62c9\u516c\u5f0f","text":"<p>regions\u9762\uff0cedges\u8fb9\uff0cvertices\u9876\u70b9</p> <p></p> <ul> <li>\u8fde\u901a\uff01\u5e73\u9762\uff01\u7b80\u5355\u56fe\uff01\u624d\u6ee1\u8db3\u6b27\u62c9\u516c\u5f0f</li> </ul> <p></p> <p> $$ 2e=\\sum_{all-region-R}deg(R) $$ \u5982\u679c\u5e73\u9762\u56feG\u6709k\u4e2a\u8fde\u901a\u7ec4\u4ef6\uff0ce\u6761\u8fb9\u548cv\u4e2a\u9876\u70b9\uff0c\u90a3\u4e48\u533a\u57dfr=e-v+2+(k-1)=e-v+k+1</p> <p></p> <p>\u4e0d\u8fde\u901a\u7684\u7b80\u5355\u5e73\u9762\u56fee\u22643v-6\u4e5f\u6210\u7acb</p> <p></p> <p></p> <p>\u5982\u679c\u4e00\u4e2a\u8fde\u901a\u5e73\u9762\u56fe\u6bcf\u4e2a\u533a\u57dfregion\u6709\u81f3\u5c11k\u6761\u8fb9\uff0c\u5219\\(e\u2264\\frac{(v-2)k}{k-2}\\)</p> <p></p>"},{"location":"Courses/DM.html#kuratowskis-theorem","title":"Kuratowski\u2019s Theorem \u5e93\u62c9\u56fe\u65af\u57fa","text":"<p>homeomorphic \u540c\u80da\u7684\uff1atwo undirected graphs are homeomorphic if they can be obtained from the same graph by a sequence of elementary subdivisions</p> <p>elementary subdivision \u521d\u7b49\u7ec6\u5206\uff1athe removal of an edge {u, v} of an undirected graph and the addition of a new vertex w together with edges {_u, w} and {_w, v}</p> <p></p>"},{"location":"Courses/DM.html#108-graph-coloring","title":"10.8 Graph Coloring","text":"<p>dual graph \u5bf9\u5076\u56fe</p> <p></p> <p>chromatic number \\(\\chi(G)\\): the least number of colors needed for the coloring of this graph</p> <p></p> <p>\\(\\chi(K_n)=n, \\chi(K_n-e)=n-1,\\chi(K_{m,n}=2)\\)</p> <p>\u80fd\u7528\u4e24\u4e2a\u989c\u8272\u7740\u8272\u7684\u7b80\u5355\u56fe\u90fd\u662f\u4e8c\u5206\u56fe\uff1b\u8fde\u901a\u4e8c\u5206\u56fe\u80fd\u75282\u4e2a\u989c\u8272\u7740\u8272</p> <p></p>"},{"location":"Courses/DM.html#11-trees","title":"11 Trees","text":""},{"location":"Courses/DM.html#111-introduction-to-trees","title":"11.1 Introduction to Trees","text":"<p>\u8fde\u901a+\u65e0\u5411+n\u4e2a\u9876\u70b9&amp;n-1\u6761\u8fb9\u662f\u4e00\u68f5\u6811\uff1b\u8fde\u901a+\u65e0\u5411+\u6ca1\u6709\u7b80\u5355\u56de\u8def\u662f\u4e00\u68f5\u6811</p> <p>forest\uff1a</p> <p>\u65e0\u5411\u56fe\u662f\u4e00\u68f5\u6811\u5f53\u4e14\u4ec5\u5f53\u4efb\u610f\u4e00\u5bf9\u9876\u70b9\u4e4b\u95f4\u90fd\u6709\u552f\u4e00\u7b80\u5355\u8def\u5f84(unique simple path)</p> <p>rootparent \u7236\u6bcd of v in a rooted tree: the vertex u such that (u, v) is an edge of the rooted treechild \u5b69\u5b50 of a vertex v in a rooted tree: any vertex with v as its parentinternal vertex \u5185\u70b9: a vertex that has childrenleaf \u6811\u53f6: a vertex with no childrenfull m-ary tree \u6ee1m\u53c9\u6811: a tree with the property that every internal vertex has exactly m children \u6bcf\u4e2a\u5185\u70b9\u90fd\u6709m\u4e2a\u5b69\u5b50ordered tree \u6709\u5e8f\u6811: a tree in which the children of each internal vertex are linearly ordered \u6bcf\u4e2a\u5185\u70b9\u7684\u5b69\u5b50\u90fd\u662f\u6709\u5e8f\u7684</p>"},{"location":"Courses/DM.html#properties-of-trees","title":"Properties of Trees","text":"<p>BALANCED m-ARY TREES \u5e73\u8861\u7684m\u53c9\u6811level of a vertex \u9876\u70b9\u7684\u5c42: the length of the path from the root to this vertex height of a tree \u6811\u9ad8: the largest level of the vertices of a treebalanced tree: a tree in which every leaf is at level h or h \u2212 1, where h is the height of the tree</p> <p>\u6839\u7684\u9ad8\u5ea6\u662f0</p>"},{"location":"Courses/DM.html#112-applications-of-trees","title":"11.2 Applications of Trees","text":"<p>binary search tree \u4e8c\u53c9\u641c\u7d22\u6811</p> <p></p> <p>Decision Trees \u51b3\u7b56\u6811</p> <p>Huffman coding \u54c8\u592b\u66fc\u7f16\u7801</p> <p>\u5de6\u8fb9\u7684\u70b9\u6743\u91cd&gt;\u53f3\u8fb9</p>"},{"location":"Courses/DM.html#game-trees","title":"Game Trees \u535a\u5f08\u6811","text":""},{"location":"Courses/DM.html#113-tree-traversal","title":"11.3 Tree Traversal","text":"<p>\u904d\u5386\u7b97\u6cd5preorder traversal \u524d\u5e8f\uff1aVisit root, visit subtrees left to rightinorder traversal \u4e2d\u5e8f\uff1aVisit leftmost subtree, visit root, visit other subtrees left to rightpostorder traversal \u540e\u5e8f\uff1aVisit subtrees left to right; visit root</p>"},{"location":"Courses/DM.html#infix-prefix-and-postfix-notation","title":"Infix, Prefix, and Postfix Notation \u4e2d\u7f00\u3001\u524d\u540e\u7f00\u8bb0\u6cd5","text":"<p>The fully parenthesized expression obtained in this way is said to be in infifix form. \u4e2d\u7f00prefix form \u524d\u7f00postfix form \u540e\u7f00</p>"},{"location":"Courses/DM.html#114-spanning-trees","title":"11.4 Spanning Trees","text":"<p>\u751f\u6210\u6811</p> <p>depth-first search \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 also called backtracking \u56de\u6eaf</p> <ol> <li>\u4efb\u610f\u9009\u62e9\u56fe\u5f62\u7684\u4e00\u4e2a\u9876\u70b9\u4f5c\u4e3a\u6839\u3002</li> <li>\u4ece\u8fd9\u4e2a\u9876\u70b9\u5f00\u59cb\u7684\u8def\u5f84\uff0c\u8fde\u7eed\u6dfb\u52a0\u8fb9\uff0c\u5176\u4e2d\u6bcf\u6761\u65b0\u7684\u8fb9\u90fd\u4e0e\u8def\u5f84\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u9876\u70b9\u548c\u4e00\u4e2a\u8fd8\u6ca1\u4e0d\u5728\u8def\u5f84\u4e2d\u7684\u9876\u70b9\u76f8\u8fde</li> <li>\u7ee7\u7eed\u5411\u8fd9\u6761\u8def\u5f84\u6dfb\u52a0\u8fb9\uff0c\u8d8a\u957f\u8d8a\u597d\u3002</li> <li>\u5982\u679c\u8be5\u8def\u5f84\u7a7f\u8fc7\u56fe\u5f62\u7684\u6240\u6709\u9876\u70b9\uff0c\u90a3\u4e48\u7531\u8be5\u8def\u5f84\u7ec4\u6210\u7684\u6811\u5c31\u662f\u4e00\u68f5\u751f\u6210\u6811\u3002</li> <li>\u5982\u679c\u8def\u5f84\u6ca1\u6709\u7a7f\u8fc7\u6240\u6709\u9876\u70b9\uff0c\u5c31\u5fc5\u987b\u589e\u52a0\u66f4\u591a\u7684\u8fb9\u3002\u5982\u679c\u53ef\u80fd\u7684\u8bdd\uff0c\u56de\u5230\u8def\u5f84\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u9876\u70b9\uff0c\u5f62\u6210\u4e00\u6761\u65b0\u7684\u8def\u5f84\u3002\u4ece\u8fd9\u4e2a\u9876\u70b9\u5f00\u59cb\uff0c\u7a7f\u8fc7\u5c1a\u672a\u8bbf\u95ee\u7684\u9876\u70b9\u3002\u5982\u679c\u505a\u4e0d\u5230\u8fd9\u4e00\u70b9\uff0c\u5c31\u5411\u540e\u79fb\u52a8\u8def\u5f84\u4e2d\u7684\u53e6\u4e00\u4e2a\u9876\u70b9\u3002</li> <li>\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\u3002</li> </ol> <p>tree edges and back edges1.\u4efb\u610f\u9009\u62e9\u56fe\u7684\u4e00\u4e2a\u9876\u70b9\u4f5c\u4e3a\u6839\uff0c\u5e76\u5c06\u6240\u6709\u4e0e\u8be5\u9876\u70b9\u76f8\u5173\u7684\u8fb9\u76f8\u8fde\u30022.\u5728\u6b64\u9636\u6bb5\u6dfb\u52a0\u7684\u65b0\u9876\u70b9\u5c06\u6210\u4e3a\u751f\u6210\u6811\u4e2d\u7684\u7ea7\u522b1\u3002\u4efb\u610f\u6392\u5e8f\u4ed6\u4eec\u30023.\u5bf9\u4e8e\u7ea7\u522b1\u7684\u6bcf\u4e2a\u9876\u70b9\uff0c\u6309\u987a\u5e8f\u8bbf\u95ee\uff0c\u6dfb\u52a0\u6bcf\u4e2a\u8fb9\u53ea\u8981\u5b83\u4e0d\u4ea7\u751f\u7b80\u5355\u7684\u56de\u8def\uff0c\u5c31\u53ef\u4ee5\u5165\u5c04\u5230\u6811\u7684\u8fd9\u4e2a\u9876\u70b9\u3002\u4efb\u610f\u6392\u5e8f\u7ea7\u522b\u4e3a1\u7684\u6bcf\u4e2a\u9876\u70b9\u7684\u5b50\u9876\u70b9\u3002\u8fd9\u5c06\u751f\u6210\u6811\u4e2d\u7ea7\u522b\u4e3a2\u7684\u9876\u70b9\u30024.\u6309\u7167\u76f8\u540c\u7684\u8fc7\u7a0b\u8fdb\u884c\u64cd\u4f5c\uff0c\u76f4\u5230\u6dfb\u52a0\u4e86\u6811\u4e2d\u7684\u6240\u6709\u9876\u70b9\u3002</p>"},{"location":"Courses/DM.html#115-minimum-spanning-trees","title":"11.5 Minimum Spanning Trees","text":"<p>spanning tree: a tree containing all vertices of a graph \u751f\u6210\u6811\uff1a\u5305\u542b\u56fe\u7684\u6240\u6709\u9876\u70b9\u7684\u6811minimum spanning tree: a spanning tree with smallest possible sum of weights of its edges\u6700\u5c0f\u751f\u6210\u6811\uff1a\u8fb9\u7684\u6743\u4e4b\u548c\u6700\u5c0f</p>"},{"location":"Courses/DM.html#prims-algorithm","title":"Prim\u2019s algorithm \u666e\u6797\u7b97\u6cd5","text":""},{"location":"Courses/FDS.html","title":"Fudemental Data Structure","text":"<p> \u7ea6 5455 \u4e2a\u5b57  1018 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 31 \u5206\u949f</p>"},{"location":"Courses/FDS.html#_1","title":"\u5f15\u8bba","text":"<p>ADT abstract data type \u62bd\u8c61\u6570\u636e\u7c7b\u578b \\(O(N)\u2264\\) \\(\u03a9(N)\u2265\\) \\(\u0398(N)=\\) \\(o(N)\uff1c\\)</p>"},{"location":"Courses/FDS.html#sort","title":"\u6392\u5e8f sort","text":"<p>stable \u7a33\u5b9a: A sorting algorithm is said to be stable if two items with equal keys _in the same order _in the sorted output as they appear in the input array. That is, the order of elements with identical keys is preserved.</p>"},{"location":"Courses/FDS.html#quick-sort","title":"Quick Sort \u5feb\u901f\u6392\u5e8f","text":"<p>Quick Sort is a sorting algorithm that works using the divide-and-conquer approach. It chooses a pivot places it in its correct position in the sorted array and partitions the smaller elements to its left and the greater ones to its right. This process is continued for the left and right parts and the array is sorted.\u4e24\u8fb9\u5206\u7ec4\u6392\u5e8f\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(N logN)\\)\u5e73\u5747\u6bcf\u4e00\u8f6e\u6392\u5e8f run \u90fd\u6709\u4e00\u4e2a\u6570 pivot \u88ab\u653e\u5230\u6700\u7ec8\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0aThe position of the pivot element is finalized after each partitioning.</p>"},{"location":"Courses/FDS.html#heap-sort","title":"Heap Sort \u5806\u6392\u5e8f","text":"<p>Heap Sort - Data Structures and Algorithms Tutorials - GeeksforGeeksHeap sort is a comparison-based sorting technique based on Binary Heap data structure. It is similar to the selection sort where we first find the minimum element and place the minimum element at the beginning. Repeat the same process for the remaining elements. \u9996\u5148\u4f7f\u7528 heapify (percolate down) \u5c06\u6570\u7ec4\u8f6c\u6362\u4e3a\u5806\u6570\u636e\u7ed3\u6784\uff0c\u7136\u540e\u9010\u4e2a\u5220\u9664 Max-heap \u7684\u6839\u8282\u70b9\uff0c\u5c06\u5176\u66ff\u6362\u4e3a\u5806\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u5806\u5316\u5806\u7684\u6839\u3002\u91cd\u590d\u6b64\u8fc7\u7a0b\uff0c\u76f4\u5230\u5806\u7684\u5927\u5c0f\u5927\u4e8e 1\u3002</p> <ul> <li>\u4ece\u7ed9\u5b9a\u7684\u8f93\u5165\u6570\u7ec4\u6784\u5efa\u5806\u3002</li> <li>\u91cd\u590d\u4ee5\u4e0b\u6b65\u9aa4\uff0c\u76f4\u5230\u5806\u53ea\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff1a</li> <li>\u5c06\u5806\u7684\u6839\u5143\u7d20\uff08\u5373\u6700\u5927\u7684\u5143\u7d20\uff09\u4e0e\u5806\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362\u3002</li> <li>\u5220\u9664\u5806\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff08\u73b0\u5728\u4f4d\u4e8e\u6b63\u786e\u4f4d\u7f6e\uff09\u3002</li> <li>\u5806\u780c\u5806\u7684\u5176\u4f59\u5143\u7d20\u3002</li> <li>\u6392\u5e8f\u540e\u7684\u6570\u7ec4\u662f\u901a\u8fc7\u53cd\u8f6c\u8f93\u5165\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u987a\u5e8f\u6765\u83b7\u5f97\u7684\u3002</li> </ul> <p>\u6027\u8d28\uff1aunstable\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(N)\\)??</p> code heap sort<pre><code>#include &lt;stdio.h&gt;\n\n// Function to swap the position of two elements\nvoid swap(int* a, int* b)\n{\n\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\n// To heapify a subtree rooted with node i\n// which is an index in arr[].\n// n is size of heap\nvoid heapify(int arr[], int N, int i)\n{\n    // Find largest among root,\n    // left child and right child\n\n    // Initialize largest as root\n    int largest = i;\n\n    // left = 2*i + 1\n    int left = 2 * i + 1;\n\n    // right = 2*i + 2\n    int right = 2 * i + 2;\n\n    // If left child is larger than root\n    if (left &lt; N &amp;&amp; arr[left] &gt; arr[largest])\n\n        largest = left;\n\n    // If right child is larger than largest\n    // so far\n    if (right &lt; N &amp;&amp; arr[right] &gt; arr[largest])\n\n        largest = right;\n\n    // Swap and continue heapifying\n    // if root is not largest\n    // If largest is not root\n    if (largest != i) {\n\n        swap(&amp;arr[i], &amp;arr[largest]);\n\n        // Recursively heapify the affected\n        // sub-tree\n        heapify(arr, N, largest);\n    }\n}\n\n// Main function to do heap sort\nvoid heapSort(int arr[], int N)\n{\n\n    // Build max heap\n    for (int i = N / 2 - 1; i &gt;= 0; i--)\n\n        heapify(arr, N, i);\n\n    // Heap sort\n    for (int i = N - 1; i &gt;= 0; i--) {\n\n        swap(&amp;arr[0], &amp;arr[i]);\n\n        // Heapify root element\n        // to get highest element at\n        // root again\n        heapify(arr, i, 0);\n    }\n}\n\n// A utility function to print array of size n\nvoid printArray(int arr[], int N)\n{\n    for (int i = 0; i &lt; N; i++)\n        printf(\"%d \", arr[i]);\n    printf(\"\\n\");\n}\n\n// Driver's code\nint main()\n{\n    int arr[] = { 12, 11, 13, 5, 6, 7 };\n    int N = sizeof(arr) / sizeof(arr[0]);\n\n    // Function call\n    heapSort(arr, N);\n    printf(\"Sorted array is\\n\");\n    printArray(arr, N);\n}\n</code></pre>"},{"location":"Courses/FDS.html#insertion-sort","title":"Insertion Sort \u63d2\u5165\u6392\u5e8f","text":"<p>Insertion Sort - Data Structure and Algorithm Tutorials - GeeksforGeeksInsertion sort is a simple sorting algorithm that works similarly to the way you sort playing cards in your hands. The array is virtually split into a sorted and an unsorted part. Values from the unsorted part are picked and placed at the correct position in the sorted part.\u82e5\u8981\u6309\u5347\u5e8f\u5bf9\u5927\u5c0f\u4e3a N \u7684\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u8bf7\u904d\u5386\u8be5\u6570\u7ec4\u5e76\u5c06\u5f53\u524d\u5143\u7d20\uff08\u952e\uff09\u4e0e\u5176\u524d\u4e00\u4e2a\u5143\u7d20\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u5173\u952e\u5143\u7d20\u5c0f\u4e8e\u5176\u524d\u4e00\u4e2a\u5143\u7d20\uff0c\u8bf7\u5c06\u5176\u4e0e\u4e4b\u524d\u7684\u5143\u7d20\u8fdb\u884c\u6bd4\u8f83\u3002\u5c06\u8f83\u5927\u7684\u5143\u7d20\u5411\u4e0a\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4ee5\u4fbf\u4e3a\u4ea4\u6362\u7684\u5143\u7d20\u817e\u51fa\u7a7a\u95f4\u3002\u65f6\u95f4\u590d\u6742\u5ea6\uff1a <pre><code>// C++ program for insertion sort\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n// Function to sort an array using insertion sort\nvoid insertionSort(int arr[], int n)\n{\n    int i, key, j;\n    for (i = 1; i &lt; n; i++) {\n        key = arr[i];\n\n        // Move elements of arr[0..i-1],\n        // that are greater than key, \n        // to one position ahead of their\n        // current position\n        for ( j=i; j&gt;0 &amp;&amp; arr[j-1] &gt; key; j--){\n            arr[j] = arr[j-1];\n        }\n        arr[j] = key;\n    }\n}\n// A utility function to print an array of size n\nvoid printArray(int arr[], int n)\n{\n    int i;\n    for (i = 0; i &lt; n; i++)\n        cout &lt;&lt; arr[i] &lt;&lt; \" \";\n    cout &lt;&lt; endl;\n}\n\n// Driver code\nint main()\n{\n    int arr[] = { 12, 11, 13, 5, 6 };\n    int N = sizeof(arr) / sizeof(arr[0]);\n\n    insertionSort(arr, N);\n    printArray(arr, N);\n\n    return 0;\n}\n// This is code is contributed by rathbhupendra\n</code></pre></p>"},{"location":"Courses/FDS.html#shell-sort","title":"Shell Sort \u5e0c\u5c14\u6392\u5e8f","text":"<p>Shell sort is mainly a variation of Insertion Sort. In insertion sort, we move elements only one position ahead. When an element has to be moved far ahead, many movements are involved. The idea of ShellSort is to allow the exchange of far items. In Shell sort, we make the array h-sorted for a large value of h. We keep reducing the value of h until it becomes 1.  An array is said to be h-sorted if all sublists of every h\u2019th element are sorted.\u5206\u7ec4 h-\u63d2\u5165\u6392\u5e8f\u6027\u8d28\uff1a unstable\u65f6\u95f4\u590d\u6742\u5ea6\uff1aAlgorithm:Step 1 \u2212 StartStep 2 \u2212 Initialize the value of gap size. Example: h.Step 3 \u2212 Divide the list into smaller sub-part. Each must have equal intervals to h.Step 4 \u2212 Sort these sub-lists using insertion sort.Step 5 \u2013 Repeat this step 2 until the list is sorted.Step 6 \u2013 Print a sorted list.Step 7 \u2013 Stop.</p> <p><pre><code>void Shellsort( ElementType A[ ], int N ) \n{ \n      int  i, j, Increment; \n      ElementType  Tmp; \n      for ( Increment = N / 2; Increment &gt; 0; Increment /= 2 )  \n    /*h sequence */\n    for ( i = Increment; i &lt; N; i++ ) { /* insertion sort */\n          Tmp = A[ i ]; \n          for ( j = i; j &gt;= Increment; j - = Increment ) \n        if( Tmp &lt; A[ j - Increment ] ) \n              A[ j ] = A[ j - Increment ]; \n        else \n              break; \n        A[ j ] = Tmp; \n    } /* end for-I and for-Increment loops */\n}\n</code></pre> Hibbard \u589e\u91cf\u5e8f\u5217\\(H_k=2^k-1\\), \u4e14\u5176\u6700\u574f\u60c5\u5f62\u4e0b\u8fd0\u884c\u65f6\u95f4\u4e3a \\(O(N^{3/2})\\)</p>"},{"location":"Courses/FDS.html#selection-sort","title":"Selection Sort \u9009\u62e9\u6392\u5e8f","text":""},{"location":"Courses/FDS.html#merge-sort","title":"Merge Sort \u5f52\u5e76\u6392\u5e8f","text":"<p>\u6027\u8d28\uff1a stable\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(N logN)\\) <pre><code>// C program for Merge Sort\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n// Merges two subarrays of arr[].\n// First subarray is arr[l..m]\n// Second subarray is arr[m+1..r]\nvoid merge(int arr[], int l, int m, int r)\n{\n    int i, j, k;\n    int n1 = m - l + 1;\n    int n2 = r - m;\n\n    // Create temp arrays\n    int L[n1], R[n2];\n\n    // Copy data to temp arrays L[] and R[]\n    for (i = 0; i &lt; n1; i++)\n        L[i] = arr[l + i];\n    for (j = 0; j &lt; n2; j++)\n        R[j] = arr[m + 1 + j];\n\n    // Merge the temp arrays back into arr[l..r\n    i = 0;\n    j = 0;\n    k = l;\n    while (i &lt; n1 &amp;&amp; j &lt; n2) {\n        if (L[i] &lt;= R[j]) {\n            arr[k] = L[i];\n            i++;\n        }\n        else {\n            arr[k] = R[j];\n            j++;\n        }\n        k++;\n    }\n\n    // Copy the remaining elements of L[],\n    // if there are any\n    while (i &lt; n1) {\n        arr[k] = L[i];\n        i++;\n        k++;\n    }\n\n    // Copy the remaining elements of R[],\n    // if there are any\n    while (j &lt; n2) {\n        arr[k] = R[j];\n        j++;\n        k++;\n    }\n}\n\n// l is for left index and r is right index of the\n// sub-array of arr to be sorted\nvoid mergeSort(int arr[], int l, int r)\n{\n    if (l &lt; r) {\n        int m = l + (r - l) / 2;\n\n        // Sort first and second halves\n        mergeSort(arr, l, m);\n        mergeSort(arr, m + 1, r);\n\n        merge(arr, l, m, r);\n    }\n}\n\n// Function to print an array\nvoid printArray(int A[], int size)\n{\n    int i;\n    for (i = 0; i &lt; size; i++)\n        printf(\"%d \", A[i]);\n    printf(\"\\n\");\n}\n\n// Driver code\nint main()\n{\n    int arr[] = { 12, 11, 13, 5, 6, 7 };\n    int arr_size = sizeof(arr) / sizeof(arr[0]);\n\n    printf(\"Given array is \\n\");\n    printArray(arr, arr_size);\n\n    mergeSort(arr, 0, arr_size - 1);\n\n    printf(\"\\nSorted array is \\n\");\n    printArray(arr, arr_size);\n    return 0;\n}\n</code></pre></p>"},{"location":"Courses/FDS.html#bucket-sort","title":"Bucket Sort \u6876\u6392\u5e8f","text":""},{"location":"Courses/FDS.html#_2","title":"\u95f4\u63a5/\u8868\u6392\u5e8f","text":"<p>\u6392\u5e8f\u7684\u5143\u7d20\u662f\u7ed3\u6784\u5927\uff0c\u79fb\u52a8\u6307\u9488\u6570\u7ec4\u8fdb\u884c\u6392\u5e8fN \u4e2a\u6570\u5b57\u7684\u6392\u5217\u4e00\u5b9a\u662f\u7531\u82e5\u5e72\u4e2a\u72ec\u7acb\u7684\u73af\u7ec4\u6210\u7684</p> <ul> <li>\u6bcf\u8bbf\u95ee\u4e00\u4e2a\u73af\uff0c\u5f53<code>table[i]==i</code>\u65f6\u73af\u7ed3\u675f</li> </ul> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\uff08\u6700\u574f\uff09\u5411\u4e0b\u53d6\u6574 N/2 \u4e2a\u73af\uff0c\u6bcf\u4e2a\u73af\u5305\u62ec\u4e24\u4e2a\u5143\u7d20\uff1b \u603b\\(O(M*n)\\)\uff0cM \u662f\u6bcf\u4e2a\u5143\u7d20 A \u590d\u5236\u7684\u65f6\u95f4</p>"},{"location":"Courses/FDS.html#q","title":"Q","text":"<ol> <li>If there are less than 20 inversions in an integer array, then Insertion Sort will be the best method among Quick Sort, Heap Sort and Insertion Sort. T</li> <li>For the quicksort implementation with the left pointer stops at an element with the same key as the pivot during the partitioning, but the right pointer does not stop in a similar case, what is the running time when all keys are equal?</li> <li>\\(O(logN)\\)</li> <li>\\(O(N)\\)</li> <li>\\(O(NlogN)\\)</li> <li>\\(O(N^2)\\)</li> </ol> <p>The running time is \\(O(n^2)\\) in the worst case [6]. This is because in such a situation, the partitioning doesn't effectively divide the array into smaller subproblems, leading to a degenerate case where the algorithm essentially performs a linear scan. Quicksort's typical efficiency relies on dividing the problem into subproblems, and when this doesn't occur due to equal keys, the algorithm's performance degrades.\uff08answer from AI\uff09</p> <ol> <li>To sort { 49, 38, 65, 97, 76, 13, 27, 50 } in increasing order, which of the following is the result after the 1<sup>st</sup> run of Shell sort with the initial increment 4? </li> <li>13,27,38,49,50,65,76,97</li> <li>49,13,27,50,76,38,65,97</li> <li>49,76,65,13,27,50,97,38</li> <li>97,76,65,50,49,38,27,13</li> </ol> <p>First Pass (Increment 4):</p> <ul> <li>Compare elements at positions 1 and 5 (49 and 76), no swap needed.</li> <li>Compare elements at positions 2 and 6 (38 and 13), swap.</li> <li>Compare elements at positions 3 and 7 (65 and 27), swap.</li> <li>Compare elements at positions 4 and 8 (97 and 50), swap.</li> <li>if not present due to length, no swap needed. 4. Among the following sorting methods, which ones will be slowed down if we store the elements in a linked structure instead of a sequential structure? </li> </ul> <ol> <li> <p>Insertion sort; 2. Select ion Sort; 3. Bubble sort; 4. Shell sort; 5. Heap sort</p> </li> <li> <p>1 and 2 only</p> </li> <li>2 and 3 only</li> <li>3 and 4 only</li> <li>4 and 5 only</li> </ol> <p>Heap sort\u662f\u5728\u6570\u7ec4\u4e2d, heap\u672c\u8eab\u5728\u6570\u7ec4\u4e2d, shell sort\u4e5f\u662f\u5728\u6570\u7ec4\u4e2d\uff0c \u94fe\u8868\u67e5\u8be2\u8f83\u6162</p> <ol> <li>To sort N elements by heap sort, the extra space complexity is: \\(O(1)\\)</li> <li>During the sorting, processing every element which is not yet at its final position is called a \"run\". To sort a list of integers using quick sort, it may reduce the total number of recursions by processing the small partion first in each run. **F **</li> </ol> <p>\u5e0c\u671b\u5e73\u5747\u5206\uff0c\u5904\u7406\u4e24\u4e2a\u90fd\u4e00\u6837\u7684</p> <ol> <li></li> </ol>"},{"location":"Courses/FDS.html#hashing","title":"\u6563\u5217 hashing","text":"<p>\u51b2\u7a81 collision\uff1aTwo elements with different keys share the same hash value\u88c5\u586b\u56e0\u5b50 load factor: \\(\u03bb=n/tablesize\\)\u6563\u5217\u5e73\u5747\u67e5\u627e\u671f\u671b\u662f\\(O(1)\\)\uff0c\u51e0\u4e4e\u4e0e\u5173\u952e\u5b57\u7a7a\u95f4 n \u65e0\u5173</p> <ul> <li>\u4ee5\u8f83\u5c0f\u7684\u88c5\u586b\u56e0\u5b50\u4e3a\u524d\u63d0\uff0c\u4ee5\u7a7a\u95f4\u6362\u65f6\u95f4</li> <li>\u4e0d\u4fbf\u4e8e\u987a\u5e8f\u67e5\u627e\u5173\u952e\u5b57\u3001\u8303\u56f4\u67e5\u627e\u3001\u6700\u5927\u6700\u5c0f\u503c\u67e5\u627e\u7b49</li> </ul>"},{"location":"Courses/FDS.html#_3","title":"\u5206\u79bb\u94fe\u63a5\u6cd5","text":"<p>\u628a\u6240\u6709\u6709\u51b2\u7a81\u7684 key \u7528\u94fe\u8868\u4e32\u8054\u5728\u4e00\u8d77\u88c5\u586b\u56e0\u5b50\u53ef\u80fd\u8d85\u8fc7 1\uff0c\u6210\u529f\u67e5\u627e\u671f\u671b\u7565\u5927\u4e8e\u4e0d\u6210\u529f\u94fe\u8868\u50a8\u5b58\u6548\u7387\u548c\u67e5\u627e\u6548\u7387\u6bd4\u8f83\u4f4e\u5173\u952e\u5b57\u5220\u9664\u4e0d\u9700\u8981\u201c\u61d2\u60f0\u5220\u9664\u201d\u6cd5\u592a\u5c0f\u7684\u88c5\u586b\u56e0\u5b50\u53ef\u80fd\u6d6a\u8d39\u7a7a\u95f4\uff0c\u592a\u5927\u5c06\u4ed8\u51fa\u65f6\u95f4\u4ee3\u4ef7</p>"},{"location":"Courses/FDS.html#_4","title":"\u5f00\u653e\u5b9a\u5740\u6cd5","text":"<p>\u5982\u679c\u53d1\u751f\u7b2c i \u6b21\u51b2\u7a81\uff0c\u63a2\u6d4b\u7684\u4e0b\u4e00\u4e2a\u5730\u5740+di\u88c5\u586b\u56e0\u5b50\u8d8a\u5927\uff0c\uff08\u4e0d\uff09\u6210\u529f\u67e5\u627e\u671f\u671b\u6b21\u6570\u8d8a\u5927\uff08\u6307\u6570\u7ea7\u589e\u957f\uff0c\u4e0d\u6210\u529f&gt;\u6210\u529f\uff09\uff1b\u88c5\u586b\u56e0\u5b50\u8f83\u5c0f\u65f6\uff0c\u5404\u79cd\u671f\u671b\u63a2\u6d4b\u6b21\u6570\u90fd\u4e0d\u5927\u4e14\u6bd4\u8f83\u63a5\u8fd1\u3002\u6563\u5217\u8868\u662f\u4e2a\u6570\u7ec4\uff0c\u50a8\u5b58\u6548\u7387\u9ad8\uff0c\u968f\u673a\u67e5\u627e\uff0c\u6709\u805a\u96c6\u73b0\u8c61</p>"},{"location":"Courses/FDS.html#linear-probing","title":"\u7ebf\u6027\u63a2\u6d4b\u6cd5 Linear probing","text":"<p>\\(di=i\\)\u5e73\u5747\u67e5\u627e\u957f\u5ea6\uff08\u6b21\u6570\uff09\u4e00\u822c\u5931\u8d25&gt;\u6210\u529f\u6210\u529f\u67e5\u627e\u957f\u5ea6 ASLs\uff1a\u6563\u5217\u4e2d\u6bcf\u4e2a\u5143\u7d20\u8981\u627e xi \u6b21\uff08xi=\u51b2\u7a81\u6b21\u6570+1\uff09\uff0c\u76f8\u52a0\u53d6\u5e73\u5747\uff08\u2797\u5b9e\u9645\u54c8\u5e0c\u8868\u5143\u7d20\u4e2a\u6570\uff09\u5931\u8d25\u67e5\u627e\u957f\u5ea6 ASLu\uff1a\u627e\u4e0d\u5728\u6563\u5217\u4e2d\u7684\u5143\u7d20\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u54c8\u5e0c\u503c h(x)\uff0c \u7167\u6837 mod + \u540e\u79fb\u627e\uff0c\u82e5\u662f\u9047\u5230\u7a7a\u683c\u5219\u8bc1\u660e\u4e0d\u5728\u6563\u5217\u4e2d\uff0c\u6b64\u65f6\u7684\u67e5\u627e\u6b21\u6570 xi \u76f8\u52a0\u53d6\u5e73\u5747</p>"},{"location":"Courses/FDS.html#quadratic-probing","title":"\u5e73\u65b9\u63a2\u6d4b\u6cd5 Quadratic probing","text":"<p>\u589e\u91cf\u5e8f\u5217\uff1a1\uff0c-1\uff0c\\(2^2\\)\uff0c\\(-2^2\\)\uff0c\\(3^2\\)\uff0c\\(-3^2\\), \u2026\u2026 ,\\(q^2\\),\\(-q^2\\)\u4e14 \\(q\u2264\u230atablesize/2\u230b\\)\u53ef\u80fd\u51fa\u73b0\u8868\u6709\u4f4d\u7f6e\u4f46\u627e\u4e0d\u5230\u7684\u60c5\u51b5\uff08\\(i^2\\)\u4e5f\u4e00\u6837 )\u4f7f\u7528\u5e73\u65b9\u63a2\u6d4b\u6cd5\uff1a\u5f53\u8868\u7684\u5927\u5c0f\u662f\u7d20\u6570\u4e14\u8868\u6709\u4e00\u534a\u662f\u7a7a\u7684\u7684\u65f6\u5019\uff0c\u603b\u80fd\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\u5982\u679c\u8868\u7684\u5927\u5c0f\u662f\u5f62\u5982 4k+3 \u7684\u7d20\u6570\uff0c\u4f7f\u7528 \\(F(i)=+-i^2\\)\uff0c\u90a3\u4e48\u6574\u4e2a\u8868\u90fd\u80fd\u88ab\u63a2\u6d4b\u5230</p>"},{"location":"Courses/FDS.html#q_1","title":"Q","text":"<ol> <li>Which of the following statements about HASH is true? </li> <li>the expected number of probes for insertions is greater than that for successful searches in linear probing method</li> <li>insertions are generally quicker than deletions in separate chaining method</li> <li>if the table size is prime and the table is at least half empty, a new element can always be inserted with quadratic probing</li> <li>all of the above</li> <li>The average search time of searching a hash table with N elements is:</li> <li>\\(O(1)\\)</li> <li>\\(O(logN)\\)</li> <li>\\(O(N)\\)</li> <li>cannot be determined</li> </ol>"},{"location":"Courses/FDS.html#list","title":"\u8868 List","text":""},{"location":"Courses/FDS.html#q_2","title":"Q","text":"<p>For a sequentially stored linear list of length N, the time complexities for query and insertion are O(1) and O(N), respectively. T</p>"},{"location":"Courses/FDS.html#stack","title":"\u6808 stack","text":"<p>\u6808\uff08Stack\uff09\uff1a\u662f\u53ea\u5141\u8bb8\u5728\u4e00\u7aef\u8fdb\u884c\u63d2\u5165\u6216\u5220\u9664\u7684\u7ebf\u6027\u8868\u3002\u9996\u5148\u6808\u662f\u4e00\u79cd\u7ebf\u6027\u8868\uff0c\u4f46\u9650\u5b9a\u8fd9\u79cd\u7ebf\u6027\u8868\u53ea\u80fd\u5728\u67d0\u4e00\u7aef\u8fdb\u884c\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u3002Last-in-First-out <pre><code>void Push(Elementstype X, Stack S){\n    PtrtoNode Tmp;\n    //\u7565\u53bb\u5224\u65ad\u662f\u4e0d\u662fNULL\n    Tmp-&gt;Element=X;\n    Tmp-&gt;Next=S-&gt;Next;//\u6362\u8868\u5934\n    S-&gt;Next=Tmp;\n}\nvoid Pop(Stack S){\n    PtrtoNode first;\n    //\u7565\u53bb\u5224\u65ad\u662f\u4e0d\u662f\u7a7a\n    first=S-&gt;Next;\n    S-&gt;Next=S-&gt;Next-&gt;Next;//\u6362\u8868\u5934\n    free(first);\n}\n</code></pre> <pre><code>void Push(Stack S){\n    //\u7565\u53bb\u5224\u65ad\u662f\u4e0d\u662f\u6ee1\u4e86\n    S-&gt;Array[++S-&gt;TopOfStack]=X;\n}\nvoid Pop(Stack S){\n    //\u7565\u53bb\u5224\u65ad\u662f\u4e0d\u662f\u7a7a\n    S-&gt;TopOfStack--;\n}\n</code></pre></p>"},{"location":"Courses/FDS.html#q_3","title":"Q","text":"<ul> <li>Stacks and queues are lists with insertion/deletion constraints.</li> </ul>"},{"location":"Courses/FDS.html#queue","title":"\u961f\u5217 queue","text":"<p>First-in-first-outcircular array\u68c0\u6d4b\u961f\u5217\u662f\u4e0d\u662f\u7a7a\u662f\u5f88\u91cd\u8981\u7684</p>"},{"location":"Courses/FDS.html#q_4","title":"Q","text":"<p>Suppose that an array of size m is used to store a circular queue. If the front position is front and the current size is size, then the rear element must be at (front+size-1)%m.</p>"},{"location":"Courses/FDS.html#tree","title":"\u6811 Tree","text":"<p>\u6df1\u5ea6 \u6839 \u5230 \u8282\u70b9 ni \uff08\u6839\u7684\u6df1\u5ea6\u4e3a 0\uff0c\u6811\u7684\u6df1\u5ea6\u662f\u5b83\u6700\u6df1\u6811\u53f6\u7684\u6df1\u5ea6\uff09\u9ad8\u5ea6 \u8282\u70b9 ni \u5230\u53f6\u5b50 \uff08\u6811\u7684\u9ad8\u5ea6\u662f\u6839\u7684\u9ad8\u5ea6\uff09\u8def\u5f84 \u8282\u70b9\u7684\u4e00\u4e2a\u987a\u5e8f\uff0c\u4e00\u68f5\u6811\u4e2d\u4ece\u6839\u5230\u6bcf\u4e2a\u8282\u70b9\u6070\u597d\u5b58\u5728\u4e00\u6761\u8def\u5f84</p>"},{"location":"Courses/FDS.html#binary-tree","title":"Binary Tree","text":"<p>\u5ea6\u6570\u4e3a 0 \u7684\u8282\u70b9 = \u5ea6\u6570\u4e3a 2 \u7684\u8282\u70b9+1</p>"},{"location":"Courses/FDS.html#complete-binary-tree","title":"\u5b8c\u5168\u4e8c\u53c9\u6811 complete binary tree","text":"<p>The parent of a node at index _i _ is located at index \\(\u230ai/2\u230b\\)</p>"},{"location":"Courses/FDS.html#insert","title":"insert \u63d2\u5165","text":"<p>\u5982\u679c\u961f\u5217\u91cc\u6ca1\u6709 X\uff0c<code>Insert(Elemnettype X, SearchTree T)</code>\u5c06 X \u63d2\u5165\u5230\u904d\u5386\u8def\u5f84\u7684\u6700\u540e\u4e00\u70b9\u4e0a</p>"},{"location":"Courses/FDS.html#binary-search-treebst","title":"\u4e8c\u53c9\u67e5\u627e\u6811 Binary Search Tree\uff08BST\uff09","text":"<p>\u5de6\u8fb9\u90fd\u6bd4\u6839\u5c0f\uff0c\u53f3\u8fb9\u90fd\u6bd4\u6839\u5927\u6811\u7684\u5e73\u5747\u6df1\u5ea6 \\(O(Nlog N)\\)</p>"},{"location":"Courses/FDS.html#delete","title":"Delete","text":"<p>\u5de6\u5b50\u6811\u6700\u5927\u6216\u8005\u53f3\u5b50\u6811\u6700\u5c0f\u7684\u6570\u6765\u4ee3\u66ff\u88ab\u5220\u6389\u7684\u8282\u70b9\uff08\u4e0d\u662f\u53f6\u5b50</p>"},{"location":"Courses/FDS.html#ternary-tree","title":"ternary tree \u4e09\u53c9\u6811","text":"<p>The number of leaf nodes in a ternary tree (\u4e09\u53c9\u6811) is only related to the number of degree 2 nodes and that of degree 3 nodes, namely, it has nothing to do with the number of degree 1 nodes.</p>"},{"location":"Courses/FDS.html#perfect-binary-tree","title":"Perfect binary tree \u7406\u60f3\u4e8c\u53c9\u6811","text":"<p>\u6ee1\u4e8c\u53c9\u6811\uff0c\u662f\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684\u4e8c\u53c9\u6811\u3002\u5728\u7406\u60f3\u4e8c\u53c9\u6811\u4e2d\uff0c\u9664\u4e86\u53f6\u5b50\u8282\u70b9\u4e4b\u5916\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\uff0c\u4e14\u6240\u6709\u53f6\u5b50\u8282\u70b9\u90fd\u4f4d\u4e8e\u540c\u4e00\u5c42\u6b21\u4e0a\u3002\u8fd9\u4f7f\u5f97\u7406\u60f3\u4e8c\u53c9\u6811\u5177\u6709\u826f\u597d\u7684\u5e73\u8861\u6027\u3002</p>"},{"location":"Courses/FDS.html#q_5","title":"Q","text":"<ol> <li>In a complete binary tree with 1102 nodes, there must be __ leaf nodes. </li> <li>79</li> <li>551</li> <li>1063</li> <li>cannot be determined - n \u4e3a\u5076\u6570\uff0cleaf nodes \u7684\u6570\u91cf=\\(n/2\\); n \u4e3a\u5947\u6570\uff0cleaf nodes \u7684\u6570\u91cf=\\((n+1)/2\\)</li> <li>In-order traversal of a binary tree can be done iteratively. Given the stack operation sequence as the following:<code>push(1), push(2), push(3), pop(), push(4), pop(), pop(), push(5), pop(), pop(), push(6), pop()</code></li> </ol> <p>Which one of the following statements is TRUE? </p> <ol> <li>6 is the root</li> <li>2 is the parent of 4</li> <li>2 and 6 are siblings</li> <li>None of the above - \u5165\u6808\u987a\u5e8f\u5373\u4e3a\u5148\u5e8f\u904d\u5386\u7684\u987a\u5e8f\uff0c\u51fa\u6808\u987a\u5e8f\u5373\u4e3a\u4e2d\u5e8f\u904d\u5386\u7684\u987a\u5e8f - \u5165\u6808 123456 \u51fa\u6808 342516</li> </ol> <p>re <pre><code>Tree BuildTree( int in[], int pre[], int N )\n{ //in[] stores the inorder traversal sequence\n//and pre[] stores the preorder traversal sequence\n//N is the number of nodes in the tree\n    Tree T;\n    int i;\n    if (!N) {\n    return NULL;\n    }\n    T = (Tree)malloc(sizeof(struct Node));\n    T-&gt;Data = pre[0];\n    for (i=0; i&lt;N; i++)\n        if (in[i]==T-&gt;Data) break;\n    T-&gt;Left = BuildTree( in, pre+1, i);\n    T-&gt;Right = BuildTree( in+i+1, pre+i+1, N-i-1);\n    return T;\n}\n</code></pre></p> <pre><code>Tree BuildTree( int in[], int post[], int N )\n{ \n    Tree T;\n    int i;\n    if (!N) {\n    return NULL;\n    }\n    T = (Tree)malloc(sizeof(struct Node));\n    T-&gt;Data = post[N-1];\n    for (i=0; i&lt;N; i++)\n        if (in[i]==T-&gt;Data) break;\n    T-&gt;Left = BuildTree( in, post, i);\n    T-&gt;Right = BuildTree( in+i+1, post+i+1, N-i);\n    return T;\n}\n</code></pre>"},{"location":"Courses/FDS.html#heap","title":"\u5806 Heap \u4f18\u5148\u961f\u5217","text":"<p>\u5806\u5e8f\u6027 heap order</p> <ul> <li>the nodes along the path from the root to any node are in sorted order</li> </ul> <p>\u4e8c\u53c9\u5806 binary heap \u662f\u5b8c\u5168\u586b\u6ee1\u7684\u4e8c\u53c9\u6811 complete binary tree\u8282\u70b9\u6570 \\(2^h\\)~\\(2^h-1\\)\u9ad8\u5ea6 h \\(\u230alogN\u230b\\)\u7236\u4eb2\u5728\\(\u230ai/2\u230b\\)\u4f4d\u7f6e\u4e0a</p>"},{"location":"Courses/FDS.html#insert_1","title":"Insert","text":""},{"location":"Courses/FDS.html#percolate-up","title":"\u4e0a\u6ee4 percolate up","text":"<p>\u5728\u4e0b\u4e00\u4e2a\u7a7a\u7684\u4f4d\u7f6e\u5efa\u4e00\u4e2a\u7a7a\u7a74\uff0c\u5411\u6839\u7684\u65b9\u5411\u4e0a\u8d70\uff0c\u76f4\u5230\u80fd\u653e\u5165 X</p> <p>\u5047\u8bbe heap\u7684\u9ad8\u5ea6\u4e3ah, binary tree\u6700\u591a\u67092^(h+1) - 1 \u4e2a nodes. \u56e0\u6b64\u65b0\u63d2\u5165\u4e00\u4e2anode\u6700\u591a\u9700\u8981log(n+1) -1 \u6b21\u6bd4\u8f83. big O is \\(O(logN)\\)\u200b </p>"},{"location":"Courses/FDS.html#deletemin","title":"DeleteMin","text":""},{"location":"Courses/FDS.html#percolate-down","title":"\u4e0b\u6ee4 percolate down","text":"<p>\u5c06\u5220\u9664\u5143\u7d20\u4e2d\u513f\u5b50\u7684\u8f83\u5c0f\u503c\u653e\u5165\u7a7a\u7a74\uff0c\u7a7a\u7a74\u4e0b\u79fb\u4e00\u5c42\uff0c\u91cd\u590d\u64cd\u4f5c\uff0c\u76f4\u5230\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u653e\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a\uff08\u8981\u6ee1\u8db3\u5b8c\u5168\u4e8c\u53c9\u6811\uff09</p>"},{"location":"Courses/FDS.html#build","title":"Build","text":"<p>\u7528 Insert\uff0c O(N)\uff0c\u6700\u4f18\u65b9\u6cd5\u91c7\u7528\u7684\u662f\u9012\u5f52\uff0c\u81ea\u4e0b\u800c\u4e0a\u7684build</p>"},{"location":"Courses/FDS.html#increasekey","title":"IncreaseKey","text":"<pre><code>void IncreaseKey( int P, int D, PriorityQueue H )\n{\n   int i, key;\n   key = H-&gt;Elements[P] + D;\n   for ( i = P; H-&gt;Elements[i/2] &lt; key; i/=2 )     \n        H-&gt;element[i]=H-&gt;Element[i/2];\n   H-&gt;Elements[i] = key;\n}\n</code></pre>"},{"location":"Courses/FDS.html#decreasekey","title":"DecreaseKey","text":"<pre><code>void DecreaseKey( int P, int D, PriorityQueue H )\n{\n    int i, key;\n    key = H-&gt;Elements[P] - D;\n    for ( i = P; H-&gt;Elements[i/2] &gt; key; i/=2 )\n        H-&gt;Elements[i] = H-&gt;Elements[i/2];\n    H-&gt;Elements[i] = key;\n}\n</code></pre>"},{"location":"Courses/FDS.html#relation","title":"\u5173\u7cfb Relation","text":""},{"location":"Courses/FDS.html#equivalence-relation","title":"\u7b49\u4ef7\u5173\u7cfb equivalence relation","text":"<ul> <li>\u81ea\u53cd\u6027 reflexive</li> <li>\u5bf9\u79f0\u6027 symmetric</li> <li>\u4f20\u9012\u6027 transitive</li> </ul> <p>eg. \u76f8\u4f3c\u3001\u6a21\u8fd0\u7b97\u3001\u56fe\u50cf\u8fde\u901a\u6027</p>"},{"location":"Courses/FDS.html#equivalence-class","title":"\u7b49\u4ef7\u7c7b equivalence class","text":"<p>\u5bf9\u4e8e \u96c6\u5408 S \u6709 n \u4e2a\u5143\u7d20\uff0c\u7b49\u4ef7\u7c7b equivalence class \u6570\u91cf x\uff0c \u6709 1\u2264x\u2264n \u4e2a\u7b49\u4ef7\u7c7b\u5f62\u6210\u5bf9 S \u7684\u4e00\u4e2a\u5212\u5206\uff1aS \u7684\u6bcf\u4e2a\u6210\u5458\u6070\u597d\u51fa\u73b0\u5728\u4e00\u4e2a\u7b49\u4ef7\u7c7b\u4e2d</p> <p>\u4e0d\u76f8\u4ea4 disjoint</p>"},{"location":"Courses/FDS.html#unionfind","title":"Union/Find \u7b97\u6cd5\uff08\u5e76\u67e5\u7b97\u6cd5\uff09","text":"<p>array[] \u4e2d\u6bcf\u4e2a\u5143\u7d20\u5b58\u7684\u662f\u5b83\u7684\u6839\u8282\u70b9\u7684\u503cIntroduction to Disjoint Set (Union-Find Algorithm) - GeeksforGeeks</p>"},{"location":"Courses/FDS.html#find","title":"Find","text":"<p>Find(i) O(X)\u4e0e X \u8282\u70b9\u7684\u6df1\u5ea6\u6210\u6b63\u6bd4 \u8fd4\u56de\u7b49\u4ef7\u7c7b\u540d\u5b57\uff08\u5f53\u4e14\u4ec5\u5f53\u4e24\u4e2a\u5143\u7d20\u5c5e\u4e8e\u76f8\u540c\u96c6\u5408\u65f6\uff0cFind \u8fd4\u56de\u76f8\u540c\u540d\u5b57 <pre><code>// Finds the representative of the set\n// that i is an element of\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint find(int i)\n{\n    // If i is the parent of itself\n    if (parent[i] == i) {\n        // Then i is the representative of\n        // this set\n        return i;\n    }\n    else {\n        // Else if i is not the parent of\n        // itself, then i is not the\n        // representative of his set. So we\n        // recursively call Find on its parent\n        return find(parent[i]);\n    }\n}\n// The code is contributed by Nidhi goel\n</code></pre> <pre><code>Find ( ElementType X, DisjSet S )\n{   \n    ElementType root, trail, lead;\n\n    for ( root = X; S[root] &gt; 0; root=S[root]) ;  \n    for ( trail = X; trail != root; trail = lead ) {\n        lead = S[trail] ;   \n        S[trail]=root;   \n    } \n    return root;\n}\n</code></pre></p>"},{"location":"Courses/FDS.html#union","title":"Union","text":"<p>Union(a,b) \u0398(N) \u5c06 a \u548c b \u4e24\u4e2a\u7b49\u4ef7\u7c7b\u5408\u5e76\u6210\u4e00\u4e2a\u65b0\u7684\u7b49\u4ef7\u7c7bUnion(a,b)\u540e\u65b0\u7684\u6839\u662f a <pre><code>// Unites the set that includes i\n// and the set that includes j\n\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid union(int i, int j) {\n    // Find the representatives\n    // (or the root nodes) for the set\n    // that includes i\n    int irep = this.Find(i),\n    // And do the same for the set\n    // that includes j\n    int jrep = this.Find(j);\n    // Make the parent of i\u2019s representative\n    // be j\u2019s representative effectively\n    // moving all of i\u2019s set into j\u2019s set)\n    this.Parent[irep] = jrep;\n}\n</code></pre></p>"},{"location":"Courses/FDS.html#union-by-size","title":"union-by-size \u6309\u5927\u5c0f\u6c42\u5e76","text":"<p>\u5c0f\u7684\u5e76\u5230\u5927\u7684\u4e0a\u4efb\u4f55\u8282\u70b9\u7684\u6df1\u5ea6 depth \u4e0d\u4f1a\u8d85\u8fc7\\(log(N)\\)\\(height(T)\u2264\u230alog_2 N\u230b +1\\)</p>"},{"location":"Courses/FDS.html#union-by-height","title":"union-by-height \u6309\u9ad8\u5ea6\u6c42\u5e76","text":"<p>\u4efb\u4f55\u8282\u70b9\u7684\u6df1\u5ea6 depth \u2264 \u4e0d\u4f1a\u8d85\u8fc7\\(log(N)\\)</p>"},{"location":"Courses/FDS.html#path-compression","title":"\u8def\u5f84\u538b\u7f29 path compression","text":"<p>\u5728 Find \u64cd\u4f5c\u4e2d\u6267\u884c\uff0c \u4ece X \u5230\u6839\u7684\u8def\u5f84\u4e0a\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u4f7f\u5b83\u7684\u7236\u8282\u70b9\u53d8\u6210\u6839\uff0c\u5373 \u4f7f S[X] \u7684\u503c\u7b49\u4e8e Find \u8fd4\u56de\u7684\u503c\u8def\u5f84\u538b\u7f29\u4e0e\u6309\u5927\u5c0f\u6c42\u5e76\u5b8c\u5168\u517c\u5bb9 <pre><code>SetType Find ( ElementType X, DisjSet S )\n{   \n   ElementType root, trail, lead;\n\n   for ( root = X; S[root] &gt; 0; root=S[root]) ;  \n   for ( trail = X; trail != root; trail = lead ) {\n      lead = S[trail] ;   \n      S[trail]=root;   \n   } \n   return root;\n}\n</code></pre> <pre><code>//The function BuildMinHeap(H, K) is to arrange elements H[1] ... H[K] into a min-heap. \n//Please complete the following program.\n\nElementType FindKthLargest ( int A[], int N, int K )\n{   /* it is assumed that K&lt;=N */\n    ElementType *H;\n    int i, next, child;\n\n    H = (ElementType *)malloc((K+1)*sizeof(ElementType));\n    for ( i=1; i&lt;=K; i++ ) H[i] = A[i-1];\n    BuildMinHeap(H, K);\n\n    for ( next=K; next&lt;N; next++ ) {\n        H[0] = A[next];\n        if ( H[0] &gt; H[1] ) {\n            for ( i=1; i*2&lt;=K; i=child ) {\n                child = i*2;\n                if ( child!=K &amp;&amp; H[child+1]&lt;H[child] ) child++;\n                if ( H[0] &gt; H[child] )\n                    H[i] = H[child];\n                else break;\n            }\n            H[i] = H[0];\n        }\n    }\n    return H[1];\n}\n</code></pre></p>"},{"location":"Courses/FDS.html#q_6","title":"Q","text":"<ol> <li>The array representation of a disjoint set is given by { 4, 6, 5, 2, -3, -4, 3 }. If the elements are numbered from 1 to 7, the resulting array after invoking <code>Union(Find(7),Find(1))</code> with union-by-size and path-compression is: </li> <li>{ 4, 6, 5, 2, 6, -7, 3 }</li> <li>{ 4, 6, 5, 2, -7, 5, 3 }</li> <li>{ 6, 6, 5, 6, -7, 5, 5 }</li> <li>{ 6, 6, 5, 6, 6, -7, 5 }    ##### </li> </ol>"},{"location":"Courses/FDS.html#graph","title":"\u56fe Graph","text":""},{"location":"Courses/FDS.html#introduction","title":"introduction","text":"<p>In a directed graph, the sum of the in-degrees and out-degrees of all the vertices is twice the total number of edges.\u6c42\u548c degree=2E\u6709\u6700\u591a\u7684\u8fb9\u7684\u6570\u91cf\u6709\u5411\u56fe\u662f n(n-1) ,\u65e0\u5411\u56fe\u662f n(n-1) /2*</p>"},{"location":"Courses/FDS.html#connected","title":"connected","text":"<p>There are n vertices. The minimum number of edges in a connected graph is (n-1). The maximum for this question is (n-1) (n-2)/2 + 1. This is because (n-1) edges can be connected by maximum (n-1) (n-2)/2 edges, and 1 edge to connect to the lonely vertex.</p>"},{"location":"Courses/FDS.html#articulation-pointcut-vertex","title":"\u5272\u70b9 articulation point/cut vertex","text":"<p>A vertex v is an articulation point (also called cut vertex) if removing v increases the number of connected components.</p>"},{"location":"Courses/FDS.html#topological","title":"\u62d3\u6251\u6392\u5e8f topological","text":"<p>\u5bf9\u6709\u5411\u65e0\u5708\u56fe\u7684\u9876\u70b9\u7684\u4e00\u79cd\u6392\u5e8f</p>"},{"location":"Courses/FDS.html#dijkstra-algorithm","title":"Dijkstra algorithm","text":"<p>\u627e\u5230\u4ece\u4e00\u4e2a\u7ed9\u5b9a\u70b9\u5230\u6240\u6709\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(|E|+|V|^2)\\)</p>"},{"location":"Courses/FDS.html#maximum-network-flow","title":"Maximum Network Flow  \u6700\u5927\u7f51\u7edc\u6d41","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u8868\u793a\u6d41\u7f51\u7edc\u7684\u56fe\uff0c\u5176\u4e2d\u6bcf\u6761\u8fb9\u90fd\u6709\u5bb9\u91cf\u3002\u8fd8\u7ed9\u5b9a\u56fe\u4e2d\u7684\u4e24\u4e2a\u9876\u70b9\u6e90\u201cs\u201d\u548c\u6c47\u201ct\u201d\uff0c\u5728\u4ee5\u4e0b\u7ea6\u675f\u4e0b\u627e\u5230\u4ece s \u5230 t \u7684\u6700\u5927\u53ef\u80fd\u6d41\u91cf\uff1a  </p> <ol> <li>\u8fb9\u7f18\u4e0a\u7684\u6d41\u91cf\u4e0d\u4f1a\u8d85\u8fc7\u8fb9\u7f18\u7684\u7ed9\u5b9a\u5bb9\u91cf\u3002</li> <li>\u5bf9\u4e8e\u9664 s \u548c t \u4e4b\u5916\u7684\u6bcf\u4e2a\u9876\u70b9\uff0c\u4f20\u5165\u6d41\u7b49\u4e8e\u4f20\u51fa\u6d41\u3002</li> </ol>"},{"location":"Courses/FDS.html#dinic","title":"Dinic","text":"<p>Dinic\u2019s algorithm for Maximum Flow - GeeksforGeeksDinic \u7684\u7b97\u6cd5\u4f7f\u7528\u4ee5\u4e0b\u6982\u5ff5\uff1a </p> <ol> <li>\u5c06\u6b8b\u5dee\u56fe G \u521d\u59cb\u5316\u4e3a\u7ed9\u5b9a\u56fe\u3002</li> <li>\u5bf9 G \u8fdb\u884c BFS \u6765\u6784\u9020\u4e00\u4e2a\u7ea7\u522b\u56fe\uff08\u6216\u5c06\u7ea7\u522b\u5206\u914d\u7ed9\u9876\u70b9\uff09\uff0c\u5e76\u68c0\u67e5\u662f\u5426\u53ef\u4ee5\u6709\u66f4\u591a\u6d41\u3002</li> <li>\u5982\u679c\u65e0\u6cd5\u83b7\u5f97\u66f4\u591a\u6d41\u91cf\uff0c\u5219\u8fd4\u56de</li> <li>\u4f7f\u7528\u7ea7\u522b\u56fe\u5728 G \u4e2d\u53d1\u9001\u591a\u4e2a\u6d41\uff0c\u76f4\u5230\u8fbe\u5230 \u963b\u585e\u6d41\u3002_\u8fd9\u91cc\u4f7f\u7528\u7ea7\u522b\u56fe\u610f\u5473\u7740\uff0c\u5728\u6bcf\u4e2a\u6d41\u4e2d\uff0c\u4ece s \u5230 t\uff0c\u8def\u5f84\u8282\u70b9\u7684\u7ea7\u522b\u5e94\u8be5\u662f 0\u30011\u30012\u2026\uff08\u6309\u987a\u5e8f\uff09\u3002</li> </ol> <p>\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(EV^2)\\) <pre><code>// C++ implementation of Dinic's Algorithm\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// A structure to represent a edge between\n// two vertex\nstruct Edge {\n    int v; // Vertex v (or \"to\" vertex)\n        // of a directed edge u-v. \"From\"\n        // vertex u can be obtained using\n        // index in adjacent array.\n\n    int flow; // flow of data in edge\n\n    int C; // capacity\n\n    int rev; // To store index of reverse\n            // edge in adjacency list so that\n            // we can quickly find it.\n};\n\n// Residual Graph\nclass Graph {\n    int V; // number of vertex\n    int* level; // stores level of a node\n    vector&lt;Edge&gt;* adj;\n\npublic:\n    Graph(int V)\n    {\n        adj = new vector&lt;Edge&gt;[V];\n        this-&gt;V = V;\n        level = new int[V];\n    }\n\n    // add edge to the graph\n    void addEdge(int u, int v, int C)\n    {\n        // Forward edge : 0 flow and C capacity\n        Edge a{ v, 0, C, (int)adj[v].size() };\n\n        // Back edge : 0 flow and 0 capacity\n        Edge b{ u, 0, 0, (int)adj[u].size() };\n\n        adj[u].push_back(a);\n        adj[v].push_back(b); // reverse edge\n    }\n\n    bool BFS(int s, int t);\n    int sendFlow(int s, int flow, int t, int ptr[]);\n    int DinicMaxflow(int s, int t);\n};\n\n// Finds if more flow can be sent from s to t.\n// Also assigns levels to nodes.\nbool Graph::BFS(int s, int t)\n{\n    for (int i = 0; i &lt; V; i++)\n        level[i] = -1;\n\n    level[s] = 0; // Level of source vertex\n\n    // Create a queue, enqueue source vertex\n    // and mark source vertex as visited here\n    // level[] array works as visited array also.\n    list&lt;int&gt; q;\n    q.push_back(s);\n\n    vector&lt;Edge&gt;::iterator i;\n    while (!q.empty()) {\n        int u = q.front();\n        q.pop_front();\n        for (i = adj[u].begin(); i != adj[u].end(); i++) {\n            Edge&amp; e = *i;\n            if (level[e.v] &lt; 0 &amp;&amp; e.flow &lt; e.C) {\n                // Level of current vertex is,\n                // level of parent + 1\n                level[e.v] = level[u] + 1;\n\n                q.push_back(e.v);\n            }\n        }\n    }\n\n    // IF we can not reach to the sink we\n    // return false else true\n    return level[t] &lt; 0 ? false : true;\n}\n\n// A DFS based function to send flow after BFS has\n// figured out that there is a possible flow and\n// constructed levels. This function called multiple\n// times for a single call of BFS.\n// flow : Current flow send by parent function call\n// start[] : To keep track of next edge to be explored.\n//       start[i] stores count of edges explored\n//       from i.\n// u : Current vertex\n// t : Sink\nint Graph::sendFlow(int u, int flow, int t, int start[])\n{\n    // Sink reached\n    if (u == t)\n        return flow;\n\n    // Traverse all adjacent edges one -by - one.\n    for (; start[u] &lt; adj[u].size(); start[u]++) {\n        // Pick next edge from adjacency list of u\n        Edge&amp; e = adj[u][start[u]];\n\n        if (level[e.v] == level[u] + 1 &amp;&amp; e.flow &lt; e.C) {\n            // find minimum flow from u to t\n            int curr_flow = min(flow, e.C - e.flow);\n\n            int temp_flow\n                = sendFlow(e.v, curr_flow, t, start);\n\n            // flow is greater than zero\n            if (temp_flow &gt; 0) {\n                // add flow to current edge\n                e.flow += temp_flow;\n\n                // subtract flow from reverse edge\n                // of current edge\n                adj[e.v][e.rev].flow -= temp_flow;\n                return temp_flow;\n            }\n        }\n    }\n\n    return 0;\n}\n\n// Returns maximum flow in graph\nint Graph::DinicMaxflow(int s, int t)\n{\n    // Corner case\n    if (s == t)\n        return -1;\n\n    int total = 0; // Initialize result\n\n    // Augment the flow while there is path\n    // from source to sink\n    while (BFS(s, t) == true) {\n        // store how many edges are visited\n        // from V { 0 to V }\n        int* start = new int[V + 1]{ 0 };\n\n        // while flow is not zero in graph from S to D\n        while (int flow = sendFlow(s, INT_MAX, t, start)) {\n\n            // Add path flow to overall flow\n            total += flow;\n        }\n\n        // Remove allocated array\n        delete[] start;\n    }\n\n    // return maximum flow\n    return total;\n}\n\n// Driver Code\nint main()\n{\n    Graph g(6);\n    g.addEdge(0, 1, 16);\n    g.addEdge(0, 2, 13);\n    g.addEdge(1, 2, 10);\n    g.addEdge(1, 3, 12);\n    g.addEdge(2, 1, 4);\n    g.addEdge(2, 4, 14);\n    g.addEdge(3, 2, 9);\n    g.addEdge(3, 5, 20);\n    g.addEdge(4, 3, 7);\n    g.addEdge(4, 5, 4);\n\n    // next exmp\n    /*g.addEdge(0, 1, 3 );\n    g.addEdge(0, 2, 7 ) ;\n    g.addEdge(1, 3, 9);\n    g.addEdge(1, 4, 9 );\n    g.addEdge(2, 1, 9 );\n    g.addEdge(2, 4, 9);\n    g.addEdge(2, 5, 4);\n    g.addEdge(3, 5, 3);\n    g.addEdge(4, 5, 7 );\n    g.addEdge(0, 4, 10);\n\n    // next exp\n    g.addEdge(0, 1, 10);\n    g.addEdge(0, 2, 10);\n    g.addEdge(1, 3, 4 );\n    g.addEdge(1, 4, 8 );\n    g.addEdge(1, 2, 2 );\n    g.addEdge(2, 4, 9 );\n    g.addEdge(3, 5, 10 );\n    g.addEdge(4, 3, 6 );\n    g.addEdge(4, 5, 10 ); */\n\n    cout &lt;&lt; \"Maximum flow \" &lt;&lt; g.DinicMaxflow(0, 5);\n    return 0;\n}\n</code></pre> Ford-</p>"},{"location":"Courses/FDS.html#mst","title":"MST \u6700\u5c0f\u751f\u6210\u6811","text":"<p>\u6700\u5c0f\u751f\u6210\u6811(MST) \u6216\u5e26\u6743\u8fde\u901a\u65e0\u5411\u56fe\u7684\u6700\u5c0f\u6743\u91cd\u751f\u6210\u6811\u662f\u6743\u91cd\u5c0f\u4e8e\u6216\u7b49\u4e8e\u6240\u6709\u5176\u4ed6\u751f\u6210\u6811\u6743\u91cd\u7684\u751f\u6210\u6811\u3002</p>"},{"location":"Courses/FDS.html#necessary-and-sufficient-condition-for-unique-mst","title":"Necessary-And-Sufficient-Condition-for-Unique-MST","text":"<p>Necessary-And-Sufficient-Condition-for-Unique-MSTLet \ud835\udc3a _be a connecte d weighted graph and _\ud835\udc47 a minimum spanning tree of \ud835\udc3a. Show that \ud835\udc47 is a unique minimum spanning tree if and only if the weight of each edge \ud835\udc52 _of _\ud835\udc3a that is not in \ud835\udc47 exceeds the weight of every other edge on the cycle in \ud835\udc47+\ud835\udc52 .</p> <ol> <li>Existence of Minimum Spanning Tree (MST):    - If the graph is connected, a minimum spanning tree always exists.    - For an undirected connected graph, the minimum spanning tree is a subset of edges that forms a tree connecting all vertices with the minimum possible total edge weight.</li> <li>Conditions for Existence:    - In a connected graph, a minimum spanning tree is guaranteed.    - If the graph is not connected, there won't be a minimum spanning tree [4].</li> <li>Algorithms:    - Kruskal's and Prim's algorithms are commonly used to find the minimum spanning tree of a connected graph.</li> </ol>"},{"location":"Courses/FDS.html#prim","title":"Prim \u7b97\u6cd5","text":"<p>\u4ece\u5df2\u7ecf\u5728 MST \u91cc\u9762\u7684\u9876\u70b9\u4e2d\uff0c\u8fde\u63a5\u672a\u5728 MST \u4e2d\u7684\u9876\u70b9\uff0c\u4f7f\u5176\u8fb9\u6743\u6700\u5c0fStep 1: Determine an arbitrary vertex as the starting vertex of the MST.Step 2: Follow steps 3 to 5 till there are vertices that are not included in the MST (known as fringe vertex).Step 3: Find edges connecting any tree vertex with the fringe vertices.Step 4: Find the minimum among these edges.Step 5: Add the chosen edge to the MST if it does not form any cycle.Step 6: Return the MST and exit <pre><code>// A C program for Prim's Minimum\n// Spanning Tree (MST) algorithm. The program is\n// for adjacency matrix representation of the graph\n\n#include &lt;limits.h&gt;\n#include &lt;stdbool.h&gt;\n#include &lt;stdio.h&gt;\n\n// Number of vertices in the graph\n#define V 5\n\n// A utility function to find the vertex with\n// minimum key value, from the set of vertices\n// not yet included in MST\nint minKey(int key[], bool mstSet[])\n{\n    // Initialize min value\n    int min = INT_MAX, min_index;\n\n    for (int v = 0; v &lt; V; v++)\n        if (mstSet[v] == false &amp;&amp; key[v] &lt; min)\n            min = key[v], min_index = v;\n\n    return min_index;\n}\n\n// A utility function to print the\n// constructed MST stored in parent[]\nint printMST(int parent[], int graph[V][V])\n{\n    printf(\"Edge \\tWeight\\n\");\n    for (int i = 1; i &lt; V; i++)\n        printf(\"%d - %d \\t%d \\n\", parent[i], i,\n            graph[i][parent[i]]);\n}\n\n// Function to construct and print MST for\n// a graph represented using adjacency\n// matrix representation\nvoid primMST(int graph[V][V])\n{\n    // Array to store constructed MST\n    int parent[V];\n    // Key values used to pick minimum weight edge in cut\n    int key[V];\n    // To represent set of vertices included in MST\n    bool mstSet[V];\n\n    // Initialize all keys as INFINITE\n    for (int i = 0; i &lt; V; i++)\n        key[i] = INT_MAX, mstSet[i] = false;\n\n    // Always include first 1st vertex in MST.\n    // Make key 0 so that this vertex is picked as first\n    // vertex.\n    key[0] = 0;\n\n    // First node is always root of MST\n    parent[0] = -1;\n\n    // The MST will have V vertices\n    for (int count = 0; count &lt; V - 1; count++) {\n\n        // Pick the minimum key vertex from the\n        // set of vertices not yet included in MST\n        int u = minKey(key, mstSet);\n\n        // Add the picked vertex to the MST Set\n        mstSet[u] = true;\n\n        // Update key value and parent index of\n        // the adjacent vertices of the picked vertex.\n        // Consider only those vertices which are not\n        // yet included in MST\n        for (int v = 0; v &lt; V; v++)\n\n            // graph[u][v] is non zero only for adjacent\n            // vertices of m mstSet[v] is false for vertices\n            // not yet included in MST Update the key only\n            // if graph[u][v] is smaller than key[v]\n            if (graph[u][v] &amp;&amp; mstSet[v] == false\n                &amp;&amp; graph[u][v] &lt; key[v])\n                parent[v] = u, key[v] = graph[u][v];\n    }\n\n    // print the constructed MST\n    printMST(parent, graph);\n}\n\n// Driver's code\nint main()\n{\n    int graph[V][V] = { { 0, 2, 0, 6, 0 },\n                        { 2, 0, 3, 8, 5 },\n                        { 0, 3, 0, 0, 7 },\n                        { 6, 8, 0, 0, 9 },\n                        { 0, 5, 7, 9, 0 } };\n\n    // Print the solution\n    primMST(graph);\n\n    return 0;\n}\n</code></pre> \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(V^2)\\)\uff0c\u5982\u679c\u8f93\u5165\u56fe\u4f7f\u7528\u90bb\u63a5\u8868\u6765\u8868\u793a\uff0c\u90a3\u4e48\u501f\u52a9\u4e8c\u53c9\u5806\uff0cPrim\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u964d\u4f4e\u5230\\(O(E * logV)\\)\u3002\u5728\u8fd9\u4e2a\u5b9e\u73b0\u4e2d\uff0c\u6211\u4eec\u603b\u662f\u8003\u8651\u751f\u6210\u6811\u4ece\u56fe\u7684\u6839\u5f00\u59cb\u7a7a\u95f4\uff1a\\(O(V)\\)</p>"},{"location":"Courses/FDS.html#kruskal","title":"Kruskal \u7b97\u6cd5","text":"<p>Kruskal\u2019s Minimum Spanning Tree (MST) Algorithm - GeeksforGeeks\u5728\u514b\u9c81\u65af\u5361\u5c14\u7b97\u6cd5\u4e2d\uff0c\u6309\u5347\u5e8f\u5bf9\u7ed9\u5b9a\u56fe\u7684\u6240\u6709\u8fb9\u8fdb\u884c\u6392\u5e8f\u3002\u5982\u679c\u65b0\u6dfb\u52a0\u7684\u8fb9\u4e0d\u5f62\u6210\u73af\uff0c\u5219\u7ee7\u7eed\u5728MST\u4e2d\u6dfb\u52a0\u65b0\u7684\u8fb9\u548c\u8282\u70b9\u3002\u5b83\u9996\u5148\u9009\u62e9\u6700\u5c0f\u52a0\u6743\u8fb9\uff0c\u6700\u540e\u9009\u62e9\u6700\u5927\u52a0\u6743\u8fb9\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8bf4\u5b83\u5728\u6bcf\u4e00\u6b65\u4e2d\u90fd\u505a\u51fa\u5c40\u90e8\u6700\u4f18\u9009\u62e9\u4ee5\u627e\u5230\u6700\u4f18\u89e3\u3002\u56e0\u6b64\u8fd9\u662f\u4e00\u4e2a\u8d2a\u5a6a\u7b97\u6cd5\u3002</p> <ol> <li>\u6309\u6743\u91cd\u975e\u964d\u5e8f\u5bf9\u6240\u6709\u8fb9\u8fdb\u884c\u6392\u5e8f\u3002 </li> <li>\u9009\u62e9\u6700\u5c0f\u7684\u8fb9\u3002\u68c0\u67e5\u662f\u5426\u4e0e\u76ee\u524d\u5f62\u6210\u7684\u751f\u6210\u6811\u5f62\u6210\u73af\u3002\u5982\u679c\u672a\u5f62\u6210\u5faa\u73af\uff0c\u5219\u5305\u62ec\u8be5\u8fb9\u3002\u5426\u5219\uff0c\u4e22\u5f03\u5b83\u3002 </li> <li>\u91cd\u590d\u6b65\u9aa42\uff0c\u76f4\u5230\u751f\u6210\u6811\u4e2d\u6709 (V-1) \u6761\u8fb9\u3002 <pre><code>// C++ program for the above approach \n\n#include &lt;bits/stdc++.h&gt; \nusing namespace std; \n\n// DSU data structure \n// path compression + rank by union \nclass DSU { \n    int* parent; \n    int* rank; \n\npublic: \n    DSU(int n) \n    { \n        parent = new int[n]; \n        rank = new int[n]; \n\n        for (int i = 0; i &lt; n; i++) { \n            parent[i] = -1; \n            rank[i] = 1; \n        } \n    } \n\n    // Find function \n    int find(int i) \n    { \n        if (parent[i] == -1) \n            return i; \n\n        return parent[i] = find(parent[i]); \n    } \n\n    // Union function \n    void unite(int x, int y) \n    { \n        int s1 = find(x); \n        int s2 = find(y); \n\n        if (s1 != s2) { \n            if (rank[s1] &lt; rank[s2]) { \n                parent[s1] = s2; \n            } \n            else if (rank[s1] &gt; rank[s2]) { \n                parent[s2] = s1; \n            } \n            else { \n                parent[s2] = s1; \n                rank[s1] += 1; \n            } \n        } \n    } \n}; \n\nclass Graph { \n    vector&lt;vector&lt;int&gt; &gt; edgelist; \n    int V; \n\npublic: \n    Graph(int V) { this-&gt;V = V; } \n\n    // Function to add edge in a graph \n    void addEdge(int x, int y, int w) \n    { \n        edgelist.push_back({ w, x, y }); \n    } \n\n    void kruskals_mst() \n    { \n        // Sort all edges \n        sort(edgelist.begin(), edgelist.end()); //\u8fb9\u6392\u5e8f\n\n        // Initialize the DSU \n        DSU s(V); \n        int ans = 0; \n        cout &lt;&lt; \"Following are the edges in the \"\n                \"constructed MST\"\n            &lt;&lt; endl; \n        for (auto edge : edgelist) { \n            int w = edge[0]; \n            int x = edge[1]; \n            int y = edge[2]; \n\n            // Take this edge in MST if it does \n            // not forms a cycle \n            if (s.find(x) != s.find(y)) { \n                s.unite(x, y); \n                ans += w; \n                cout &lt;&lt; x &lt;&lt; \" -- \" &lt;&lt; y &lt;&lt; \" == \" &lt;&lt; w \n                    &lt;&lt; endl; \n            } \n        } \n        cout &lt;&lt; \"Minimum Cost Spanning Tree: \" &lt;&lt; ans; \n    } \n}; \n\n// Driver code \nint main() \n{ \n    Graph g(4); \n    g.addEdge(0, 1, 10); \n    g.addEdge(1, 3, 15); \n    g.addEdge(2, 3, 4); \n    g.addEdge(2, 0, 6); \n    g.addEdge(0, 3, 5); \n\n    // Function call \n    g.kruskals_mst(); \n\n    return 0; \n}\n</code></pre> \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(E * logE)\\) \u6216 \\(O(E * logV)\\) </li> </ol> <ul> <li>\u8fb9\u6392\u5e8f\u9700\u8981 \\(O(E * logE)\\) \u65f6\u95f4\u3002 </li> <li>\u6392\u5e8f\u540e\uff0c\u6211\u4eec\u8fed\u4ee3\u6240\u6709\u8fb9\u5e76\u5e94\u7528\u67e5\u627e\u5e76\u96c6\u7b97\u6cd5\u3002\u67e5\u627e\u548c\u5e76\u96c6\u64cd\u4f5c\u6700\u591a\u9700\u8981 \\(O(logV)\\) \u65f6\u95f4\u3002</li> <li>\u6240\u4ee5\u603b\u4f53\u590d\u6742\u5ea6\u662f \\(O(E * logE + E * logV)\\) \u65f6\u95f4\u3002 </li> <li>E\u7684\u503c\u6700\u591a\u53ef\u4ee5\u662fO(V 2 )\uff0c\u56e0\u6b64O(logV)\u548cO(logE)\u662f\u76f8\u540c\u7684\u3002\u56e0\u6b64\uff0c\u603b\u4f53\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(E * logE)\\)\u6216 \\(O(E*logV)\\)</li> </ul>"},{"location":"Courses/FDS.html#dfs","title":"DFS \u6df1\u5ea6\u4f18\u5148\u641c\u7d22","text":"<ol> <li>\u6700\u521d\u5806\u6808\u548c\u8bbf\u95ee\u6570\u7ec4\u90fd\u662f\u7a7a\u7684\u3002</li> <li>\u8bbf\u95ee\u67d0\u4e00\u8282\u70b9\uff0c\u5c06\u5176\u672a\u8bbf\u95ee\u8fc7\u7684\u76f8\u90bb\u8282\u70b9\u653e\u5165\u6808\u4e2d\u3002</li> <li>\u8bbf\u95ee\u6808\u9876\u5e76\u5c06\u5176\u4ece\u6808\u4e2d\u5f39\u51fa\uff0c\u5e76\u5c06\u5176\u6240\u6709\u672a\u8bbf\u95ee\u7684\u76f8\u90bb\u8282\u70b9\u653e\u5165\u6808\u4e2d\u3002</li> <li>\u91cd\u590d\u6b65\u9aa4 3 \u76f4\u5230\u6808\u53d8\u7a7a\uff0cDFS \u7ed3\u675f</li> </ol>"},{"location":"Courses/FDS.html#find-articulation-point","title":"Find articulation point \u627e\u5272\u70b9","text":""},{"location":"Courses/FDS.html#strongly-connected-components","title":"Strongly Connected Components \u5f3a\u8fde\u901a\u7ec4\u4ef6","text":""},{"location":"Courses/FDS.html#tarjan","title":"Tarjan \u7b97\u6cd5 \u627e\u5272\u70b9\uff1f\u8fd8\u662f\u5f3a\u8fde\u901a\u7ec4\u4ef6","text":"<p>DFS+\u6808\u5b9e\u73b0\u54d4\u54e9\u54d4\u54e9\u89c6\u9891\u53c2\u8003 <pre><code>#include&lt;malloc.h&gt;\ntypedef struct VNode *PtrToVNode;\nstruct VNode {\n    Vertex Vert;\n    PtrToVNode Next;\n};\ntypedef struct GNode *Graph;\nstruct GNode {\n    int NumOfVertices;\n    int NumOfEdges;\n    PtrToVNode *Array;\n};\n\nint count=0;\n#define min(a,b) (((a)&lt;(b))?(a):(b))\nvoid find(Graph G, Vertex v, int num[],int low[], PtrToVNode stack, int visited[]);\nvoid push(int x, PtrToVNode s);\nint top(PtrToVNode s);\nvoid pop(PtrToVNode s);\nvoid StronglyConnectedComponents( Graph G, void (*visit)(Vertex V) ){\n    int low[MaxVertices]={0};\n    int visited[MaxVertices]={0};\n    int num[MaxVertices]={0};\n    PtrToVNode stack;\n    stack=malloc(sizeof(struct VNode));\n    for (int i = 0; i &lt; G-&gt;NumOfVertices; i++) {\n        if (num[i] == 0) {\n            find(G, i,num,low,stack,visited);\n        }\n    }\n}\nvoid find(Graph G, Vertex v, int num[],int low[], PtrToVNode stack, int visited[]){\n    visited[v]=1;\n    num[v] = low[v] = count++;\n    push(v,stack);\n    PtrToVNode w;\n    for(w=G-&gt;Array[v];w!=NULL;w=w-&gt;Next){\n        if(!num[w-&gt;Vert]){\n            find(G,w-&gt;Vert,num,low,stack,visited);\n\n            low[v]=min(low[v],low[w-&gt;Vert]);\n        }\n        else if(visited[w-&gt;Vert]){\n                low[v]=min(low[v],num[w-&gt;Vert]);\n            }\n\n    }\n    if(num[v]==low[v] ){\n        int t;\n        while(1){\n            if(t!=v ){\n                t=top(stack);\n                pop(stack);\n                visited[t]=0;\n                printf(\"%d \",t);\n            }else {\n                printf(\"\\n\");\n                break;\n            }\n        }\n\n    }\n}\nvoid push(int x, PtrToVNode s){\n    PtrToVNode tmp;\n    tmp=malloc(sizeof(struct VNode));\n    if(tmp!=NULL){\n        tmp-&gt;Vert=x;\n        tmp-&gt;Next=s-&gt;Next;\n        s-&gt;Next=tmp;\n    }\n}\nint top(PtrToVNode s){\n    if(s-&gt;Next!=NULL){\n        return s-&gt;Next-&gt;Vert;\n    }\n    return 0;\n}\nvoid pop(PtrToVNode s){\n    PtrToVNode a;\n    a=malloc(sizeof(struct VNode));\n    if(s-&gt;Next!=NULL){\n        a=s-&gt;Next;\n        s-&gt;Next=s-&gt;Next-&gt;Next;\n        free(a);\n    }\n}\n</code></pre> \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(E+V)\\)\u90bb\u63a5\u8868\uff1b\\(O(V^2)\\)\u90bb\u63a5\u77e9\u9635</p>"},{"location":"Courses/FDS.html#q_7","title":"Q","text":"<ol> <li>If an undirected graph G = (V, E) contains 10 vertices. Then to guarantee that G is connected in any cases, there has to be at least __ edges. \uff1f</li> <li>45</li> <li>37</li> <li>36</li> <li>9</li> <li>Which of the following statements is TRUE about topological sorting?</li> <li>If a graph has a topological sequence, then its adjacency matrix must be triangular.</li> <li>If the adjacency matrix is triangular, then the corresponding directed graph must have a unique topological sequence.</li> <li>In a DAG, if for any pair of distinct vertices Vi and Vj, there is a path either from Vi to Vj or from Vj to Vi, then the DAG must have a unique topological sequence.</li> <li>If Vi precedes Vj in a topological sequence, then there must be a path from Vi to V</li> <li>Let P be the shortest path from S to T. If the weight of every edge in the graph is incremented by 2, P will still be the shortest path from S to T.  F</li> </ol> <ol> <li>The minimum spanning tree of any connected weighted graph: \u4efb\u610f\u8fde\u901a\u52a0\u6743\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811C.may not be unique</li> <li>Apply DFS to a directed acyclic graph\uff08\u6709\u5411\u65e0\u5708\u56fe\uff09, and output the vertex before the end of each recursion. The output sequence will be:</li> </ol> <p>C.reversely topologically sorted</p> <ol> <li>Graph G is an undirected completed graph of 20 nodes. Is there an Euler circuit in G? If not, in order to have an Euler circuit, what is the minimum number of edges which should be removed from G?</li> </ol> <p>Each Node has exactly 19 degrees</p> <ul> <li>Euler Circuit (Strong Form) requires every node to be even degrees</li> <li>Euler Tour (Weak Form) requires 0 or 2 odd degrees</li> </ul> <p>Remove 1 edge, every 2 nodes will lose 1 degrees, so we lose 10 edges</p>"},{"location":"Courses/FDS.html#_5","title":"\u6570\u636e\u7ed3\u6784\u57fa\u7840","text":""},{"location":"Courses/FDS.html#questions","title":"Questions","text":""},{"location":"Courses/FDS.html#homework","title":"homework","text":"<ol> <li>For a sequentially stored linear list of length N, the time complexities for deleting the first element and inserting the last element are O(1) and O(N), respectively.      F O(N) and O(1) - \u987a\u5e8f\u5b58\u50a8\u7684\u7ebf\u6027\u8868\u652f\u6301\u968f\u673a\u5b58\u53d6\uff0c\u6240\u4ee5\u67e5\u8be2\u7684\u65f6\u95f4\u662f\u5e38\u6570\u65f6\u95f4\uff0c\u4f46\u63d2\u5165\u9700\u8981\u628a\u540e\u9762\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\u90fd\u8fdb\u884c\u8c03\u6574\uff0c\u6240\u4ee5\u662f\u7ebf\u6027\u65f6\u95f4\u3002 \u63d2\u5165\u6700\u540e\u4e00\u4e2a\u65f6\u95f4\u4e3aO(1).</li> <li>\u5faa\u73af\u961f\u5217\u6ee1\u65f6rear == front -1. enqueue\u65f6 rear \u589e\u52a0, dequeue front \u589e\u52a0.</li> <li>To insert s after p in a doubly linked circular list, we must do: <ul> <li>A. p-&gt;next=s; s-&gt;prior=p; p-&gt;next-&gt;prior=s ; </li> <li>B. p-&gt;next-&gt;prior=s; p-&gt;next=s; s-&gt;prior=p; s-&gt;next=p-&gt;next;</li> <li>C. s-&gt;prior=p; s-&gt;next=p-&gt;next; p-&gt;next=s; p-&gt;next-&gt;prior=s;</li> <li>D. s-&gt;prior=p; s-&gt;next=p-&gt;next; p-&gt;next-&gt;prior=s; p-&gt;next=s;</li> </ul> </li> <li>It is always possible to represent a tree by a one-dimensional integer array. T - It is always possible to represent a tree by a one-dimensional integer array using various techniques such as breadth-first or depth-first traversal.</li> <li> <p>If a general tree T is converted into a binary tree BT, then which of the following BT traversals gives the same sequence as that of the post-order traversal of T?</p> <ul> <li>A. Pre-order traversal</li> <li>B. In-order traversal</li> <li>C. Post-order traversal</li> <li>D. Level-order traversal T\u7684preorder = BT\u7684preorderT\u7684postorder = BT\u7684inorder</li> </ul> </li> <li> <p>Among the following threaded binary trees (the threads are represented by dotted curves), which one is the postorder threaded tree?</p> </li> </ol> <p> \u7ebf\u7d22\u4e8c\u53c9\u6811\u4e2d\uff0c\u5de6\u7ebf\u7d22\u4e3a\u4e0a\u4e00\u4e2a\u7ed3\u70b9\uff0c\u53f3\u7ebf\u7d22\u4e3a\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u540e\u5e8f\uff1a\u5de6\u53f3\u6839\u4e2d\u5e8f\uff1a\u5de6\u6839\u53f3\u524d\u5e8f\uff1a\u6839\u5de6\u53f3</p> <ol> <li>Suppose that an array of size 6 is used to store a circular queue, and the values of front and rear are 0 and 4, respectively. Now after 2 dequeues and 2 enqueues, what will the values of front and rear be?</li> <li>2 and 0</li> <li>2 and 2</li> <li>2 and 4</li> <li>2 and 6 - \u5934\u662f 0 \u800c\u4e0d\u662f 6</li> <li>Suppose that an array of size m is used to store a circular queue. If the head pointer front and the current size variable size are used to represent the range of the queue instead of front and rear, then the maximum capacity of this queue can be: (5\u5206)</li> <li>m-1</li> <li>m</li> <li>m+1</li> <li>cannot be determined - \u5c31\u662f\u6570\u7ec4\u7684\u5927\u5c0f</li> </ol>"},{"location":"Courses/FDS.html#midterm","title":"Midterm","text":"<ol> <li>The time comlexity of Selection Sort will be the same no matter we store the elements in an array or a linked list. T</li> <li>If N numbers are stored in a singly linked list in increasing order, then the average time complexity for binary search is O(logN). F \u94fe\u8868\u662f\u4e0d\u80fd\u4f7f\u7528\u6298\u534a\u67e5\u627e\u7684</li> <li>The time complexity of Selection Sort will be the same no matter we store the elements in an array or a linked list. T</li> <li>If a stack is used to convert the infix expression a+bc+(de+f)*g into a postfix expression, what will be in the stack (listing from the bottom up) when f is read?</li> <li>+(+</li> <li>+(*+</li> <li>abcde</li> <li>++(+</li> </ol> <p>\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u5316\u4e3a\u540e\u7f00\u8868\u8fbe\u5f0f\uff0c\u8f6c\u5316\u7684\u7b97\u6cd5\u5982\u4e0b\uff1a</p> <ul> <li>\u521d\u59cb\u5316\u4e00\u4e2a\u6808</li> <li>\u9010\u4e2a\u8bfb\u53d6\u5143\u7d20\uff08\u6570\u5b57\u6216\u8005\u64cd\u4f5c\u7b26\uff09</li> <li>\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u76f4\u63a5\u8f93\u51fa</li> <li>\u5982\u679c\u9047\u5230\u64cd\u4f5c\u7b26\uff08\u4e0d\u8003\u8651\u62ec\u53f7\uff09\uff0c\u5982\u679c\u5176\u4f18\u5148\u7ea7\u5927\u4e8e\u6808\u9876\u5143\u7d20\uff0c\u5c31\u5c06\u6808\u9876\u5f39\u51fa\uff0c\u5e76\u91cd\u590d\u6b64\u6b65\u9aa4\uff0c\u5426\u5219\u5c06\u8be5\u64cd\u4f5c\u7b26\u538b\u5165\u6808\u4e2d\uff08\u6808\u4e3a\u7a7a\u7684\u65f6\u5019\u4e5f\u76f4\u63a5\u538b\u6808\u5373\u53ef\uff09</li> <li>\u5982\u679c\u9047\u5230\u5de6\u62ec\u53f7\"(\"\uff0c\u76f4\u63a5\u5c06\u5176\u538b\u5165\u6808\u4e2d\uff0c\u5982\u679c\u9047\u5230\u53f3\u62ec\u53f7\")\"\uff0c\u5faa\u73af\u5f39\u51fa\u9876\u6808\u5143\u7d20\uff0c\u76f4\u5230\u5de6\u62ec\u53f7\u4e3a\u6b62\uff08\u5de6\u62ec\u53f7\u4e5f\u9700\u8981\u5f39\u51fa\uff0c\u53f3\u62ec\u53f7\u4e0d\u9700\u8981\u538b\u6808\uff09\uff0c\u5e76\u4e14\u8f93\u51fa\u6240\u6709\u88ab\u5f39\u6808\u9876\u5143\u7d20\uff08\u5de6\u62ec\u53f7\u9664\u5916\uff09 5. Suppose that a polynomial\uff08\u591a\u9879\u5f0f\uff09 is represented by a linked list storing its non-zero terms. Given two polynimials with N1 and N2 non-zero terms, and the highest exponents being M1 and M2, respectively. Then the time complexity for adding them up is:    1. O(N1\u00d7N2)    2. O(N1+N2)    3. O(M1\u00d7M2)    4. O(M1+M2) 6. </li> </ul>"},{"location":"Courses/FDS.html#pta-code","title":"Pta code","text":""},{"location":"Courses/FDS.html#true-or-flase","title":"True or Flase","text":"<p>\u7b97\u6cd5\u7ade\u8d5b\u57fa\u7840\u8bad\u7ec3\u9898_\u5224\u65ad\u9898_it is always possible to represent a tree by a one_\u767d\u672f_\u7af9\u82d3\u7684\u535a\u5ba2-CSDN\u535a\u5ba2</p>"},{"location":"Courses/FDS.html#function","title":"function","text":"<p><pre><code>List Reverse( List L ){\n    List head,node,temp;\n    node=L-&gt;Next;\n    while(node){\n        temp=node-&gt;Next;\n        node-&gt;Next=head;\n        head=node;\n        node=temp;\n    }\n    L-&gt;Next=head;\n    return L;\n}\n\n\ntypedef struct Node *PtrToNode;\ntypedef PtrToNode List;\ntypedef PtrToNode Position;\nstruct Node {\n    ElementType Element;\n    Position Next;\n};\n</code></pre> The function Reverse is supposed to return the reverse linked list of L, with a dummy header.</p> <pre><code>Polynomial Add( Polynomial a, Polynomial b ){\n    Polynomial head,temp,node;\n    if(a==NULL) return b;\n    if(b==NULL) return a;\n    node=(Polynomial)malloc(sizeof(Polynomial));\n    head=node;\n    a=a-&gt;Next;\n    b=b-&gt;Next;\n    while(b &amp;&amp; a){\n        temp=(Polynomial)malloc(sizeof(Polynomial));\n\n        if(b-&gt;Exponent &gt; a-&gt;Exponent){\n            temp-&gt;Coefficient=b-&gt;Coefficient;\n            temp-&gt;Exponent=b-&gt;Exponent;\n            b=b-&gt;Next;\n        }else if(b-&gt;Exponent &lt; a-&gt;Exponent){\n            temp-&gt;Coefficient=a-&gt;Coefficient;\n            temp-&gt;Exponent=a-&gt;Exponent;\n            a=a-&gt;Next;\n        }else{\n            temp-&gt;Coefficient=a-&gt;Coefficient + b-&gt;Coefficient;\n            temp-&gt;Exponent=a-&gt;Exponent;\n            a=a-&gt;Next;\n            b=b-&gt;Next;\n            if(temp-&gt;Coefficient==0) continue;\n        }\n        temp-&gt;Next=NULL;\n        node-&gt;Next=temp;\n        node=temp;\n    }\n    if(a) node-&gt;Next=a;\n    if(b) node-&gt;Next=b;\n    return head;\n}\n\ntypedef struct Node *PtrToNode;\nstruct Node {\n    int Coefficient;\n    int Exponent;\n    PtrToNode Next;\n};\ntypedef PtrToNode Polynomial;\n/* Nodes are sorted in decreasing order of exponents.*/  \n</code></pre> <p><pre><code>void Print_NLT( Tree T,  int X ){\n    if(T == NULL)return;//\u5982\u679c\u6811\u4e3a\u7a7a\uff0c\u8fd4\u56denull\n\n    //\u76f4\u63a5\u8fdb\u884c\u6811\u7684\u904d\u5386\uff0c\u56e0\u4e3a\u662f\u4ece\u5927\u5230\u5c0f\u8f93\u51fa\u4e0d\u5c0f\u4e8eX\u7684\u6570\n    //\u6240\u4ee5\u5148\u904d\u5386\u53f3\u5b50\u6811\uff0c\u5927\u4e8eX\u7684\u76f4\u63a5\u8f93\u51fa\uff0c\u518d\u904d\u5386\u5de6\u5b50\u6811.\n    Print_NLT(T-&gt;Right,X);\n    if(T-&gt;Element&gt;=X){\n        printf(\"%d \",T-&gt;Element);\n    }\n    Print_NLT(T-&gt;Left,X);\n\n}\n</code></pre> <pre><code>int Isomorphic( Tree T1, Tree T2 ){\n    if(T1==NULL &amp;&amp; T2==NULL)return 1;\n    if((T1==NULL&amp;&amp;T2!=NULL)||(T1!=NULL&amp;&amp;T2==NULL))return 0;\n    else if(T1-&gt;Element != T2-&gt;Element)return 0;\n    return (Isomorphic(T1-&gt;Left,T2-&gt;Left)&amp;&amp;Isomorphic(T1-&gt;Right,T2-&gt;Right)) || (Isomorphic(T1-&gt;Right,T2-&gt;Left)&amp;&amp;Isomorphic(T1-&gt;Left,T2-&gt;Right));\n}\n</code></pre> <pre><code>void PercolateUp( int p, PriorityQueue H )\n{\n    while (H-&gt;Elements[p] &lt; H-&gt;Elements[p/2] &amp;&amp; p&gt;1)\n    {\n        int temp;\n        temp=H-&gt;Elements[p];\n        H-&gt;Elements[p]=H-&gt;Elements[p/2];\n        H-&gt;Elements[p/2]=temp;\n        p /=2;\n    } \n}\n\nvoid PercolateDown( int p, PriorityQueue H )\n{\n    while (H-&gt;Elements[p] &gt; H-&gt;Elements[p*2] &amp;&amp; 2*p &lt;= H-&gt;Size )\n    {\n        int temp;\n        temp=H-&gt;Elements[p];\n        H-&gt;Elements[p]=H-&gt;Elements[p*2];\n        H-&gt;Elements[p*2]=temp;\n        p *=2;\n    } \n}\n</code></pre> \u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\uff08\u5468\u6d4b1-\u7b97\u6cd5\u5206\u6790\uff09 - nonlinearthink - \u535a\u5ba2\u56ed</p>"},{"location":"Courses/ML.html","title":"\u673a\u5668\u5b66\u4e60\u5728\u6570\u636e\u5206\u6790\u4e0a\u7684\u5b9e\u9645\u5e94\u7528","text":"<p> \u7ea6 1401 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 5 \u5206\u949f</p>"},{"location":"Courses/ML.html#1-data-analysis","title":"1 Data Analysis","text":""},{"location":"Courses/ML.html#data","title":"Data","text":"<ul> <li>data modalities: number, image, video, audio, text, graph, point cloud, etc.</li> <li>data cleaning</li> <li>data augmentation \u589e\u5f3a</li> <li> <p>feature extraction/feature engineering</p> </li> <li> <p>domain expertise</p> </li> <li> <p>math tricks</p> <ul> <li>kernel methods</li> <li>principal component analysis</li> <li>neural network</li> </ul> </li> <li>normalization/standardization</li> <li>imbalanced data</li> <li>data splitting</li> </ul>"},{"location":"Courses/ML.html#attributes","title":"Attributes","text":"<p>Nomial</p> <p>Ordinal\u5e8f\u6570</p> <p>Interval</p> <p>Ratio \u6bd4\u7387</p> <p></p>"},{"location":"Courses/ML.html#algorithm-model","title":"Algorithm / Model","text":"<p>discriminative vs. generative supervised vs. unsupervised classification vs. regression linear vs. nonlinear</p>"},{"location":"Courses/ML.html#evaluation","title":"Evaluation","text":""},{"location":"Courses/ML.html#testing-metrics","title":"Testing Metrics","text":"<ul> <li> <p>accuracy, recall, precision, receiver, operator curve</p> </li> <li> Truth/Prediction True False True True Positive False Negative False False Negative True Negative </li> </ul> \\[   accuracy=\\frac{TP+TN}{TP+TN+FP+FN},   recall=\\frac{TP}{TP+FN},   precision=\\frac{TP}{TP+FP},   F_1=\\frac{2*recall*precison}{recall+precision} \\] <ul> <li>mean squared error</li> </ul>"},{"location":"Courses/ML.html#training-metrics","title":"Training Metrics","text":"<ul> <li>mean squared error, cross entropy loss</li> <li>mean squared error</li> </ul>"},{"location":"Courses/ML.html#2-probability-statistics","title":"2 Probability &amp; Statistics","text":""},{"location":"Courses/ML.html#pobability","title":"Pobability","text":"Probability Statistics Events Population Trial Sample Numerical characteristics of random variables Numerical characteristics Asymptotic theory Statistical inference"},{"location":"Courses/ML.html#distributions","title":"Distributions","text":""},{"location":"Courses/ML.html#bernoulli-distribution","title":"Bernoulli distribution \u4f2f\u52aa\u5229\u5206\u5e03","text":"<ol> <li> <p>Binary Outcomes: It has only two possible outcomes. For example, flipping a coin results in either heads or tails.</p> </li> <li> <p>Parameters: The distribution is characterized by a single parameter p, which is the probability of success (where 0\u2264p\u22641).</p> </li> <li> <p>Random Variable: A random variable X that follows a Bernoulli distribution takes the value 1 with probability p(success) and the value 0 with probability 1\u2212p(failure).</p> </li> <li> <p>Mean and Variance:</p> </li> </ol> <ul> <li>Mean (Expected Value): E(X)=p</li> <li>Variance: Var(X)=p(1\u2212p)</li> </ul> <ol> <li> <p>Usage: This distribution is used to model scenarios with two outcomes, such as pass/fail, yes/no, win/lose, etc. It's a fundamental building block for more complex distributions like the Binomial distribution, which models the number of successes in a fixed number of independent Bernoulli trials.</p> </li> <li> <p>Probability Mass Function (PMF): The PMF of a Bernoulli distributed random variable</p> </li> </ol> \\[   \\begin{align*}   P(X = k) = \\begin{cases}    p &amp; \\text{if } k = 1 \\\\   1-p &amp; \\text{if } k = 0    \\end{cases}   \\end{align*} \\]"},{"location":"Courses/ML.html#binomial-distribution","title":"Binomial distribution \u4e8c\u9879\u5206\u5e03","text":"<ol> <li> <p>Trials: The distribution is defined by the number of trials, n, which is a fixed number.</p> </li> <li> <p>Success Probability: The probability of success on an individual trial, p.</p> </li> <li> <p>Random Variable: A random variable X following a Binomial distribution represents the number of successes in n trials.</p> </li> <li> <p>Mean and Variance:    - Mean (Expected Value): E(X)=np*    - Variance: Var(X)=np(1\u2212p)</p> </li> <li> <p>Probability Mass Function (PMF): The probability of getting exactly k successes in n trials is given by:</p> </li> </ol> \\[    \\begin{align*}    P(X = k) = \\binom{n}{k} p^k (1-p)^{n-k}    \\end{align*} \\] <ol> <li>Usage: The Binomial distribution is used widely in statistics, particularly for modeling the number of successes in various scenarios such as flipping a coin, quality control processes, survey responses, and other fields where the outcomes are binary and trials are independent.</li> </ol>"},{"location":"Courses/ML.html#normal-distributiongaussian-distribution","title":"Normal distribution/Gaussian distribution \u6b63\u6001\u5206\u5e03","text":"<p>Key Features</p> <ol> <li> <p>Shape: The Normal distribution is bell-shaped and symmetric about its mean.</p> </li> <li> <p>Mean (\u03bc): This is the central location of the distribution and is also the median and mode.</p> </li> <li> <p>Standard Deviation (\u03c3): This measures the dispersion or variability around the mean; 68% of the data falls within one \u03c3  standard deviation of the mean, 95% within two \u03c3, and 99.7% within three \u03c3, a property known as the empirical rule or 68-95-99.7 rule.</p> </li> <li> <p>Formula: The probability density function (PDF) of the Normal distribution for a random variable X is given by:</p> </li> </ol> \\[    \\begin{align*}    f(x) = \\frac{1}{\\sigma\\sqrt{2\\pi}} e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}}    \\end{align*} \\] <pre><code>\u03bc \u662f\u5e73\u5747\u503c\uff0c\u03c3 \u662f\u6807\u51c6\u5deestandard deviation\n</code></pre> <ol> <li>Applications: The Normal distribution is used for various applications including:</li> </ol> <ul> <li>Statistical inference</li> <li>Prediction intervals</li> <li>Process control</li> <li>Natural phenomena (e.g., measurement errors, heights of people)</li> </ul> <ol> <li>Central Limit Theorem: This fundamental theorem in statistics states that the sum (or average) of a large number of independent, identically distributed variables with finite means and variances will approximately follow a Normal distribution, regardless of the underlying distribution.</li> </ol> <p>Properties</p> <ul> <li>Skewness \u504f\u5ea6: The Normal distribution has a skewness of zero, indicating a perfectly symmetrical shape.</li> <li>Kurtosis \u5cf0\u5ea6: It has a kurtosis of 3, which is the baseline for comparing the peakedness of other distributions (mesokurtic\u4e2d\u5cf0\u5ea6).</li> </ul>"},{"location":"Courses/ML.html#uniform-distribution","title":"Uniform distribution \u5747\u5300\u5206\u5e03","text":"<p>\u5747\u5300\u5206\u5e03\u662f\u53e6\u4e00\u79cd\u7b80\u5355\u4f46\u6709\u7528\u7684\u6982\u7387\u5206\u5e03\u3002 \u5b83\u6a21\u62df\u4e86\u4e00\u4e2a\u573a\u666f\uff0c\u5176\u4e2d\u6240\u6709\u7ed3\u679c\u5728\u4e00\u5b9a\u8303\u56f4\u5185\u53d1\u751f\u7684\u53ef\u80fd\u6027\u76f8\u540c\u3002 \u8be5\u5206\u5e03\u662f\u5728\u4e24\u4e2a\u53c2\u6570 a \u548c b \u4e4b\u95f4\u5b9a\u4e49\u7684\uff0c\u5b83\u4eec\u5206\u522b\u662f\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u3002</p> <ul> <li> <p>Continuous: Unlike the Bernoulli or Binomial distributions, the Uniform distribution is continuous.</p> </li> <li> <p>Range: The outcomes are uniformly distributed over the interval [a,b].</p> </li> <li> <p>Probability Density Function (PDF): The PDF of the Uniform distribution is given by:</p> </li> </ul> \\[   \\begin{align*}   f(x) = \\frac{1}{b-a} \\quad \\text{for} \\quad x \\in [a, b]   \\end{align*} \\] <p>This indicates that every point in the interval [a,b] has the same probability density.</p> <ul> <li> <p>Mean and Variance:</p> </li> <li> <p>Mean (Expected Value): \\((a+b)/2\\)</p> </li> <li> <p>Variance:  $$     \\frac{(b-a)^2}{12} $$</p> </li> </ul>"},{"location":"Courses/ML.html#poisson-distribution","title":"Poisson distribution \u6cca\u677e\u5206\u5e03","text":"<p>\u6cca\u677e\u5206\u5e03\u662f\u4e00\u79cd\u6982\u7387\u5206\u5e03\uff0c\u5b83\u5bf9\u56fa\u5b9a\u65f6\u95f4\u6216\u7a7a\u95f4\u95f4\u9694\u5185\u53d1\u751f\u7684\u4e8b\u4ef6\u6570\u91cf\u8fdb\u884c\u5efa\u6a21\uff0c\u524d\u63d0\u662f\u8fd9\u4e9b\u4e8b\u4ef6\u4ee5\u5df2\u77e5\u7684\u6052\u5b9a\u5e73\u5747\u901f\u7387\u53d1\u751f\uff0c\u5e76\u4e14\u4e0e\u81ea\u4e0a\u6b21\u4e8b\u4ef6\u4ee5\u6765\u7684\u65f6\u95f4\u65e0\u5173\u3002</p> <ol> <li> <p>Parameter \u03bb: The average number of events per interval, \u03bb (lambda), is the rate at which events happen. It's the only parameter of this distribution.</p> </li> <li> <p>Discrete Distribution: The Poisson distribution is used for discrete events (e.g., counting the number of emails received in an hour).</p> </li> <li> <p>Probability Mass Function (PMF): The PMF of a Poisson distributed random variable X indicating the probability of observing exactly k events is given by:</p> </li> </ol> \\[    \\begin{align*}    P(X = k) = \\frac{\\lambda^k e^{-\\lambda}}{k!}    \\end{align*} \\] <p>for k=0,1,2,\u2026, where e is the base of the natural logarithm.</p> <ol> <li>Mean and Variance:</li> </ol> <ul> <li>Mean: \u03bb</li> <li>Variance: \u03bb</li> </ul> <ol> <li>Applications</li> </ol> <p>The Poisson distribution is widely used in various fields such as:</p> <ul> <li>Telecommunications (e.g., number of phone calls per minute)</li> <li>Traffic engineering (e.g., cars passing a point)</li> <li>Biology (e.g., mutations in a strand of DNA)</li> <li>Queueing theory</li> </ul>"},{"location":"Courses/ML.html#beta-distribution","title":"Beta distribution","text":"<p>beta \u5206\u5e03\u662f\u5728\u533a\u95f4 [0, 1] \u4e0a\u5b9a\u4e49\u7684\u4e00\u7cfb\u5217\u8fde\u7eed\u6982\u7387\u5206\u5e03\uff0c\u7531\u4e24\u4e2a\u6b63\u5f62\u72b6\u53c2\u6570\uff08\u7528 \u03b1 \u548c \u03b2 \u8868\u793a\uff09\u8fdb\u884c\u53c2\u6570\u5316\u3002 \u5b83\u5728\u7edf\u8ba1\u3001\u8d1d\u53f6\u65af\u5206\u6790\u548c\u673a\u5668\u5b66\u4e60\u7b49\u9886\u57df\u7279\u522b\u6709\u7528\u3002</p> <p>1.Support: The distribution is defined for values on the interval [0, 1].</p> <p>2.Shape Parameters: \u03b1 and \u03b2 control the shape of the distribution:</p> <ul> <li> <p>If \u03b1=\u03b2=1, the beta distribution is uniform.</p> </li> <li> <p>If \u03b1&gt;1 and \u03b2=1 (or vice versa), the distribution is skewed towards 1 (or 0).</p> </li> <li> <p>If \u03b1=\u03b2&gt;1, the distribution is symmetric and bell-shaped around 0.5.</p> </li> <li> <p>If \u03b1&lt;1 and \u03b2&lt;1, the distribution is U-shaped.</p> </li> </ul> <p>3.Mean: The mean of the beta distribution is \\(\\frac{\\alpha}{\\alpha+\\beta}\\).</p> <p>4.Variance: The variance is \\(\\frac{\u03b1+\u03b2}{(\u03b1+\u03b2)^2(\u03b1+\u03b2+1)}\\)\u200b.</p> <p>5.Probability Density Function (PDF):</p> \\[ f(x;\\alpha,\\beta)=\\frac{x^{\\alpha-1}(1-x)^{\\beta-1}}{B(\\alpha,\\beta)} \\] <p>Where:</p> <ul> <li>x is the variable over the interval [0, 1].</li> <li>\u03b1 and \u03b2 are shape parameters.</li> <li>B(\u03b1,\u03b2) is the beta function, serving as a normalization factor.</li> </ul>"},{"location":"Courses/ML.html#example","title":"Example","text":"<p>\u200b    In Bayesian data analysis, if the prior distribution for a parameter 0 is Beta(2, 2), and after observing data, the posterior distribution is Beta(5, 3), what is the maximum a posteriori (MAP) estimate for 0?</p> <p></p> <p>\u200b   Given a posterior distribution Beta(5, 3), let's plug in the values \u03b1=5 and \u03b2=3 into the formula to calculate the MAP estimate. The maximum a posteriori (MAP) estimate for the parameter x is approximately 0.67.</p>"},{"location":"Courses/ML.html#statistics","title":"Statistics","text":"<ul> <li> <p>The concept of population and sample</p> </li> <li> <p>Statistics</p> </li> <li>sample mean</li> <li>sample variance</li> <li>Statistical inference</li> <li>Frequentist view \\(P(D;\u03b8)\\)\u200b </li> <li>Point estimation<ul> <li>Methods</li> <li>maximum likelihood estimation(MLE)</li> <li>method of moments</li> <li>Evaluation of methods</li> <li>consistency</li> <li>unbiasedness</li> <li>minimum-variance</li> </ul> </li> </ul>"},{"location":"Courses/ML.html#3-bayesian-theorem","title":"3 Bayesian Theorem","text":"<p>Bayesian view \\(P(D|\u03b8)\\)</p> <ul> <li> <p>realtions between events</p> </li> <li> <p>subsetting(inclusion) and equality</p> </li> <li>mutuak exclusion and negation<ul> <li>Addition Law of Probability</li> <li>Total Probability</li> </ul> </li> <li> <p>operations on events</p> </li> <li> <p>addition(union)</p> </li> <li>multiplication(intersection)</li> <li>subtraction(difference)</li> <li> <p>Conditional probability</p> </li> <li> <p>independence among events</p> <ul> <li>Multiplication law of Probability</li> </ul> </li> </ul> <p>Bayesian equation $$     P(\\theta|D)=\\frac{P(D|\\theta)P(\\theta)}{P(D)}\\     \\     posterior=\\frac{likelihood*prior}{evidence} $$</p> <p>Bayesian inference</p> <ul> <li>Maximum A Posterior(MAP)</li> </ul> \\[ \\theta^* =  \\mathop{argmax}_{\\theta}\\,  P(\\theta|D)=\\mathop{argmax}_{\\theta}\\, P(D|\\theta)P(\\theta) \\] <ul> <li>Minimum Mean Squared Error</li> </ul> \\[ \\theta^* =  \\mathop{argmin}_{\\theta}\\mathop{E}_{\\hat{\\theta}-posterior} {(\\hat{\\theta}-\\theta)}^2=\\mathop{E}_{\\hat{\\theta}-posterior}[\\hat{\\theta}] \\] <p>https://chat.openai.com/share/80223f00-4ab2-41d5-8691-db83547f1ff9</p>"},{"location":"Courses/ML.html#4-null-hypothesis-testing","title":"4 Null hypothesis testing","text":"<p>\u5047\u8bbe\u68c0\u9a8c</p> <p>the null hypothesis is denoted by \\(H_0\\)\u200b </p> <p>Type 1 error, Type 2 error:</p> <p>https://chat.openai.com/share/0cd19f6f-30c4-47c1-8506-70572dfead58</p>"},{"location":"Courses/ML.html#5-unsupervised-learning","title":"5 Unsupervised Learning","text":"<p>Clustering</p> <p>K-means</p> <p>anomly</p> <p>symbols to meaning</p> <p>SVD(single value decomposition)</p> <p>PCA(Principal components analysis): use only the top k columns of U and V</p> <p>latent semantic analysis</p>"},{"location":"Courses/ML.html#6-supervised-learning","title":"6 Supervised learning","text":""},{"location":"Courses/ML.html#classification","title":"Classification","text":"<p>https://chatgpt.com/share/1d5a433a-f924-4e02-b700-e9aaecb9cbdf</p>"},{"location":"Courses/OOP.html","title":"\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1","text":"<p>\u9519\u9898\u96c6\uff1ahttps://k5ms77k0o1.feishu.cn/wiki/wikcnH7YKB6KFCwCXgRdXk2MZAf\u7b14\u8bb0\uff1ahttps://note.hobbitqia.cc/OOP/</p>"},{"location":"Courses/OOP.html#_1","title":"\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b","text":"<p> \u7ea6 6866 \u4e2a\u5b57  256 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 26 \u5206\u949f</p>"},{"location":"Courses/OOP.html#_2","title":"\u51fd\u6570","text":"<p>\u51fd\u6570\u58f0\u660e\u53ef\u4ee5\u4e0d\u5199\u53c2\u6570\u540d\uff0c\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u53c2\u6570\u9ed8\u8ba4\u503c default arguments</p> <p>\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u82e5\u4e00\u4e2a\u53c2\u6570\u503c\u672a\u7ed9\u51fa\uff0c\u90a3\u4e48\u4e4b\u540e\u6240\u6709\u7684\u53c2\u6570\u503c\u4e5f\u4e0d\u80fd\u7ed9\u51fa</p> <ul> <li>Never new something and return the pointer  </li> </ul>"},{"location":"Courses/OOP.html#default-arguments","title":"\u9ed8\u8ba4\u53c2\u6570 default arguments","text":"<p>A default argument is a value given in the declaration that the compiler automatically inserts if you don\u02bct provide a value in the function call.\u9ed8\u8ba4\u53c2\u6570\u5fc5\u987b\u4ece\u53f3\u5230\u5de6\u5199\uff0c\u6ca1\u6709\u9ed8\u8ba4\u53c2\u6570\u7684\u5728\u6700\u5de6\u8fb9\u3002eg,<code>int harpo(int n, int m = 4, int j = 5);</code>\u9ed8\u8ba4\u503c\u53ea\u80fd\u51fa\u73b0\u5728\u51fd\u6570\u539f\u578b\u4e2d\uff0c\u4e0d\u4f1a\u5728\u51fd\u6570\u4ee3\u7801\u91cc\u51fa\u73b0</p>"},{"location":"Courses/OOP.html#reference","title":"\u5f15\u7528 reference","text":"<p>From GPT: A reference to an object in C++ is an alternative name for an object. It's similar to a pointer,  but with a few key differences.</p> <ol> <li>Definition and Declaration:    - A reference is declared using the <code>&amp;</code> symbol. For example, <code>A&amp; ref = obj;</code>, where obj is an existing object of class A.    - Once a reference is initialized to an object, it cannot be made to refer to another object; it remains an alias to that specific object throughout its scope. \u521d\u59cb\u5316\u540e\uff0c\u5b83\u5728\u6574\u4e2a\u8303\u56f4\u5185\u4ecd\u7136\u662f\u8be5\u7279\u5b9a\u5bf9\u8c61\u7684\u522b\u540d\uff0c\u4e0d\u53ef\u4ee5\u518d\u6210\u4e3a\u522b\u7684\u5bf9\u8c61\u7684\u5f15\u7528\uff08\u4e0d\u53ef\u6539\u53d8\uff09</li> <li>Behavior and Usage:    - A reference must be initialized when it is declared. There is no such thing as a \"null reference\" in C++, unlike pointers which can be null. \u5fc5\u987b\u521d\u59cb\u5316\u4e14\u4e0d\u80fd\u4e3a NULL    - A reference, when used in code, behaves exactly as if you used the original object. That is, using the reference is syntactically identical to using the object itself. \u5f15\u7528\u5728\u8bed\u6cd5\u4e0a\u4e0e\u4f7f\u7528\u5bf9\u8c61\u672c\u8eab\u76f8\u540c    - Since a reference is just another name for an existing object, it doesn't occupy any additional memory (unlike pointers, which require memory for storing the address of the object they point to). \u5f15\u7528\u53ea\u662f\u5bf9\u8c61\u7684\u53e6\u4e00\u4e2a\u540d\u5b57\uff0c\u6ca1\u6709\u5206\u914d\u65b0\u7684\u5730\u5740\uff08\u5360\u5185\u5b58\uff09</li> <li>References vs Pointers:    - Unlike pointers, references are less powerful but safer. They are safer because they must refer to an object (they cannot be null) and they don't involve explicit memory address manipulation.     - \u5f15\u7528\u901a\u5e38\u7528\u5728\u51fd\u6570\u53c2\u6570\u548c\u8fd4\u56de\u7c7b\u578b\u4e2d\uff0c\u4ee5\u786e\u4fdd\u4f20\u9012\u5b9e\u9645\u5bf9\u8c61\u5e76\u907f\u514d\u590d\u5236\u5927\u5bf9\u8c61\uff08\u6309\u5f15\u7528\u4f20\u9012\uff09\u7684\u5f00\u9500\u3002</li> <li>Example in Function Arguments:    - If a function takes an object reference as an argument, it can modify the original object.  \u5982\u679c\u51fd\u6570\u5c06\u5bf9\u8c61\u5f15\u7528\u4f5c\u4e3a\u53c2\u6570\uff0c\u5219\u5b83\u53ef\u4ee5\u4fee\u6539\u539f\u59cb\u5bf9\u8c61\uff08\u5171\u4eab\u5185\u5b58\uff09 For instance, a function <code>void foo(A&amp; a)</code> can modify the A object passed to it.</li> </ol> <p>\u6ce8\u610f\uff1a</p> <ul> <li>\u5f53\u4f7f\u7528\u5f15\u7528\u4f20\u9012\u65f6\uff0c\u5b9e\u9645\u53c2\u6570\u5fc5\u987b\u662f\u4e00\u4e2a\u53d8\u91cf</li> <li>no reference/pointer to reference </li> <li>reference to pointer is ok</li> <li>No arrays of references</li> <li>\u4e07\u80fd\u5f15\u7528\uff1a<code>**auto &amp;&amp;**</code> <pre><code>char c = 'A';\nchar &amp;r = c;\nr = 'B';\ncout &lt;&lt; \"c: \" &lt;&lt; c &lt;&lt; endl;\ncout &lt;&lt; \"b: \" &lt;&lt; r &lt;&lt; endl;\n//\u6b64\u65f6\u6211\u4eec\u53d1\u73b0\u4e24\u884c\u7684\u8f93\u51fa\u90fd\u662f B.\n</code></pre></li> </ul>"},{"location":"Courses/OOP.html#object-and-class","title":"\u5bf9\u8c61\u548c\u7c7b object and class","text":"<p>\u7c7b\u5c31\u662f\u7528\u4e8e\u521b\u5efa\u5bf9\u8c61\u7684\u6a21\u677f</p> <ul> <li>\u5728 C++\u7684\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u7528\u53d8\u91cf\u5b9a\u4e49_\u6570\u636e\u57df_\uff0c\u7528_\u51fd\u6570_\u5b9a\u4e49\u884c\u4e3a\uff08_\u6784\u9020\u51fd\u6570_\u7528\u6765\u521d\u59cb\u5316\uff0c\u6bcf\u521b\u5efa\u65b0\u5bf9\u8c61\u90fd\u4f1a\u8c03\u7528\uff09</li> <li>\u7c7b\u5b9a\u4e49\u672b\u5c3e\u8981\u52a0\u5206\u53f7</li> <li>\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u65f6\uff0c\u5e94\u628a\u7c7b\u540d_\u6bcf\u4e2a\u5355\u8bcd\u9996\u5b57\u6bcd\u5927\u5199_</li> <li>\u5173\u952e\u5b57<code>public</code>\u8868\u793a\u6240\u6709\u6570\u636e\u57df\u3001\u6784\u9020\u51fd\u6570\u548c\u666e\u901a\u6210\u5458\u90fd\u53ef\u901a\u8fc7\u7c7b\u5bf9\u8c61\u6765\u8bbf\u95ee</li> <li>\u4f5c\u4e3a\u7c7b\u6210\u5458\uff0c\u6570\u636e\u57df\u4e0d\u80fd\u5728\u58f0\u660e\u65f6\u8fdb\u884c\u521d\u59cb\u5316</li> <li>\u7c7b\u5185 const \u53d8\u91cf\u53ea\u80fd\u901a\u8fc7\u521d\u59cb\u5316\u5217\u8868\u521d\u59cb\u5316</li> <li>\u5728\u7c7b\u5185\u53ea\u6709 <code>static const i = 1</code> \u5e38\u91cf\u5728\u540e\u4f7f\u7528\uff08eg\uff0c<code>int array[i]</code>\uff09 \u624d\u80fd\u901a\u8fc7\u7f16\u8bd1\uff08\u53bb\u6389 static \u4e0d\u884c</li> <li>class\u4e2d\u7684\u53d8\u91cf\u548c\u51fd\u6570\u9ed8\u8ba4<code>private</code>\uff0cstruct\u4e2d\u7684\u51fd\u6570\u9ed8\u8ba4\u4e3a<code>public</code></li> </ul> <p>\u7c7b\u4e2d\uff1a</p> <ul> <li><code>**this**</code> is a pointer to the current object. \u5f53\u524d\u5bf9\u8c61\u7684\u6307\u9488</li> <li><code>**that**</code> is a reference to another object of the same type. \u5f15\u7528</li> <li><code>-&gt;</code> is used to access members of an object through a pointer. \u6307\u9488\u6307\u5411\u5bf9\u8c61\u7684\u67d0\u4e2a\u6210\u5458</li> <li><code>.</code> is used to access members of an object directly. \u76f4\u63a5\u83b7\u53d6\u67d0\u4e2a\u5bf9\u8c61\u7684\u6210\u5458\uff0c\u5bf9\u8c61.\u6210\u5458</li> </ul> <p>\u57df\u89e3\u6790\u5668 <code>::</code><code>type &lt;Class Name&gt;::&lt;function name&gt;</code></p>"},{"location":"Courses/OOP.html#_3","title":"\u53cb\u5143\u51fd\u6570","text":"<p>In C++, a friend function is a function that is not a member of a class but is allowed to access its private and protected members.</p>"},{"location":"Courses/OOP.html#constructor","title":"\u6784\u9020\u51fd\u6570 constructor","text":"<ul> <li>\u6784\u9020\u51fd\u6570\u540d\u79f0\u5fc5\u987b\u4e0e\u7c7b\u540d\u4e00\u81f4</li> <li>\u6ca1\u6709\u8fd4\u56de\u7c7b\u578b\uff08void \u4e5f\u4e0d\u53ef\u4ee5\uff09</li> <li>\u5728\u521b\u5efa\u5bf9\u8c61\u65f6\uff0c\u6784\u9020\u51fd\u6570\u4f1a\u88ab\u8c03\u7528\uff0c\u5b83\u7684\u4f5c\u7528\u5c31\u662f\u521d\u59cb\u5316\u5bf9\u8c61</li> <li>\u53ef\u4ee5\u91cd\u8f7d\uff0c\u4f46\u5b83\u4eec\u51fd\u6570\u7b7e\u540d\u4e0d\u540c\uff1f</li> <li>\u6784\u9020\u51fd\u6570\u53ef\u4ee5\u7531\u53c2\u6570</li> <li>\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u53ef\u4ee5\u65e0\u53c2\u6570\u8c03\u7528</li> <li>If (and only if) there are no constructors for a class (struct or class), the compiler will automatically create one for you \u6ca1\u6709\u6784\u9020\u51fd\u6570\u65f6\u7f16\u8bd1\u5668\u4f1a\u9ed8\u8ba4\u6784\u9020\u4e00\u4e2a\u65e0\u53c2\u6570\u6784\u9020\u51fd\u6570</li> <li>\u5728\u5916\u8c03\u7528 <code>public</code></li> </ul> <p>\u4e00\u4e2a\u7c7b\u901a\u5e38\u6709\u4e00\u4e2a_\u65e0\u53c2\u6570\u6784\u9020\u51fd\u6570_\uff0c\u5f53\u7c7b\u7684\u58f0\u660e\u4e2d\u4e0d\u5305\u542b\u6784\u9020\u51fd\u6570\u7684\u58f0\u660e\u65f6\uff0c\u6b64\u65f6\u9690\u542b\u58f0\u660e\u4e86_\u7f3a\u7701\u6784\u9020\u51fd\u6570 _\uff08\u65e0\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\uff09</p>"},{"location":"Courses/OOP.html#_4","title":"\u521d\u59cb\u5316","text":""},{"location":"Courses/OOP.html#initializer-list","title":"\u521d\u59cb\u5316\u5217\u8868 initializer list","text":"<ul> <li>To define a function with an argument list, defaults must be added from right to left. \u521d\u59cb\u5316\u53c2\u6570\u8868\u65f6\u6709\u521d\u503c\uff08\u9ed8\u8ba4\u503c\uff09\u7684\u5728\u6700\u53f3\u8fb9\uff1b</li> <li>\u9ed8\u8ba4\u503c\u53ea\u80fd\u51fa\u73b0\u5728\u51fd\u6570\u539f\u578b\u3002\uff08\u58f0\u660e\u548c\u5b9a\u4e49\u4e00\u8d77\u662f\u53ef\u4ee5\u7684\uff09</li> <li> <p>\u9ed8\u8ba4\u53c2\u6570\u503c\u4e0d\u4f1a\u5728\u51fd\u6570\u4ee3\u7801\u91cc\u51fa\u73b0\uff0c\u53ea\u662f\u7f16\u8bd1\u5668\u628a\u7f16\u8bd1\u65f6\u4f1a\u628a\u9ed8\u8ba4\u503c\u653e\u8fdb\u5806\u6808\u8c03\u7528\u91cc\u3002\u56e0\u6b64\u53ef\u80fd\u4f1a\u88ab\u5176\u4ed6\u539f\u578b\u58f0\u660e\u6539\u53d8\u9ed8\u8ba4\u503c\u3002 <pre><code>ClassNme(parameterlist):datafield(value1), datafiled2(value2)\n{\n    //additional statements if needed\n}\nclass Point {\nprivate:\n    const float x, y;\npublic:\n    Point(float xa = 0.0, float ya = 0.0) : y(ya), x(xa) {}\n};\n</code></pre></p> </li> <li> <p>\u8fd9\u91cc\u7684 const \u53d8\u91cf\u4e0d\u80fd\u88ab\u8d4b\u503c\uff0c\u53ea\u80fd\u88ab\u521d\u59cb\u5316\u3002\u6210\u5458 const \u53d8\u91cf\u7684\u521d\u59cb\u5316\uff0c\u53ef\u4ee5<code>const float x = 1.0;</code> \u4f46\u8fd9\u6837\u6240\u6709\u7c7b\u7684\u5bf9\u8c61\u7684\u503c\u90fd\u662f\u4e00\u6837\u7684\u3002</p> </li> <li><code>:</code>\u540e\u662f\u521d\u59cb\u5316\u5217\u8868\uff0c\u53ea\u6709\u5728\u6784\u9020\u51fd\u6570\u4e2d\u4f7f\u7528\u3002\u4f1a\u5728\u6784\u9020\u51fd\u6570\u6267\u884c\u4e4b\u524d\uff0c\u8c03\u7528 Initializer list \u7684\u6784\u9020</li> <li>\u6839\u636e\u5b9a\u4e49\u987a\u5e8f\u6765\u521d\u59cb\u5316\u53d8\u91cf\uff08\u5b9e\u4f8b\u5316\u5b50\u7c7b\uff0c\u5148\u8c03\u7528\u7236\u7c7b\uff0c\u518d\u521d\u59cb\u5316\u81ea\u5df1\uff09</li> <li>\u5bf9\u8c61\u7684\u6570\u636e\u57df\u548c\u51fd\u6570\uff08\u603b\u79f0\u4e3a\u5bf9\u8c61\u6210\u5458\uff09\u53ef\u7528\u5bf9\u8c61\u540d\u901a\u8fc7<code>.</code>\u6765\u8bbf\u95ee</li> <li>\u5982\u679c\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\u4f46\u53ea\u4f7f\u7528\u4e00\u6b21\uff0c\u5219\u65e0\u9700\u7ed9\u5bf9\u8c61\u547d\u540d\uff0c\u6210\u4e3a_\u533f\u540d\u5bf9\u8c61_</li> <li>\u5728 C++\u4e2d\uff0c\u5982\u679c\u4f7f\u7528\u65e0\u53c2\u7684\u6784\u9020\u51fd\u6570\u6765\u521b\u5efa\u533f\u540d\u5bf9\u8c61\uff0c\u5fc5\u987b\u5728\u6784\u9020\u51fd\u6570\u4e4b\u540d\u540e\u52a0\u4e0a\u62ec\u53f7\uff1b\u800c\u4f7f\u7528\u65e0\u53c2\u7684\u6784\u9020\u51fd\u6570\u6765\u521b\u5efa\u4e00\u4e2a\u547d\u540d\u5bf9\u8c61\uff0c\u5728\u5bf9\u8c61\u540d\u4e4b\u540e\u662f\u4e0d\u80fd\u4f7f\u7528\u62ec\u53f7\u7684</li> </ul> <p>eg, <code>Student::Student(string s):name(s) {}</code>\u5728\u6784\u9020\u51fd\u6570\u6267\u884c\u4e4b\u524d\uff0c\u5c06 s \u521d\u59cb\u5316\u4e3a name\u4e0d\u540c\u4e8e\u8d4b\u503c <code>Student::Student(string s) {name=s;}</code>\u5728\u6784\u9020\u51fd\u6570\u6267\u884c\u65f6\uff0cstring \u5fc5\u987b\u6709\u4e00\u4e2a\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff08\u8981\u5148\u6784\u9020\u51fa string \u7684\u5bf9\u8c61 name \u518d\u8d4b\u503c\uff09</p> <p>\u7b26\u53f7<code>\uff1a\uff1a</code>\u79f0\u4e3a\u4e8c\u5143\u4f5c\u7528\u57df\u89e3\u6790\u8fd0\u7b97\u7b26\uff0c\u6307\u660e\u4e86\u7c7b\u6210\u5458\u7684\u4f5c\u7528\u8303\u56f4</p>"},{"location":"Courses/OOP.html#deconstructor","title":"\u6790\u6784\u51fd\u6570 deconstructor","text":"<p>\u6790\u6784\u51fd\u6570\u662f\u5f53\u5bf9\u8c61\u8d85\u51fa\u8303\u56f4\u6216\u901a\u8fc7\u8c03\u7528\u663e\u5f0f\u9500\u6bc1\u65f6\u81ea\u52a8\u8c03\u7528\u7684\u6210\u5458\u51fd\u6570<code>delete</code>\u3002\u6790\u6784\u51fd\u6570\u4e0e\u7c7b\u540c\u540d\uff0c\u524d\u9762\u6709\u6ce2\u6d6a\u53f7 ( <code>~</code>)\u3002</p> <ul> <li>Don't accept arguments. \u6ca1\u6709\u53c2\u6570</li> <li>Don't return a value (or <code>**void**</code>) \u6ca1\u6709\u8fd4\u56de\u503c</li> <li>Can't be declared as <code>const</code>, <code>volatile</code>, or <code>static</code>. However, they can be invoked for the destruction of objects declared as const, volatile, or static.</li> <li>Can be declared as <code>virtual.</code> Using virtual destructors, you can destroy objects without knowing their type \u2014the correct destructor for the object is invoked using the virtual function mechanism. Destructors can also be declared as pure virtual functions for abstract classes.</li> <li>\u5148\u6790\u6784\u81ea\u5df1\uff08\u5b50\u7c7b\uff09\uff0c\u518d\u6790\u6784\u7236\u7c7b\uff0c\u4e0e\u6784\u9020\u51fd\u6570\u987a\u5e8f\u76f8\u53cd</li> </ul> <p>\u5f53\u53d1\u751f\u4ee5\u4e0b\u4e8b\u4ef6\u4e4b\u4e00\u65f6\uff0c\u5c06\u8c03\u7528\u6790\u6784\u51fd\u6570\uff1a</p> <ul> <li>\u5177\u6709\u5757\u4f5c\u7528\u57df\u7684\u672c\u5730\uff08\u81ea\u52a8\uff09\u5bf9\u8c61\u8d85\u51fa\u4f5c\u7528\u57df\uff0c\u6790\u6784\u4f1a\u88ab\u81ea\u52a8\u8c03\u7528</li> <li>\u4f7f\u7528 \u8fd0\u7b97\u7b26 \u5206\u914d\u7684\u5bf9\u8c61new\u53ef\u4ee5\u4f7f\u7528 \u663e\u5f0f\u91ca\u653edelete\u3002</li> <li>\u4e34\u65f6\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u7ed3\u675f\u3002</li> <li>\u7a0b\u5e8f\u7ed3\u675f\uff0c\u5168\u5c40\u6216\u9759\u6001\u5bf9\u8c61\u5b58\u5728\u3002</li> <li>\u4f7f\u7528\u6790\u6784\u51fd\u6570\u7684\u5b8c\u5168\u9650\u5b9a\u540d\u79f0\u663e\u5f0f\u8c03\u7528\u6790\u6784\u51fd\u6570\u3002</li> </ul> <p>\u6790\u6784\u51fd\u6570\u53ef\u4ee5\u81ea\u7531\u8c03\u7528\u7c7b\u6210\u5458\u51fd\u6570\u5e76\u8bbf\u95ee\u7c7b\u6210\u5458\u6570\u636e\u3002\u6790\u6784\u51fd\u6570\u7684\u4f7f\u7528\u6709\u4e24\u4e2a\u9650\u5236\uff1a</p> <ul> <li>\u4f60\u65e0\u6cd5\u83b7\u53d6\u5b83\u7684\u5730\u5740\u3002</li> <li>\u6d3e\u751f\u7c7b\u4e0d\u7ee7\u627f\u5176\u57fa\u7c7b\u7684\u6790\u6784\u51fd\u6570\u3002</li> </ul>"},{"location":"Courses/OOP.html#inline","title":"\u5185\u8054\u51fd\u6570 inline","text":"<p>\u5728\u7c7b\u5b9a\u4e49\u5185\u5b9e\u73b0\u7684\u51fd\u6570\u81ea\u52a8\u6210\u4e3a\u5185\u8054\u51fd\u6570\u7528\u5173\u952e\u5b57<code>inline</code>\u5728\u7c7b\u5b9e\u73b0\u6587\u4ef6\u4e2d\u6307\u660e\u6210\u5458\u51fd\u6570\u662f\u5185\u8054\u51fd\u6570\uff1b\u5982\u679c\u5c06\u6210\u5458\u51fd\u6570\u7684\u5b9a\u4e49\u5199\u5728\u58f0\u660e\u5185\uff0c\u5c31\u4f1a\u81ea\u52a8\u53d8\u6210\u5185\u8054\u51fd\u6570<code>inline</code>\u4e0d\u4f1a\u771f\u6b63\u7f16\u8bd1\u51fd\u6570\uff0c\u800c\u662f\u5728\u8c03\u7528\u51fd\u6570\u65f6_\u76f4\u63a5\u66ff\u6362\u4ee3\u7801_\uff0c\u4e0d\u9700\u8981\u8c03\u7528\u6b65\u9aa4&amp;\u65f6\u95f4\uff0c \u6bd4\u51fd\u6570\u8c03\u7528\u6240\u82b1\u7684\u65f6\u95f4\u5c11\uff0c\u589e\u52a0\u7a7a\u95f4\u4ee5\u51cf\u5c11\u65f6\u95f4\u4e00\u822c\u662f\u7b80\u5355\u7684\u6210\u5458\u51fd\u6570\u6216\u8005\u5728\u5faa\u73af\u4e2d\u591a\u6b21\u4f7f\u7528\u7684\u51fd\u6570\u5141\u8bb8\u591a\u6b21\u5b9a\u4e49\uff08allow multiple definitions\u7a7a\u95f4\u592a\u5927\u7684\u51fd\u6570\u6216\u8005\u9012\u5f52\u51fd\u6570\u4e0d\u9002\u5408\u53d8\u6210\u5185\u8054\u51fd\u6570inline \u51fd\u6570\u7684 body \u4e0d\u662f\u5b9a\u4e49\uff0c\u53ea\u662f\u4e00\u4e2a\u58f0\u660e\u3002\u5373\u5982\u679c\u6709 inline \u51fd\u6570\uff0c\u6211\u4eec\u5e94\u8be5\u628a\u5b83\u653e\u5728\u5934\u6587\u4ef6\u91ccinline \u6bd4\u5b8f\u5b9a\u4e49\u8981\u597d\uff0c\u56e0\u4e3a\u5b83\u6709\u7c7b\u578b\u68c0\u67e5</p>"},{"location":"Courses/OOP.html#copy-constructor","title":"\u590d\u5236\u6784\u9020 copy constructor","text":"<p>\u5b9a\u4e49 <code>T::T(const T&amp;)</code></p> <ul> <li>Create a new object from an existing one. \u4ece\u5df2\u6709\u5bf9\u8c61\u6784\u9020</li> <li>Copying is implemented by the copy constructor \u7531\u62f7\u8d1d\u51fd\u6570\u5b9e\u73b0</li> <li>C++ builds a copy ctor for you if you don't provide one. \u5982\u679c\u6ca1\u6709\u7ed9\u62f7\u8d1d\u6784\u9020, C++ \u4f1a\u81ea\u52a8\u521b\u9020\u4e00\u4e2a</li> <li>\u5982\u679c\u6709\u6210\u5458\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4f1a\u8c03\u7528\u5bf9\u8c61\u81ea\u5df1\u7684\u62f7\u8d1d\u51fd\u6570\u3002</li> <li>\u5982\u679c\u6709\u6210\u5458\u53d8\u91cf\u662f\u6307\u9488\uff0c\u4f1a\u548c\u539f\u6765\u5bf9\u8c61\u4e00\u6837\u6307\u5411\u540c\u4e00\u5757\u5185\u5b58\u3002\u5982\u679c\u6709\u4e00\u4e2a\u5bf9\u8c61\u88ab\u6790\u6784\uff0c\u90a3\u4e48\u8fd9\u5757\u5185\u5b58\u5c31\u88ab delete, \u8fd9\u5c31\u53d8\u6210\u4e86\u65e0\u6548\u5185\u5b58\u3002\u56e0\u6b64\u6211\u4eec\u4e0d\u4e00\u5b9a\u8981\u6709\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u6709\u6307\u9488\u65f6\u5fc5\u987b\u8981\u6709\u3002</li> </ul> <p>Copies each member variable</p> <ul> <li>Good for numbers, objects, arrays</li> <li>Copies each pointer</li> <li>Data may become shared!</li> </ul> <p>create  a new object from an existing one \u4f7f\u7528\u51fd\u6570\u8c03\u7528\u8fdb\u884c\u503c\u4f20\u9012</p>"},{"location":"Courses/OOP.html#_5","title":"\u4ec0\u4e48\u65f6\u5019\u62f7\u8d1d\u6784\u9020\u4f1a\u88ab\u8c03\u7528\uff1f","text":"<ul> <li>\u53ea\u6709\u5bf9\u8c61\u672c\u8eab\u624d\u4f1a\u6709\u62f7\u8d1d\u6784\u9020\uff08\u6307\u9488\u3001\u5f15\u7528\u4e0d\u4f1a\uff09</li> <li>\u5b9a\u4e49\u53d8\u91cf\u65f6\u505a\u7684\u662f\u521d\u59cb\u5316\uff0c\u5176\u4ed6\u65f6\u5019\u662f\u8d4b\u503c\u3002\u521d\u59cb\u5316\u662f\u8981\u62f7\u8d1d\u6784\u9020\uff0c\u8d4b\u503c\u8981\u91cd\u8f7d\u8d4b\u503c\u8fd0\u7b97\u7b26\u3002</li> </ul> <p><code>Personbaby_a(\"Fred\");// these use the copyctor</code>\u79c1\u6709\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4f7f\u5f97\u5bf9\u8c61\u4e0d\u80fd\u88ab\u62f7\u8d1d\u6784\u9020</p>"},{"location":"Courses/OOP.html#move-constructor","title":"\u79fb\u52a8\u6784\u9020 move constructor","text":"<p>\u79fb\u52a8\u6784\u9020\u51fd\u6570\u662f\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7c7b\u7c7b\u578b\u7684\u53c2\u6570\u8c03\u7528\u7684\u6784\u9020\u51fd\u6570\uff0c\u5e76\u590d\u5236\u53c2\u6570\u7684\u5185\u5bb9\uff0c\u53ef\u80fd\u4f1a\u6539\u53d8\u53c2\u6570\uff0c\u53c2\u6570\u4e3a\u53f3\u503c\u5f15\u7528\u3002\u5982\u679c\u6709\u4e00\u4e2a\u5bf9\u8c61\uff0c\u91cc\u9762\u6709\u6307\u9488\u6307\u5411\u4e00\u5757\u5185\u5b58\u3002\u62f7\u8d1d\u6784\u9020\u5c31\u662f\u91cd\u65b0\u7533\u8bf7\u4e00\u5757\u5185\u5b58\u5e76\u5c06\u539f\u5185\u5b58\u7684\u6570\u636e\u62f7\u8d1d\u8fc7\u6765\u3002\u800c\u79fb\u52a8\u6784\u9020\u5c31\u662f\u8ba9\u65b0\u5bf9\u8c61\u7684\u6307\u9488\u6307\u5411\u5185\u5b58\uff0c\u4f46\u539f\u6307\u9488\u4e0d\u518d\u6307\u5411\u8fd9\u4e2a\u5185\u5b58(nullptr).\u5de6\u503c\u5f15\u7528<code>&amp;</code>\uff0c\u53f3\u503c\u5f15\u7528<code>&amp;&amp;</code>\u5982\u679c\u51fd\u6570\u8fd4\u56de\u4e86\u4e00\u4e2a\u5bf9\u8c61\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u53f3\u503c\u5f15\u7528\uff0c\u907f\u514d\u62f7\u8d1d\u6784\u9020\u3002</p> <p>\u4ec0\u4e48\u65f6\u5019\u9700\u8981\u79fb\u52a8\u6784\u9020\uff1f</p> <ul> <li>\u7c7b\u5185\u6709\u6307\u9488\uff0c\u800c\u4e14\u5bf9\u8c61\u4f1a\u5728\u51fd\u6570\u5185\u4f20\u8fdb\u4f20\u51fa\u3002</li> </ul> <p><code>std::move()</code> <pre><code>vector&lt;int&gt; v1{1, 2, 3, 4};\nvector&lt;int&gt; v2 = v1;\nvector&lt;int&gt; v3 = std::move(v1);// \u6b64\u65f6\u8c03\u7528\u7528\u79fb\u52a8\u6784\u9020\u51fd\u6570  \n\u6b64\u65f6\u8c03\u7528\u590d\u5236\u6784\u9020\u51fd\u6570\uff0cv2\u662fv1\u7684\u526f\u672c \u901a\u8fc7 std::move \u5c06 v1 \u8f6c\u5316\u4e3a\u53f3\u503c\uff0c\n\u4ece\u2f7d\u6fc0\u53d1 v3 \u7684\u79fb\u52a8\u6784\u9020\u51fd\u6570\uff0c\u5b9e\u73b0\u79fb\u52a8\u8bed\u4e49\n</code></pre></p>"},{"location":"Courses/OOP.html#_6","title":"\u6570\u636e\u57df\u5c01\u88c5","text":"<p><code>private</code>\u5173\u952e\u5b57\u4f7f\u7c7b\u4e4b\u5916\u7684\u7a0b\u5e8f\u65e0\u6cd5\u76f4\u63a5\u5f15\u7528\u7c7b\u5bf9\u8c61\u6765\u8bbf\u95ee\uff0c\u4e3a\u4e86\u4f7f\u79c1\u6709\u6570\u636e\u53ef\u88ab\u8bbf\u95ee\uff0c\u53ef\u5b9a\u4e49\u4e00\u4e2a get \u51fd\u6570\u8fd4\u56de\u6570\u636e\u57df\u7684\u503c\uff0c\u4e3a\u4e86\u4f7f\u79c1\u6709\u6570\u636e\u53ef\u88ab\u4fee\u6539\uff0c\u53ef\u63d0\u4f9b\u4e00\u4e2a set \u51fd\u6570\u4e3a\u6570\u636e\u57df\u8bbe\u7f6e\u65b0\u503c</p>"},{"location":"Courses/OOP.html#encapsulation","title":"\u5c01\u88c5 encapsulation","text":""},{"location":"Courses/OOP.html#publicprivateprotected","title":"\u53ef\u89c1\u6027 public\uff0cprivate\uff0cprotected","text":"<ul> <li>Public: visible to all clients</li> <li>Protected: visible to classes derived from self (and to friends) \u4e0d\u8ba9\u5916\u754c\u8bbf\u95ee\uff0c\u4f46\u53ef\u4ee5\u8ba9\u7ee7\u627f\u8005\u8bbf\u95ee</li> <li>Private: visible only to self and to friends \u53ea\u5bf9\u81ea\u5df1\u548c\u53cb\u5143\u53ef\u89c1</li> </ul> <p>class defaults to privatestruct defaults to public</p>"},{"location":"Courses/OOP.html#encapsulation_1","title":"Encapsulation","text":"<ul> <li>Data hiding</li> <li>Separation of interface and implementation</li> <li>Use of access specifiers</li> </ul>"},{"location":"Courses/OOP.html#inheritance","title":"\u7ee7\u627f inheritance","text":""},{"location":"Courses/OOP.html#composition","title":"Composition","text":"<p>construct new objects with existing objects\uff08reusing the implementationEmbedded objects</p>"},{"location":"Courses/OOP.html#inheritance_1","title":"Inheritance","text":"<p>\u4ece\u5df2\u6709\u7684\u7c7b\uff08\u79f0\u4e3a\u57fa\u7c7b\u3001\u7236\u7c7b\uff09\u6d3e\u751f\u51fa\u65b0\u7684\u7c7b\u79f0\u4e3a\u7ee7\u627f(inheritance)\uff0c\u6d3e\u751f\u7c7b\u53c8\u79f0\u5b50\u7c7bderived/child </p> <ul> <li>\u7ee7\u627f\u53ef\u4ee5\u907f\u514d\u4ee3\u7801\u91cd\u590d\uff0c\u91cd\u590d\u5229\u7528</li> <li>\u6613\u4e8e\u7ef4\u62a4\u548c\u62d3\u5c55 easier maintenance and extendibility</li> <li>\u5b50\u7c7b\u53ef\u4ee5\u8c03\u7528\u7236\u7c7b\u7684\u51fd\u6570\uff0c\u53cd\u4e4b\u4e0d\u884c</li> <li>\u7236\u7c7b\u7684\u6307\u9488\u53ef\u4ee5\u6307\u5411\u5b50\u7c7b</li> <li>\u5b50\u7c7b\u4e0d\u80fd\u8bbf\u95ee\u7236\u7c7b\u7684\u79c1\u6709\u53d8\u91cf All types of inheritance do not inherit private members\uff0c</li> </ul> <p>\u4f46\u79c1\u6709\u53d8\u91cf\u5b58\u5728\u4e8e\u8fd9\u4e2a\u7c7b\u4e2d</p> <ul> <li>\u5f53\u8c03\u7528\u6784\u9020\u51fd\u6570\u65f6\uff0c\u6211\u4eec\u4e0d\u80fd\u8c03\u7528\u7236\u7c7b\u7684\u79c1\u6709\u53d8\u91cf\uff0c\u53ea\u80fd\u7528\u521d\u59cb\u5316\u5217\u8868\u7684\u65b9\u5f0f\u8c03\u7528\u7236\u7c7b\u7684\u6784\u9020\u51fd\u6570\u3002\u6211\u4eec\u4e0d\u80fd\u4e5f\u4e0d\u5e94\u8be5\u5728\u5b50\u7c7b\u5bf9\u7236\u7c7b\u7684\u53d8\u91cf\u505a\u521d\u59cb\u5316 (code duplication)</li> </ul> <p>Suppose class B is derived from A. Then:Base class member access specifier</p> <p>\u6709\u4ec0\u4e48\u662f\u6ca1\u6709\u7ee7\u627f\u5f97\u5230\uff1a\u6784\u9020\u51fd\u6570\u6ca1\u6709\u88ab\u7ee7\u627f\uff0c\u4f46\u7236\u7c7b\u7684\u6784\u9020\u4f1a\u88ab\u81ea\u52a8\u8c03\u7528\u3002\u6790\u6784\u540c\u7406\u3002\u8d4b\u503c\u7684\u8fd0\u7b97\u7b26\u4e0d\u4f1a\u88ab\u7ee7\u627f\u3002</p> <p>Type ( B is )</p> Inheritance Type ( B is ) public protected private public A public in B protected in B hidden private A private in B private in B hidden protected A protected in B protected in B hidden <p><pre><code>Employee::Employee( const string&amp; name, const string&amp; ssn )\n    : m_name(name), m_ssn( ssn) {\n    // initializer list sets up the values!\n}\nclass Manager : public Employee {\n    public:\n        Manager(const std::string&amp; name, const std::string&amp; ssn, const std::string&amp; title);\n        const std::string title_name() const;\n        const std::string&amp; get_title() const;\n        void print(std::ostream&amp; out) const;\n    private:\n        std::string m_title;\n};\nManager::Manager( const string&amp; name, const string&amp; ssn, const string&amp; title = \"\" )\n    :Employee(name, ssn), m_title( title ) {\n\n}\n</code></pre> The Manager class is defined as a subclass of Employee. \u7236\u7c7b Employee\uff0c\u5b50\u7c7b Manager\u7236\u7c7b\u7684\u6784\u9020\u662f\u5728\u5b50\u7c7b\u7684\u6784\u9020\u4e4b\u524d\u3002\u8981\u8c03\u7528\u7236\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u8981 <code>Employee::print()</code>.</p>"},{"location":"Courses/OOP.html#multiple-inheritance","title":"multiple inheritance \u591a\u91cd\u7ee7\u627f","text":"<p>diamond inheritance \u83f1\u5f62\u7ee7\u627f\uff08\u5b59\u5b50\u4f53\u5185\u6709\u4e24\u4e2a\u7237\u7237</p>"},{"location":"Courses/OOP.html#polymrphism","title":"\u591a\u6001 polymrphism","text":"<ul> <li>\u88ab\u57fa\u7c7b\u5b9a\u4e49\u7684\u53d8\u91cf\u53ef\u4ee5\u5f15\u7528\u4e00\u4e2a\u5b50\u7c7b\u7c7b\u578b\u7684\u5bf9\u8c61</li> <li>\u7236\u7c7b\u7684\u6307\u9488\u6216\u5f15\u7528\u6307\u5411\u57fa\u7c7b</li> <li>\u53ea\u6709 upcast \u548c virtual function \u65f6\u624d\u4f1a\u53d1\u751f</li> <li>\u628a\u5b50\u7c7b\u590d\u5236\u7ed9\u7236\u7c7b\uff0c\u6ca1\u6709\u591a\u6001\u53d1\u751f</li> <li>\u6784\u9020\u51fd\u6570\u4e0d\u4f1a\u53d1\u751f\u591a\u6001</li> </ul> <p>Upcast: take an object of the derived class as an object of the base one.e.g. Ellipse can be treated as a ShapePolymorphic variables \u591a\u6001\u53d8\u91cfPointers or reference variables of objects are polymorphic variablesThey can hold objects of the declared type, or of subtypes of the declared type.\u53ea\u5199\u4e86\u4e00\u53e5\u4ee3\u7801\uff0c\u4f46\u5b9e\u9645\u6267\u884c\u4e2d\u53ef\u80fd\u4f1a\u6709\u591a\u79cd\u6267\u884c\u65b9\u5f0f\uff0c\u8fd9\u5c31\u662f\u591a\u6001\u3002</p>"},{"location":"Courses/OOP.html#virtual-function","title":"\u865a\u51fd\u6570 virtual function","text":"<p><code>virtual</code> \u5b9a\u4e49\u4e86\u865a\u51fd\u6570\uff0c\u610f\u5473\u7740\u5b50\u7c7b\u53ef\u80fd\u51fa\u73b0\u8fd9\u4e2a\u51fd\u6570\u7684\u65b0\u7248\u672c\u3002\u544a\u8bc9\u7f16\u8bd1\u5668\u901a\u8fc7\u6307\u9488\u8bbf\u95ee\u8fd9\u4e2a\u51fd\u6570\u65f6\uff0c\u8981\u5982\u4f55\u7f16\u8bd1\u3002</p> <ul> <li>\u57fa\u7c7b\u5b9a\u4e49\u4e86<code>virtual</code></li> <li>can be transparently overridden in a derived class \u53ef\u4ee5\u5728\u6d3e\u751f\u7c7b\u4e2d\u900f\u660e\u5730\u91cd\u5199</li> <li>\u5bf9\u8c61\u643a\u5e26\u5176\u865a\u62df\u51fd\u6570\u5305</li> <li>\u7f16\u8bd1\u5668\u68c0\u67e5\u5305\u5e76\u52a8\u6001\u8c03\u7528\u6b63\u786e\u7684\u51fd\u6570</li> <li>\u5982\u679c\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u65f6\u5c31\u77e5\u9053\u51fd\u6570\uff0c\u5219\u53ef\u4ee5\u751f\u6210\u9759\u6001\u8c03\u7528 <pre><code>class Ellipse : public Shape {\npublic:\n    Ellipse(float maj, float minr);\n    virtual void render(); // will define own\nprotected:\n    float major_axis, minor_axis;\n};\nclass Circle : public Ellipse {//Class derived from Ellipse\npublic:\n    Circle(float radius) : Ellipse(radius, radius){}\n    virtual void render();\n};\nvoid render(Shape* p) {\n    p-&gt;render(); // calls correct render function\n} // for given Shape! void func() {\n\n\u6211\u4eec\u8ba4\u4e3a p \u8fd9\u4e2a\u6307\u9488\u662f\u4e00\u4e2a polymorphic variable \u591a\u6001\u53d8\u91cf\uff0c\n\u6709\u9759\u6001\uff08\u58f0\u660e\uff09\u7c7b\u578b Shape \u53c8\u6709\u52a8\u6001\u7c7b\u578b\u3002\n\nEllipse ell(10, 20);\nell.render(); // static -- Ellipse::render();\nCircle circ(40);\ncirc.render(); // static -- Circle::render();\nrender(&amp;ell); // dynamic -- Ellipse::render();\nrender(&amp;circ); // dynamic -- Circle::render()\n</code></pre></li> </ul>"},{"location":"Courses/OOP.html#binding","title":"\u9759\u6001\u3001\u52a8\u6001\u7ed1\u5b9a binding","text":"<ul> <li>The declared type of a variable is its static type.</li> <li>The type of the object a variable refers to is its dynamic type.</li> <li>The compiler\u02bcs job is to check for static-type violations.</li> <li>\u56e0\u6b64\u5728\u7f16\u8bd1\u65f6\uff0c\u5982\u679c\u6211\u4eec\u53bb\u6389 <code>Shape()</code> \u91cc\u7684 <code>render</code> \u51fd\u6570\uff0c\u7f16\u8bd1\u5c31\u4f1a\u62a5\u9519\u3002\u8fd9\u6837\u65e0\u6cd5\u901a\u8fc7\u9759\u6001\u68c0\u67e5\uff0c\u5c3d\u7ba1\u6211\u4eec\u77e5\u9053\u6211\u4eec\u5e76\u4e0d\u4f1a\u4f7f\u7528 Shape \u7684 render \u51fd\u6570\u3002</li> </ul> <p>Binding: which function to be called </p> <ul> <li>Static binding\uff1a\u5728\u58f0\u660e\u7684\u65f6\u5019\u51b3\u5b9a\u7f16\u8bd1\u7684\u65f6\u5019\u5339\u914d\u54ea\u4e2a\u51fd\u6570\uff0cC++\u9ed8\u8ba4\u9759\u6001\u7ed1\u5b9a</li> <li>Dynamic binding\uff1a\u5728\u8fd0\u884c\u65f6\u5224\u65ad\u8c03\u7528\u54ea\u4e2a\u51fd\u6570</li> <li>\u5728\u57fa\u7c7b\u4e2d\uff0c\u51fd\u6570\u9700\u8981\u88ab\u58f0\u660e\u4e3a\u865a\u51fd\u6570</li> <li>\u865a\u51fd\u6570\u4e2d\uff0c\u5f15\u7528\u5bf9\u8c61\u7684\u53d8\u91cf\u5fc5\u987b\u4ee5\u5f15\u7528\u6216\u6307\u9488\u7684\u5f62\u5f0f\u4f20\u9012\uff08\u5982\u679c\u901a\u8fc7\u4f20\u503c\u4f20\u9012\uff0c\u4e0d\u4f1a\u51fa\u73b0\u52a8\u6001\u7ed1\u5b9a\uff0c\u5373\u8f93\u51fa\u548c\u4e0d\u7528\u865a\u51fd\u6570\u662f\u4e00\u6837\u7684</li> </ul> <p>virtual \u5173\u952e\u8bcd\u662f\u5728\u544a\u8bc9\u7f16\u8bd1\u5668\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f7f\u7528\u52a8\u6001\u7ed1\u5b9a\u3002\u5426\u5219\u5373\u4f7f\u7528\u6307\u9488\uff0c\u4e5f\u662f\u9759\u6001\u7ed1\u5b9a\u3002e.g. <code>g();</code> <code>Student a; a.f()</code> \u662f\u9759\u6001; <code>Student &amp;a; a.f(); p-&gt;f();</code> \u4e0d\u4e00\u5b9a\u662f\u9759\u6001\u3002</p> call type free function static <code>object.fun()</code> static <code>ref.func()</code> static <code>p-&gt;func()</code> static <code>ref.vfunc()</code> dynamic <code>p-&gt;vfunc()</code> dynamic <p><pre><code>class A {\n    int i;\n    void f() {}\n};\nclass B: public A {\n    int j;\n};\n</code></pre> \u8fd9\u65f6 <code>sizeof(A) == 4</code>\uff0c\u4f46\u5982\u679c\u5c06 f \u58f0\u660e\u4e3a\u865a\u51fd\u6570\uff0c<code>sizeof(A)</code> \u5c31\u53d8\u4e3a 16. \u5982\u679c\u53bb\u6389<code>int i</code>; \u540e <code>sizeof(A)</code> \u53d8\u4e3a 8\u4e00\u65e6\u6709\u865a\u51fd\u6570\u58f0\u660e\uff0c\u8fd9\u91cc\u4f1a\u5728\u5f00\u5934\u653e\u4e00\u4e2a\u6307\u9488 <code>VPTR</code>, \u6307\u5411\u4e00\u4e2a\u8868\uff0c\u91cc\u9762\u653e\u7684\u662f\u51fd\u6570\u6307\u9488\u3002\uff08\u5bf9\u8c61\u91cc\u9762\u6ca1\u6709\u51fd\u6570\u6307\u9488\uff0c\u53ea\u653e\u8868\u7684\u6307\u9488\uff09<code>VPTR</code> \u53ea\u4f1a\u5728\u6784\u9020\u51fd\u6570\u6267\u884c\u7684\u65f6\u5019\u5bf9\u5176\u8fdb\u884c\u8d4b\u503c\u3002</p>"},{"location":"Courses/OOP.html#overriding","title":"Overriding \u51fd\u6570\u8986\u76d6","text":"<p>\u5728\u6d3e\u751f\u7c7b\u4e2d\u91cd\u5b9a\u4e49\u4e00\u4e2a\u865a\u51fd\u6570\u5982\u679c\u5e0c\u671b\u5728\u8c03\u7528\u5bf9\u8c61\u662f\u5b50\u7c7b\u7684\u60c5\u51b5\u4e0b\uff0c\u4ecd\u8c03\u7528\u57fa\u7c7b\u5b9a\u4e49\u7684\u51fd\u6570\uff0c\u5e94\u4f7f\u7528\u57fa\u7c7b\u540d\u548c\u4f5c\u7528\u57df\u8fd0\u7b97\u7b26<code>::</code>\uff0ceg: <code>child.father::function()</code></p> <ul> <li>If you override an overloaded function, you must override all of the variants</li> <li>\u4e0d\u8981\u91cd\u65b0\u5b9a\u4e49\u7236\u7c7b\u7684\u9ed8\u8ba4\u53c2\u6570\u503c\u3002</li> </ul>"},{"location":"Courses/OOP.html#abstract-classes","title":"Abstract classes \u62bd\u8c61\u7c7b","text":"<p>\u7c7b\u4e2d\u4e00\u65e6\u6709\u4e00\u4e2a\u865a\u51fd\u6570=0(\u7eaf\u865a\u51fd\u6570), \u90a3\u4e48\u8fd9\u4e2a\u7c7b\u5c31\u4e0d\u80fd\u88ab\u5236\u9020\u51fa\u5bf9\u8c61\uff0c\u8fd9\u6837\u7684\u7c7b\u53eb\u505a\u62bd\u8c61\u7c7b\u3002\u7c7b\u62bd\u8c61\u5c31\u662f\u5c06\u7c7b\u7684\u5b9e\u73b0\u548c\u4f7f\u7528\u5206\u79bb\u5f00\u6765</p> <ul> <li>\u62bd\u8c61\u57fa\u7c7b\u5177\u6709\u7eaf\u865a\u62df\u51fd\u6570 pure virtual</li> <li>\u53ea\u5b9a\u4e49\u4e86\u63a5\u53e3</li> <li>\u672a\u7ed9\u51fa\u51fd\u6570\u4f53</li> <li>\u62bd\u8c61\u57fa\u7c7b\u4e0d\u80fd\u5b9e\u4f8b\u5316</li> <li>\u5fc5\u987b\u6d3e\u751f\u4e00\u4e2a\uff08\u6216\u591a\u4e2a\uff09\u65b0\u7c7b</li> <li>\u5728\u7c7b\u5b9e\u4f8b\u5316\u4e4b\u524d\uff0c\u5fc5\u987b\u63d0\u4f9b\u6240\u6709\u7eaf\u865a\u51fd\u6570\u7684\u5b9a\u4e49</li> </ul>"},{"location":"Courses/OOP.html#pure-virtual","title":"pure virtual \u7eaf\u865a\u51fd\u6570","text":"<p><code>virtual void render() = 0; // mark render() pure</code></p>"},{"location":"Courses/OOP.html#function-overloading","title":"\u51fd\u6570\u91cd\u8f7d function overloading","text":"<p>\u4e24\u4e2a\u6216\u591a\u4e2a\u51fd\u6570\u53ef\u4ee5\u5177 To define \u540c\u7684\u53c2\u6570\u3002\u5f53\u4e00\u4e2a\u51fd\u6570\u540d\u88ab\u4e0d\u540c\u7684\u4f5c\u4e1a\u91cd\u8f7d\u65f6\uff0c\u79f0\u4e3a\u51fd\u6570\u91cd\u8f7d\u3002\u5728\u51fd\u6570\u91cd\u8f7d\u4e2d\uff0c\u201c\u51fd\u6570\u201d\u540d\u79f0\u5e94\u8be5\u76f8\u540c\uff0c\u53c2\u6570\u5e94\u8be5\u4e0d\u540c\u3002\u53ea\u6709\u8fd4\u56de\u7c7b\u578b\u4e0d\u540c\u4e0d\u7b97\u91cd\u8f7d</p>"},{"location":"Courses/OOP.html#const-and-static","title":"Const and Static","text":""},{"location":"Courses/OOP.html#const","title":"const","text":"<p><code>const</code>\u58f0\u660e\u4e00\u4e2a\u5e38\u91cf <pre><code>char * const q = \"abc\"; // q is const\n*q = 'c'; // ERROR\n// char a[] = \"abc\"; *q = 'c' is ok.\nq++; // ERROR\nconst char *p = \"ABCD\"; // (*p) is a const char\n*p = 'b'; // ERROR! (*p) is the const\n</code></pre> <code>char * const q</code> \u8868\u793a q \u6307\u5411 abc \u7684\u5730\u5740\uff0c\u5219 q \u4e0d\u80fd\u518d\u6307\u5411\u5176\u4ed6\u5730\u65b9\u3002<code>const char * p</code> p \u6307\u5411\u7684\u5730\u5740\u53ef\u4ee5\u4fee\u6539\uff0c\u4f46\u4e0d\u80fd\u901a\u8fc7 p \u4fee\u6539 p \u6307\u5411\u7684\u503c\u3002<code>*</code> \u7684\u4f4d\u7f6e\uff1a<code>* const</code>  \u4e0d\u80fd\u4fee\u6539\u6307\u9488\uff08\u5730\u5740\uff09\uff0c\u4f46\u53ef\u4ee5\u4fee\u6539\u6307\u9488\u6307\u5411\u7684\u5bf9\u8c61\u7684\u5185\u5bb9\uff1b\u6307\u5411\u7684\u6570\u636e\u4e0d\u662f\u5e38\u91cf\uff0c\u53ef\u4ee5\u66f4\u6539<code>const *</code>\u4e0d\u80fd\u4fee\u6539\u6307\u9488\u6307\u5411\u7684\u5bf9\u8c61\u7684\u5185\u5bb9\uff0c\u4f46\u53ef\u4ee5\u4fee\u6539\uff08\u5730\u5740\uff09\u6210\u4e3a\u53e6\u4e00\u4e2a\u5bf9\u8c61\uff1b\u6307\u9488\u4e0d\u662f\u5e38\u91cf\uff0c\u4f46\u6307\u5411\u7684\u6570\u636e\u662f\u5e38\u91cf <pre><code>string p1(\"Fred\");\nconst string* p = &amp;p1;\n/*p is a pointer that can point to strings, \nbut you cannot modify the string that p points to through this pointer. \nHowever, you can change p to point to another string\n*/\nstring const* p = &amp;p1;//same as const string* p = &amp;p1;\nstring *const p = &amp;p1;\n/*\nyou can change the string that p points to (i.e., modify p1 through p), \nbut you cannot change the pointer p to point to another string. \np will always point to p1 for its lifetime.\n*/\n</code></pre></p> <ol> <li>\u51fd\u6570\u58f0\u660e\u672b\u5c3e <code>const</code> : - This const qualifies the member function, indicating that it does not modify the object's state on which it's called. \u4e0d\u4f1a\u66f4\u6539\u8c03\u7528\u5bf9\u8c61\u7684\u6210\u5458\u53d8\u91cf\u7684\u503c - \u5728\u51fd\u6570\u5185\u4e0d\u4f1a\u8c03\u7528\u5176\u4ed6\u975e const \u7684\u6210\u5458\u51fd\u6570 - const \u548c\u975e const \u51fd\u6570\u53ef\u6784\u6210\u91cd\u8f7d\u5173\u7cfb</li> <li>\u51fd\u6570\u53c2\u6570\u4e2d\u6709 const <code>(const A &amp;that)</code>: - This const indicates that the function will not modify the object passed by reference. It ensures that the state of that object remains unchanged throughout the function. \u8be5 const \u8868\u793a\u8be5\u51fd\u6570\u4e0d\u4f1a\u4fee\u6539\u901a\u8fc7\u5f15\u7528\u4f20\u9012\u7684\u5bf9\u8c61\u3002 \u5b83\u786e\u4fdd\u8be5\u5bf9\u8c61\u7684\u72b6\u6001\u5728\u6574\u4e2a\u51fd\u6570\u4e2d\u4fdd\u6301\u4e0d\u53d8\u3002</li> <li>\u5982\u679c\u6210\u5458\u53d8\u91cf\u4e2d\u6709 const\uff0c\u9700\u8981\u5728\u6784\u9020\u51fd\u6570\u4e2d\u7528\u521d\u59cb\u5316\u5217\u8868\u521d\u59cb\u5316</li> </ol> <p>\u5728\u540c\u65f6\u5b58\u5728 const \u51fd\u6570\u548c \u975e const \u91cd\u8f7d\u51fd\u6570\u7684\u524d\u63d0\u4e0b\uff0c\u82e5 \u975econst \u5bf9\u8c61\u60f3\u8c03\u7528 const \u6210\u5458\u51fd\u6570\uff0c\u5219\u9700\u8981\u663e\u793a\u7684\u8f6c\u5316\uff0c\u4f8b\u5982<code>(const Student&amp;)obj.getAge();</code>\u82e5const\u5bf9\u8c61\u60f3\u8c03\u7528\u975econst\u6210\u5458\u51fd\u6570\uff0c\u540c\u7406\u8fdb\u884c\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362<code>const_cast &lt; Student&amp;&gt;(constObj).getAge();</code>(\u6ce8\u610f<code>constObj</code>\u4e00\u5b9a\u8981\u52a0\u62ec\u53f7) \u5f53\u7c7b\u4e2d\u53ea\u6709\u4e00\u79cd\u51fd\u6570\u5b58\u5728\u7684\u60c5\u51b5\uff0c\u975econst\u5bf9\u8c61\u53ef\u4ee5\u8c03\u7528const\u6210\u5458\u51fd\u6570\u6216\u8005\u975econst\u6210\u5458\u51fd\u6570\uff0cconst\u5bf9\u8c61\u53ea\u80fd\u8c03\u7528const\u6210\u5458\u51fd\u6570\uff0c\u82e5\u76f4\u63a5\u8c03\u7528\u975econst\u6210\u5458\u51fd\u6570\u7f16\u8bd1\u5668\u4f1a\u62a5\u9519\u3002</p>"},{"location":"Courses/OOP.html#static","title":"static","text":"<p>\u9759\u6001\u672c\u5730\u53d8\u91cf\u5b9e\u9645\u4e0a\u662f\u5168\u5c40\u53d8\u91cf\uff0c\u88ab\u5b58\u50a8\u5728\u9759\u6001\u5185\u5b58\u4e2d\u3002\u51fa\u73b0\u5728\u5168\u5c40\u53d8\u91cf/\u51fd\u6570\u524d\uff0c\u8868\u793a\u8bbf\u95ee\u9650\u5236\uff0c\u53ea\u6709\u5f53\u524d\u6587\u4ef6\u53ef\u4ee5\u8bbf\u95ee\u3002Initialization occurs only once. \u5bf9\u8c61\u3001\u6784\u9020\u51fd\u6570\u90fd\u53ea\u521d\u59cb\u5316\u4e00\u6b21\u9759\u6001\u6210\u5458\u53d8\u91cf\u9759\u6001\u6210\u5458\u53d8\u91cf\u548c\u9759\u6001\u672c\u5730\u53d8\u91cf\u662f\u4e00\u6837\u7684\u3002\u8bbf\u95ee\u53d7\u9650\uff0c\u9650\u4e8e\u7c7b\u5185\u90e8\uff0c\u5b9e\u9645\u4e0a\u662f\u5168\u5c40\u53d8\u91cf\uff08\u5728\u8fd9\u4e2a\u7c7b\u5185\u6240\u6709\u7684\u5bf9\u8c61\u90fd\u7ef4\u6301\u76f8\u540c\u7684\u503c\uff0c\u5bf9\u8c61 A \u4fee\u6539\u4e86\uff0c\u90a3\u4e48\u5bf9\u8c61 B \u7684\u8fd9\u4e2a\u53d8\u91cf\u7684\u503c\u4e5f\u4f1a\u6539\u53d8\uff09\u9759\u6001\u6210\u5458\u51fd\u6570\u6ca1\u6709 this, \u4e0d\u80fd\u8c03\u7528\u975e\u9759\u6001\u6210\u5458\u53d8\u91cf\uff0c\u4e5f\u4e0d\u80fd\u8bbf\u95ee\u975e\u9759\u6001\u51fd\u6570\u3002\u53ef\u4ee5\u5728\u6ca1\u6709\u521b\u5efa\u7c7b\u7684\u5bf9\u8c61\u7684\u65f6\u5019\u5c31\u80fd\u8c03\u7528\u9759\u6001\u6210\u5458\u51fd\u6570\u3002</p>"},{"location":"Courses/OOP.html#namespace","title":"Namespace \u547d\u540d\u7a7a\u95f4","text":"<p>Namespace is a scope just like a class. <code>namespace X {type function1;type function2;}</code>\u907f\u514d\u4e0d\u540c h \u6587\u4ef6\u91cc\u7684\u51fd\u6570\u540d\u79f0\u6709\u91cd\u590d<code>using namespace xx;</code>\uff08\u53ef\u4ee5\u653e\u5728\u67d0\u4e2a\u51fd\u6570\u91cc\uff0c\u4e0d\u4e00\u5b9a\u8981\u5728\u5168\u5c40\uff09\u6216\u8005<code>using xx::function()</code>\uff08\u660e\u786e\u6307\u51fa\u54ea\u4e2a\u547d\u540d\u7a7a\u95f4\u7684\u51fd\u6570\uff09\u53ef\u4ee5\u7ed9\u67d0\u4e2a\u547d\u540d\u7a7a\u95f4\u53d6\u522b\u540d<code>namespace simple = complicated;</code>\u547d\u540d\u7a7a\u95f4\u662f\u5f00\u653e\u7684\uff0c\u53ef\u4ee5\u5206\u5f00\u5728\u4e0d\u540c h \u6587\u4ef6\u5b9a\u4e49</p>"},{"location":"Courses/OOP.html#overloading-operators","title":"\u91cd\u8f7d\u8fd0\u7b97\u7b26 Overloading operators","text":"<p>C++\u8fd0\u7b97\u7b26\u91cd\u8f7d-CSDN\u535a\u5ba2</p>"},{"location":"Courses/OOP.html#_7","title":"\u4e0d\u53ef\u91cd\u8f7d\u7684\u8fd0\u7b97\u7b26","text":"<p><code>.</code>,<code>.*</code>,<code>::</code>,<code>?:</code>,<code>sizeof</code>,<code>typeid</code>,<code>static_cast</code>(xxx_cast)//\u8fd0\u7b97\u7b26<code>[]</code> <pre><code>class A {\npublic:\n    A(int a):i(a){}\n    int get() {return i;}\n    /* \u8fd4\u56de\u7684\u4e00\u5b9a\u662f A \u7684\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61 */\n    const A operator+(const A &amp;that) const {\n        A c(this-&gt;i+that.i); /* \u8fd9\u91cc\u53ef\u4ee5\u8bbf\u95ee that. \u79c1\u6709\u662f\u9488\u5bf9\u7c7b\u7684\uff0c\u4e0d\u662f\u9488\u5bf9\u5bf9\u8c61\u7684\u3002 */\n        return c;\n    }\nprivate:\n    int i;\n}\nint main() {\n    A a = 6;\n    A b = 7;\n    A c = a + b;    /* a + 9 \u4e5f\u662f\u53ef\u4ee5\u7684\uff08\u7f16\u8bd1\u5668\u4f1a\u7528 9 \u5e2e\u6211\u4eec\u6784\u9020\u4e00\u4e2a\u5bf9\u8c61\uff09\uff1b\u4f46 9 + a \u4e0d\u884c */\n    cout &lt;&lt; c.get() &lt;&lt; endl;    /* \u8f93\u51fa 13 */\n}\n</code></pre></p>"},{"location":"Courses/OOP.html#_8","title":"\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1","text":"<p>Private Member Access: \u5728\u7c7b\u5185 private \u6210\u5458\u53ef\u4ee5\u88ab\u51fd\u6570\u8bbf\u95ee\u5168\u5c40\u51fd\u6570\u662f\u4e0d\u80fd\u8bbf\u95ee\u7c7b\u7684\u79c1\u6709\u53d8\u91cf\u7684\uff0c\u8981\u58f0\u660e\u53cb\u5143 <code>friend</code>\u52a0\u51cf\u4e58\u9664\u53ea\u80fd\u4f5c\u4e3a\u53f3\u503c\uff0c\u56e0\u6b64\u8981 const.\uff1b\u800c <code>[]</code> \u53ef\u4ee5\u4f5c\u4e3a\u5de6\u503c\uff0c\u5c31\u4e0d\u80fd const.</p>"},{"location":"Courses/OOP.html#prototypes-of-operator","title":"\u8fd0\u7b97\u7b26\u7c7b\u578b prototypes of operator","text":"<ul> <li>\u4e24\u5143\u8fd0\u7b97\uff1a<code>**+ - * / % ^ &amp; | ~**</code></li> </ul> <p><code>const T operator X(const T&amp;l, const T&amp;r);</code>\u8fd9\u91cc\u8fd4\u56de\u7684\u5fc5\u987b\u662f\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\u3002\u5982\u679c\u8fd9\u91cc\u8fd4\u56de\u5f15\u7528\uff0c\u90a3\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u5168\u5c40\u7684\u5730\u5740\uff0c\u4f46\u51fd\u6570\u53ea\u6709\u672c\u5730\u7a7a\u95f4\u3002</p> <ul> <li>\u4e24\u5143\u5173\u7cfb\u8fd0\u7b97 relation operator\uff1a<code>**! &amp;&amp; || &lt; &lt;= == &gt;= &gt;**</code></li> </ul> <p><code>bool operator X(const T&amp;l, const T&amp;r);</code></p> <ul> <li><code>**[]**</code> \u8ba4\u4e3a\u662f\u4e00\u4e2a\u5bb9\u5668</li> </ul> <p><code>E &amp; T::operator[](int index);</code><code>int&amp; operator[](int index)</code>\u8fd4\u56de\u7684\u662f\u5de6\u503c\uff08\u4e0d\u80fd\u4e3a const\uff09\uff0c\u800c\u4e14\u4e0d\u80fd\u662f\u4e00\u4e2a\u65b0\u5bf9\u8c61\uff08\u5426\u5219 <code>a[6]=7</code> \u6267\u884c\u540e\u5c31\u88ab\u4e22\u6389\u4e86\uff09</p> <ul> <li> <p>\u81ea\u589e\u3001\u81ea\u51cf <code>**++ --**</code> <pre><code>class Integer { \n public: \n ... \n const Integer&amp; operator++(); //prefix++ \n const Integer operator++(int); //postfix++ \n const Integer&amp; operator--(); //prefix-- \n const Integer operator--(int); //postfix-- \n ... \n };\n// \nconst Integer&amp; Integer::operator++() { \n*this += 1; // increment \nreturn *this; // fetch \n} \n// int argument not used so leave unnamed so \n// won't get compiler warnings \nconst Integer Integer::operator++( int ){ \nInteger old( *this ); // fetch \n++(*this); // increment \u8c03\u7528\u4e86\u521a\u521a\u7684\u51fd\u6570\nreturn old; // return \n\n++x; // calls x.operator++(); \nx++; // calls x.operator++(0); \n--x; // calls x.operator--(); \nx--; // calls x.operator--(0);\n</code></pre> <code>a++</code>\u540e\u7f00++ \u8981\u53c2\u6570 int\uff08\u7f16\u8bd1\u5668\u8bbe\u4e3a 0\uff09Postfix is generally less efficient than the prefix version because it involves creating a copy of the object. \u524d\u7f00\u6bd4\u540e\u7f00\u6548\u7387\u66f4\u9ad8</p> </li> <li> <p>\u8d4b\u503c\u8fd0\u7b97\u7b26 assignment operator <code>**=**</code></p> </li> </ul> <p>\u9700\u8981\u81ea\u68c0\u662f\u4e0d\u662f\u81ea\u5df1\u7ed9\u81ea\u5df1\u8d4b\u503c <pre><code>T &amp; T::operator=( const T&amp; rhs ) {\n// check for self assignment\n    if ( this != &amp;rhs ) {//Protect against self-assignment\n    // perform assignment\n    ...\n    }\n    return *this;\n}\n//This checks address, not value (*this != rhs)\n</code></pre> \u5bf9\u4e8e\u52a8\u6001\u5206\u914d\u7684\u7c7b\uff0c\u5185\u5b58\u58f0\u660e\u4e00\u4e2a\u8d4b\u503c\u8fd0\u7b97\u7b26\uff08\u548c\u4e00\u4e2a\u590d\u5236\u6784\u9020\u51fd\u6570\uff09,\u53ef\u4ee5\u58f0\u660e<code>operator=</code> \u4e3a private \u7c7b\uff0c\u6216\u4f7f\u7528<code>=delete</code>. eg, <code>MyClass&amp; operator=(const MyClass&amp; other) = delete;</code></p> <p>functor\uff1a A functor, which overloads the function calloperator, is an object that acts like a function <pre><code>struct F {\n    void operator()(int x) const {\n        std::cout &lt;&lt; x &lt;&lt; \"\\n\";\n    }\n}; // F is a functor\nF f;\nf(2); // calls f.operator()\n</code></pre></p>"},{"location":"Courses/OOP.html#user-defined-type-conversions","title":"\u7c7b\u578b\u8f6c\u6362 User-defined type conversions","text":"<p>\u53ef\u4ee5\u5728\u51fd\u6570\u524d\u58f0\u660e<code>explicit</code>\u6765\u907f\u514d\u9690\u6027\u7c7b\u578b\u8f6c\u6362 implicit <pre><code>class Rational {\npublic:\n ...\n operator double() const; // Rational to double\n}\nRational::operator double() const { \n return numerator_/(double)denominator_;\n}\nRational r(1,3); \ndouble d = r; // r=&gt;double\n</code></pre> \u4e0d\u9700\u8981\u5199\u8fd4\u56de\u7c7b\u578b\u3002 \u5982\u679c\u6709\u58f0\u660e<code>explicit</code>, \u90a3\u4e48\u6211\u4eec\u5c31\u5fc5\u987b\u5199\u4f5c <code>double d = (double)r</code>;</p>"},{"location":"Courses/OOP.html#c","title":"C++\u7c7b\u578b\u8f6c\u6362","text":"<p>\u4f46\u662f\u4e0d\u80fd\u540c\u65f6\u6709\u4e24\u4e2a\u5bf9\u540c\u4e00\u4e2a\u5bf9\u8c61\u7684\u7c7b\u578b\u8f6c\u6362\uff0c\u4f8b\u5982\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u548c\u53e6\u4e00\u4e2a\u5b9a\u4e49\u7684\u51fd\u6570\uff08\u4e0a\u56fe\uff09\u9700\u8981\u4e00\u4e2a <code>C(T)</code> \u7684\u4e0d\u52a0 <code>explicit</code>\u7684\u6784\u9020\u51fd\u6570\uff0c\u6216\u8005 <code>operator C()</code> \u7684\u91cd\u8f7d\uff1b\u5982\u679c\u4e24\u4e2a\u90fd\u6709\uff0c\u7f16\u8bd1\u5668\u4f1a\u51fa\u9519</p> <ul> <li><code>**static_cast**&lt;type&gt;(expression)</code></li> <li>is not safe when it is used to cast object pointer</li> <li><code>**dynamic_cast**&lt;type&gt;(expression)</code>checks whether a downcast\uff08\u5411\u4e0b\u7c7b\u578b\u8f6c\u6362\uff09 of object pointer is safe\uff1bIf not safe, will return a NULL pointer</li> <li><code>**const_cast**&lt;type&gt;(expression)</code> is used to modify the const or volatile property</li> <li>modify a variable that was initially declared as <code>const</code></li> <li>const_cast examples</li> <li><code>**reinterperet**_cast&lt;type&gt;(expression</code>) is used to convert pointers or reference into integer or backforth</li> <li></li> </ul>"},{"location":"Courses/OOP.html#named-casts","title":"named casts","text":"<p><pre><code>int a=7;\ndouble *q;\nq=(double*) &amp;a;//error\n</code></pre> \u91cd\u8f7d\u548c\u7c7b\u578b\u8f6c\u6362\u7684 best matchExact match is cost-free\u2013 Matches involving built-in conversions\u2013 User-defined type conversions</p>"},{"location":"Courses/OOP.html#stl","title":"STL \u6807\u51c6\u6a21\u677f\u5e93","text":"<p>STL = Standard Template Library Containers</p> <ul> <li>Sequence Containers (vector, deque, list, forward_list,array, string)</li> <li>Associative Containers (set, multiset, map, multimap)</li> <li>Unordered Associative Containers (unordered_set,unordered_multiset, unordered_map, unordered_multimap)</li> <li>Algorithms\uff08sort, search, etc)</li> </ul>"},{"location":"Courses/OOP.html#iterators","title":"Iterators","text":"<p><code>for(auto i : arr)</code>\u5199\u8d77\u6765\u7b80\u5355\uff0c\u4e0d\u9700\u8981\u9884\u5148\u521d\u59cb\u5316\u8fed\u4ee3\u5668\u3002\u7f3a\u70b9\u662f\u4e0d\u80fd\u83b7\u5f97\u4e0b\u6807\uff0c\u4e5f\u4e0d\u80fd\u9006\u5e8f\u904d\u5386\uff0c\u4e5f\u4e0d\u80fd\u8df3\u8fc7\u67d0\u4e2a\u5355\u5143\uff0c\u4e0d\u80fd\u4fee\u6539\u5bb9\u5668\u7684\u503c\u3002</p>"},{"location":"Courses/OOP.html#vector","title":"\u5411\u91cf vector","text":"<p><code>sort(array[0],array[n])</code>\u5c06\u5411\u91cf\u6216\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u6392\u5e8f <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\nint main( ) {\n    vector&lt;int&gt; x;\n    for (int a=0; a&lt;1000; a++)\n        x.push_back(a);\n    vector&lt;int&gt;::iterator p;\n    for (p=x.begin(); p&lt;x.end(); p++)\n        cout &lt;&lt; *p &lt;&lt; \" \";\n    return 0;\n}\n</code></pre> <code>vector.pushback()</code> \u9700\u8981\u62d3\u5c55\u65f6 capacity \u6309\u500d\u6570\u589e\u957f\u4e00\u6b21\uff08\u5230\u4e0d\u591f\u4e86\u518d*2\uff09\uff1bsize \u5c31+1 <code>reserve</code>\u5206\u914d\u7a7a\u95f4(capacity)<code>clear</code>size \u53d8\u6210 0\uff1bcapacity \u4e0d\u53d8<code>shrink.fit()</code>size \u548c capacity \u4e00\u8d77\u53d8//\u548c\u7a7a vector \u8fdb\u884c swap()</p> <ul> <li>It is able to increase its internal capacity as required: as more items are added, it simply makes enough room for them.</li> <li>It keeps its own private count of how many items it is currently storing. Its size method returns the number of objects currently stored in it.</li> <li>It maintains the order of items you insert into it. You can later retrieve them in the same order.</li> </ul> <p>\u6ce8\u610f :::danger <code>vector&lt;int&gt; v; v[100]=1; // Whoops!</code><code>if (foo[\"bob\"]==1)//silently created entry \u201cbob\u201d</code>\u6b63\u786e\u7684\u5199\u6cd5\uff1a<code>if(foo.count(\"bob\"))</code> :::</p>"},{"location":"Courses/OOP.html#list","title":"\u94fe\u8868 list","text":"<p>list \u4e0d\u7528 \u5c0f\u4e8e<code>x.push_back(item)</code><code>x.push_front(item)</code><code>x.pop_back()</code><code>x.pop_front()</code><code>x.remove(item)</code> <pre><code>list&lt;int&gt; L;\nfor(int i=1; i&lt;=5; ++i)\nL.push_back(i);\n//delete second item.\nL.erase( ++L.begin() );\ncopy( L.begin(), L.end(),ostream_iterator&lt;int&gt;(cout,\",\")); //Prints: 1,3,4,5,\n</code></pre></p>"},{"location":"Courses/OOP.html#streams","title":"Streams \u6d41","text":"<p>Defining a stream extractor\uff0c\u53ef\u5b9a\u4e49\u91cd\u8f7d\u7684<code>&gt;&gt;</code> <pre><code>istream&amp; operator&gt;&gt;(istream&amp; is, T&amp; obj) {\n// specific code to read obj\n    return is;\n}\n</code></pre></p>"},{"location":"Courses/OOP.html#templates","title":"Templates \u6a21\u677f","text":"<p>\u91cd\u590d\u4f7f\u7528\u6e90\u4ee3\u7801\u51fd\u6570\u6a21\u677f\u7c7b\u6a21\u677f <pre><code>tempalte &lt;class T&gt;\nvoid swap(T &amp;x, T &amp;y){\n    T tmp =y;\n    y=x;\n    x=tmp;\n}\n</code></pre> the template keyword introduces the template</p> <ul> <li>The class <code>T</code>specifies a parameterized type name</li> <li>class means any built-in type or user-defined type</li> <li> <p>Inside the template, use T as a type name <pre><code>template &lt;class T&gt;\nvoid foo() { /* ... */ }\nfoo&lt;int&gt;(); // type T is int\nfoo&lt;float&gt;(); // type T is float\n</code></pre> \u6a21\u677f\u4e0d\u5141\u8bb8\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362\uff0c\u4f46\u53ef\u4ee5\u7531\u4e0d\u540c\u79cd\u7c7b\u6a21\u677f\u53c2\u6570\u53ef\u4ee5\u662f<code>const</code>\u7c7b\u578b\uff0c\u53ef\u4ee5\u4e0d\u58f0\u660e\u53c2\u6570\u7c7b\u578b</p> </li> <li> <p>Templates can inherit from non-template classes/template classes</p> </li> <li>Non-template classes can inherit from temp <pre><code>template &lt;class T&gt;\nVector&lt;T&gt;::Vector(int size): m_size(size) {\n    m_elements = new T[m_size];\n}\ntemplate &lt;class T&gt;\nT&amp; Vector&lt;T&gt;::operator[](int index)\n{\n    if(index &lt; m_size &amp;&amp; index &gt;= 0) {\n    return m_elements[index];\n    } else {\n    ...\n    }\n}\n...\n</code></pre></li> </ul>"},{"location":"Courses/OOP.html#iterators_1","title":"Iterators","text":"<p>visit the elements in order, without knowing the details of the container</p>"},{"location":"Courses/OOP.html#exceptions","title":"Exceptions \u5f02\u5e38","text":"<p>\u5f02\u5e38\u4f7f\u7a0b\u5e8f\u7ec8\u6b62\u65f6\uff0c\u4e0b\u9762\u7684\u8bed\u53e5\u4e0d\u6267\u884c\uff0c\u4f46\u5f00\u8f9f\u7684\u6808\u7a7a\u95f4\u4f1a\u81ea\u52a8\u91ca\u653e\uff08\u6790\u6784\u51fd\u6570\uff09\u6790\u6784\u51fd\u6570\u4e2d\u4e0d\u8981\u629b\u5f02\u5e38\u51fd\u6570\u540e\u9762\u52a0<code>throw()</code>\u4f1a\u4e0d\u629b\u51fa\u5f02\u5e38In C++, throwing an exception makes a copy of the exception object. </p>"},{"location":"Courses/OOP.html#try","title":"try","text":"<pre><code>try{\n    A;\n    B;\n}\ncatch{do something;}//form1\ncatch(){do something;}//form2\n\u2026\u2026\n</code></pre> <ul> <li>try\u540e\u53ef\u4ee5\u8ddf\u4efb\u610f\u6570\u91cf\u7684catch</li> <li>throw \u53ef\u4ee5\u629b\u7684\u4efb\u610f\u7c7b\u578b, int/double/... \u4e5f\u662f\u53ef\u4ee5\u7684\u3002\u4e00\u822c\u4e0d\u4f1a\u629b\u539f\u59cb\u6570\u636e\u7c7b\u578b\uff0c\u56e0\u4e3a\u8868\u8fbe\u7684\u4fe1\u606f\u6709\u9650\u3002\u901a\u5e38\u4f1a\u505a\u4e00\u4e2a\u7c7b\uff0c\u629b\u7c7b\u7684\u5bf9\u8c61</li> </ul>"},{"location":"Courses/OOP.html#new","title":"new","text":"<p><code>new</code> does NOT returned 0 on failure, new raises a <code>bad_alloc()</code> exception.</p>"},{"location":"Courses/OOP.html#smart-pointers","title":"Smart Pointers","text":"<p>\u5728\u5934\u6587\u4ef6<code>memory</code>\u4e2d<code>unique_ptr</code><code>shared_ptr</code><code>weak_ptr</code>ucObject <pre><code>#include &lt;assert.h&gt; \nclass UCObject { \npublic: \n    UCObject() : m_refCount(0) { } \n    virtual ~UCObject() { assert(m_refCount == 0);};   // \u8fd9\u91cc assert, \u56e0\u4e3a\u4e0d\u662f\u5bf9\u8c61\u7684\u95ee\u9898\uff0c\u662f\u5916\u90e8\u7684\u95ee\u9898\u3002\n    UCObject(const UCObject&amp;) : m_refCount(0) { }      // \u4e0d\u62f7\u8d1d refcount\n    void incr() { m_refCount++; } \n    void decr(); \n    int references() { return m_refCount; } \nprivate: \n    int m_refCount; \n};\ninline void UCObject::decr() { \n    m_refCount -= 1; \n    if (m_refCount == 0) { \n    delete this; \n    } \n} \n</code></pre></p>"},{"location":"Courses/OOP.html#q","title":"Q","text":"<ol> <li>\u5173\u4e8e\u52a8\u6001\u7ed1\u5b9a\u7684\u4e0b\u5217\u63cf\u8ff0\u4e2d\uff0c\uff08 \uff09\u662f\u9519\u8bef\u7684\u3002 (2\u5206)</li> <li>\u52a8\u6001\u7ed1\u5b9a\u662f\u4ee5\u865a\u51fd\u6570\u4e3a\u57fa\u7840\u7684</li> <li>\u52a8\u6001\u7ed1\u5b9a\u5728\u8fd0\u884c\u65f6\u786e\u5b9a\u6240\u8c03\u7528\u7684\u51fd\u6570\u4ee3\u7801</li> <li>\u52a8\u6001\u7ed1\u5b9a\u8c03\u7528\u51fd\u6570\u64cd\u4f5c\u662f\u901a\u8fc7\u6307\u5411\u5bf9\u8c61\u7684\u6307\u9488\u6216\u5bf9\u8c61\u5f15\u7528\u6765\u5b9e\u73b0\u7684</li> <li>\u52a8\u6001\u7ed1\u5b9a\u662f\u5728\u7f16\u8bd1\u65f6\u786e\u5b9a\u64cd\u4f5c\u51fd\u6570\u7684</li> </ol> <p>\u52a8\u6001\u7ed1\u5b9a\u5728\u8fd0\u884c\u65f6\u786e\u5b9a\u6240\u8c03\u7528\u7684\u51fd\u6570\u4ee3\u7801\uff0c\u91cd\u8f7d\u51fd\u6570\u662f\u5728\u7f16\u8bd1\u65f6\u786e\u5b9a\u64cd\u4f5c\u51fd\u6570\u7684\u3002</p> <ol> <li>\u5173\u4e8e\u865a\u51fd\u6570\u7684\u63cf\u8ff0\u4e2d\uff0c\uff08 \uff09\u662f\u6b63\u786e\u7684\u3002</li> <li>\u865a\u51fd\u6570\u662f\u4e00\u4e2astatic\u7c7b\u578b\u7684\u6210\u5458\u51fd\u6570</li> <li>\u865a\u51fd\u6570\u662f\u4e00\u4e2a\u975e\u6210\u5458\u51fd\u6570</li> <li>\u57fa\u7c7b\u4e2d\u8bf4\u660e\u4e86\u865a\u51fd\u6570\u540e\uff0c\u6d3e\u751f\u7c7b\u4e2d\u5c06\u5176\u5bf9\u5e94\u7684\u51fd\u6570\u53ef\u4e0d\u5fc5\u8bf4\u660e\u4e3a\u865a\u51fd\u6570</li> <li>\u6d3e\u751f\u7c7b\u7684\u865a\u51fd\u6570\u4e0e\u57fa\u7c7b\u7684\u865a\u51fd\u6570\u5177\u6709\u4e0d\u540c\u7684\u53c2\u6570\u4e2a\u6570\u548c\u7c7b\u578b</li> </ol> <p>A\u7b54\u6848\uff1a\u9759\u6001\u6210\u5458\u51fd\u6570\uff0c\u53ef\u4ee5\u4e0d\u901a\u8fc7\u5bf9\u8c61\u6765\u8c03\u7528\uff0c\u5373\u6ca1\u6709\u9690\u85cf\u7684this\u6307\u9488\u3002virtual\u51fd\u6570\u4e00\u5b9a\u8981\u901a\u8fc7\u5bf9\u8c61\u6765\u8c03\u7528\uff0c\u5373\u6709\u9690\u85cf\u7684this\u6307\u9488\u3002\u6240\u4ee5\u865a\u51fd\u6570\u4e0d\u53ef\u4ee5\u662fstatic\u7684\uff1bB\u7b54\u6848\uff1a\u8fd9\u5f88\u660e\u663e\u5427\uff0c\u600e\u4e48\u4e0d\u53eb\u6210\u5458\u51fd\u6570\u5462orz\uff1bC\u7b54\u6848\uff1a\u8fd9\u4e2a\u5c31\u662f\u865a\u51fd\u6570\u7684\u7279\u6027\uff0c\u53ea\u8981\u6d3e\u751f\u7c7b\u7684\u51fd\u6570\u4e0e\u57fa\u7c7b\u7684\u540c\u539f\u578b\uff08\u51fd\u6570\u8fd4\u56de\u7c7b\u578b\u3001\u51fd\u6570\u540d\u548c\u5f62\u53c2\u5217\u8868\uff09\uff0c\u81ea\u52a8\u8f6c\u4e3a\u865a\u51fd\u6570\uff0c\u4e0d\u9700\u8981\u58f0\u660evirtual\uff1b D\u7b54\u6848\uff1a\u53c2\u8003C\u7b54\u6848\uff0c\u5982\u679c\u4e0d\u540c\u7684\u8bdd\u5c31\u53eb\u4f5c\u51fd\u6570\u91cd\u8f7d\u4e86\u3002</p> <ol> <li>\u5173\u4e8e\u7eaf\u865a\u51fd\u6570\u548c\u62bd\u8c61\u7c7b\u7684\u63cf\u8ff0\u4e2d\uff0c(  )\u662f\u9519\u8bef\u7684\u3002 </li> <li>\u7eaf\u865a\u51fd\u6570\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u865a\u51fd\u6570\uff0c\u5b83\u6ca1\u6709\u5177\u4f53\u7684\u5b9e\u73b0\uff1b</li> <li>\u62bd\u8c61\u7c7b\u662f\u6307\u5177\u6709\u7eaf\u865a\u51fd\u6570\u7684\u7c7b\uff1b</li> <li>\u4e00\u4e2a\u57fa\u7c7b\u58f0\u660e\u6709\u7eaf\u865a\u51fd\u6570\uff0c\u8be5\u57fa\u7c7b\u7684\u6d3e\u751f\u7c7b\u4e00\u5b9a\u4e0d\u518d\u662f\u62bd\u8c61\u7c7b;</li> <li>\u62bd\u8c61\u7c7b\u53ea\u80fd\u4f5c\u4e3a\u57fa\u7c7b\u6765\u4f7f\u7528\uff0c\u5176\u7eaf\u865a\u51fd\u6570\u7684\u5b9e\u73b0\u7531\u6d3e\u751f\u7c7b\u7ed9\u51fa</li> </ol> <p>\u5e26\u6709\u7eaf\u865a\u51fd\u6570\u7684\u7c7b\u79f0\u4e3a\u62bd\u8c61\u7c7b\u3002\u62bd\u8c61\u7c7b\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u7c7b\uff0c\u5b83\u662f\u4e3a\u4e86\u62bd\u8c61\u548c\u8bbe\u8ba1\u7684\u76ee\u7684\u800c\u5efa\u7acb\u7684\uff0c\u5b83\u5904\u4e8e\u7ee7\u627f\u5c42\u6b21\u7ed3\u6784\u7684\u8f83\u4e0a\u5c42\u3002__\u62bd\u8c61\u7c7b\u662f\u4e0d\u80fd\u5b9a\u4e49\u5bf9\u8c61\u7684__\uff0c\u5728\u5b9e\u9645\u4e2d\u4e3a\u4e86\u5f3a\u8c03\u4e00\u4e2a\u7c7b\u662f\u62bd\u8c61\u7c7b\uff0c\u53ef\u5c06\u8be5\u7c7b\u7684\u6784\u9020\u51fd\u6570\u8bf4\u660e\u4e3a\u4fdd\u62a4\u7684\u8bbf\u95ee\u63a7\u5236\u6743\u9650\u3002    \u62bd\u8c61\u7c7b\u7684\u4e3b\u8981\u4f5c\u7528\u662f\u5c06\u6709\u5173\u7684\u7ec4\u7ec7\u5728\u4e00\u4e2a\u7ee7\u627f\u5c42\u6b21\u7ed3\u6784\u4e2d\uff0c\u7531\u5b83\u6765\u4e3a\u5b83\u4eec\u63d0\u4f9b\u4e00\u4e2a\u516c\u5171\u7684\u6839\uff0c\u76f8\u5173\u7684\u5b50\u7c7b\u662f\u4ece\u8fd9\u4e2a\u6839\u6d3e\u751f\u51fa\u6765\u7684\u3002    \u62bd\u8c61\u7c7b\u523b\u753b\u4e86\u4e00\u7ec4\u5b50\u7c7b\u7684\u64cd\u4f5c\u63a5\u53e3\u7684\u901a\u7528\u8bed\u4e49\uff0c\u8fd9\u4e9b\u8bed\u4e49\u4e5f\u4f20\u7ed9\u5b50\u7c7b\u3002\u4e00\u822c\u800c\u8a00\uff0c\u62bd\u8c61\u7c7b\u53ea\u63cf\u8ff0\u8fd9\u7ec4\u5b50\u7c7b\u5171\u540c\u7684\u64cd\u4f5c\u63a5\u53e3\uff0c\u800c\u5b8c\u6574\u7684\u5b9e\u73b0\u7559\u7ed9\u5b50\u7c7b\u3002    __\u62bd\u8c61\u7c7b\u53ea\u80fd\u4f5c\u4e3a\u57fa\u7c7b\u6765\u4f7f\u7528\uff0c\u5176\u7eaf\u865a\u51fd\u6570\u7684\u5b9e\u73b0\u7531\u6d3e\u751f\u7c7b\u7ed9\u51fa__\u3002\u5982\u679c\u6d3e\u751f\u7c7b\u6ca1\u6709\u91cd\u65b0\u5b9a\u4e49\u7eaf\u865a\u51fd\u6570\uff0c\u53ea\u662f\u7ee7\u627f\u57fa\u7c7b\u7684\u7eaf\u865a\u51fd\u6570\uff0c\u5219\u8fd9\u4e2a\u6d3e\u751f\u7c7b\u4ecd\u7136\u8fd8\u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\u3002\u5982\u679c\u6d3e\u751f\u7c7b\u4e2d\u7ed9\u51fa\u4e86\u57fa\u7c7b\u7eaf\u865a\u51fd\u6570\u7684\u5b9e\u73b0\uff0c\u5219\u8be5\u6d3e\u751f\u7c7b\u5c31\u4e0d\u518d\u662f\u62bd\u8c61\u7c7b\u4e86\uff0c\u5b83\u662f\u4e00\u4e2a\u53ef\u4ee5\u5efa\u7acb\u5bf9\u8c61\u7684\u5177\u4f53\u7c7b\u4e86\u3002</p> <ol> <li> <p> <pre><code>#include &lt;iostream&gt;\n#include &lt;string.h&gt;\nusing namespace std;\nclass A\n{\npublic:\n    A() { cout &lt;&lt; \"A( )\" &lt;&lt; endl; }\n    ~A() { cout &lt;&lt; \"~A()\" &lt;&lt; endl; }\n};\nclass B : public A\n{\npublic:\n    B() { cout &lt;&lt; \"B( )\" &lt;&lt; endl; }\n    ~B() { cout &lt;&lt; \"~B()\" &lt;&lt; endl; }\n};\nint main()\n{\n    A *ap = new B[2];\n    delete []ap;\n}\n</code></pre> \u8f93\u51fa\uff1a<code>A( ) B( ) A( ) B( ) ~A() ~A()</code> (\u4e0d\u60f3\u6362\u884c\u4e86\uff09\u7531\u4e8e\u6ca1\u6709\u865a\u51fd\u6570\uff0c\u6240\u4ee5\u4e0d\u4f1a\u6790\u6784 B</p> </li> <li> <p></p> </li> </ol>"},{"location":"Courses/OOP.html#warning","title":"Warning","text":"<ul> <li>\u4e24\u4e2a\u6d6e\u70b9\u6570\u4e4b\u95f4\u7684\u76f8\u7b49\u6027\u6d4b\u8bd5\u662f\u4e0d\u53ef\u9760\u7684\uff0c\u5e94\u5199\u4e3a<code>abs(x-y)&lt;1E-14</code>double (<code>1E-7</code>float)</li> <li>\u8d4b\u503c\u8fd0\u7b97\u662f\u53f3\u7ed3\u5408\u7684\uff0c\u5176\u4ed6\u4e8c\u5143\u8fd0\u7b97\u5747\u4e3a\u5de6\u7ed3\u5408</li> <li>\u5f53\u4e00\u4e2a\u6574\u6570\u88ab\u8f6c\u6362\u6210\u4e00\u4e2a\u5b57\u7b26\u65f6\uff0c\u53ea\u6709\u4f4e8\u4f4d\u80fd\u88ab\u4f7f\u7528</li> <li>\u53ea\u6709\u58f0\u660e\u53ef\u4ee5\u653e\u5728.h \u6587\u4ef6\u91cc\u9762</li> </ul>"},{"location":"Courses/PIS.html","title":"\u4fe1\u606f\u5b89\u5168\u539f\u7406","text":"<p> \u7ea6 4827 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 16 \u5206\u949f</p>"},{"location":"Courses/PIS.html#_2","title":"\u5bc6\u7801\u5b66","text":"<p>\u7edd\u5927\u90e8\u5206\u7684\u6cc4\u5bc6\u90fd\u662f\u4ece\u5185\u90e8\u53d1\u751f\u7684</p> <p>\u5bc6\u7801\u5b66\u7684\u53f2\u524d\u65f6\u4ee3: * \u51ef\u6492\u5bc6\u7801\uff1a\u5bf9\u5b57\u6bcd\u8fdb\u884c\u79fb\u4f4d</p> <p>\u5bc6\u7801\u5b66\u7684\u6f14\u8fdb\uff1a 1. <code>Kerckhoff</code>\u89c4\u5219\u7684\u63d0\u51fa 2. \u8ba1\u7b97\u673a\u7684\u4ea7\u751f 3. \u516c\u94a5\u7b97\u6cd5\u7684\u63d0\u51fa</p> <p>Kerckhoff\u89c4\u5219: \u4e00\u4e2a\u7cfb\u7edf\u7684\u5b89\u5168\u6027\u4e0d\u662f\u5efa\u7acb\u5728\u7b97\u6cd5\u4fdd\u5bc6\u4e0a\uff0c\u800c\u662f\u5efa\u7acb\u5728\u79d8\u94a5\u4e0a</p> <p>\u589e\u5f3a\u5b89\u5168\u6027\uff1a\u51e1\u662f\u96be\u4ee5\u6539\u53d8\u800c\u4e14\u957f\u65f6\u95f4\u4f7f\u7528\u7684\u4e1c\u897f\u90fd\u4f1a\u88ab\u5bf9\u624b\u77e5\u9053 \u7b97\u6cd5\u672c\u8eab\u4e0d\u5177\u6709\u4fdd\u5bc6\u6027\uff0c\u5b89\u5168\u4f9d\u8d56\u4e8e\u79d8\u94a5\u7684\u4fdd\u5bc6</p> <p>\u8ba1\u7b97\u673a\u5b89\u5168\u7279\u70b9\uff1a 1. \u7efc\u5408\u6027\uff1a\u7cfb\u7edf\u5b89\u5168\u603b\u662f\u57fa\u4e8e\u6574\u4e2a\u4f53\u7cfb\u4e2d\u6700\u8584\u5f31\u7684\u70b9 2. \u8fc7\u7a0b\u6027\uff1a\u662f\u4e00\u4e2a\u87ba\u65cb\u524d\u8fdb\u7684\u8fc7\u7a0b 3. \u52a8\u6001\u6027\uff1a\u7cfb\u7edf\u5b89\u5168\u662f\u4e00\u4e2a\u8fc7\u7a0b\uff0c\u4f1a\u4e0d\u65ad\u53d8\u5316 4. \u5c42\u7ea7\u6027\uff1a\u591a\u5c42\u7ea7\u7684\u5b89\u5168\u53bb\u89e3\u51b3\u98ce\u9669 5. \u76f8\u5bf9\u6027\uff1a\u6ca1\u6709\u7edd\u5bf9\u7684\u5b89\u5168</p> <p>\u8ba1\u7b97\u673a\u5b89\u5168\u56db\u4e2a\u8981\u7d20\uff1a</p> <ol> <li>\u4fdd\u5bc6\u6027(Confidentiality)\uff1a\u5176\u4ed6\u4eba\u80fd\u591f\u770b\u5230\u4f60\u7684\u6570\u636e\u5417</li> <li>\u5b8c\u6574\u6027(Integrity)\uff1a\u4f60\u7684\u6570\u636e\u4f1a\u88ab\u975e\u6cd5\u7be1\u6539\u5417</li> <li>\u53ef\u7528\u6027(Availability)\uff1a\u6211\u7684\u8d44\u6e90\u662f\u5426\u53ef\u4ee5\u8bbf\u95ee(\u6bd4\u5982\u94f6\u884c\u5361\u91cc\u9762\u7684\u94b1\u662f\u5426\u80fd\u53d6\u51fa\u6765)</li> <li>\u771f\u5b9e\u6027(Authenticity)\uff1a\u5bf9\u4e8eidentity\u7684\u8ba4\u8bc1</li> </ol> <p>\u8ba1\u7b97\u673a\u5b89\u5168\u7684\u6982\u5ff5\uff1a 1. \u8d44\u4ea7(asserts)\uff1a 2. \u6f0f\u6d1e(Vulnerabilities)\uff1a\u7cfb\u7edf\u7684\u8584\u5f31\u5904 3. \u5a01\u80c1(Threats)\uff1a\u662f\u5426\u6709\u53ef\u80fd\u9020\u6210\u635f\u5bb3\u7684\u6f5c\u8d28 4. \u653b\u51fb(Attacks)\uff1ahuman/another system\u5229\u7528\u6f0f\u6d1e\u8fdb\u884c\u653b\u51fb 5. \u63a7\u5236\u3001\u5bf9\u6297\u63aa\u65bd(Control)\uff1a\u5bf9\u4e8e\u6f0f\u6d1e\u7684\u4fee\u590d\u6216\u79fb\u9664\u7684\u65b9\u5f0f</p> <p>\u5b89\u5168\u653b\u51fb\u7684\u7c7b\u578b\uff1a 1. \u4e2d\u65ad(Interruption)\uff1a\u653b\u51fb\u5b89\u5168\u8981\u7d20\u4e2d\u7684Availablity(eg.DOS / remove program or file) 2. \u622a\u53d6(Interception)(\u56db\u8005\u4e2d\u552f\u4e00\u4e00\u4e2a\u88ab\u52a8\u653b\u51fb\u7684\u7c7b\u578b\uff0c\u5f88\u96be\u88ab\u68c0\u6d4b\u5230\uff0c\u9632\u8303\u6bd4\u68c0\u6d4b\u66f4\u91cd\u8981)\uff1a\u653b\u51fb\u5b89\u5168\u8981\u7d20\u4e2d\u7684Interceptior\u4fdd\u5bc6\u6027 3. \u4fee\u6539(Modification)\uff1a\u653b\u51fb\u5b89\u5168\u8981\u7d20\u4e2d\u7684Integrity\uff0c\u6bd4\u5982\u6570\u5b57\u6c34\u5370\u65b9\u5f0f 4. \u4f2a\u9020(Fabrication)\uff1a\u653b\u51fb\u5b89\u5168\u8981\u7d20\u7684Authenticity\uff0c\u6bd4\u5982\u6570\u5b57\u7b7e\u540d\u7b49\u65b9\u5f0f\u63d0\u9ad8\u4e0d\u53ef\u62b5\u8d56\u6027</p> <p>\u5176\u4f59\u4e09\u8005\u6bd4\u8f83\u5bb9\u6613\u88ab\u68c0\u6d4b\u5230\uff0c\u6bd4\u8f83\u96be\u9632\u8303\uff0c\u80fd\u591f\u5728damage\u540eresume</p> <p>\u5bc6\u7801\u7684\u51e0\u4e2a\u57fa\u7840\u90e8\u5206\uff1a\u660e\u6587\u3001\u5bc6\u6587\u3001\u52a0\u5bc6\u7b97\u6cd5\u3001\u89e3\u5bc6\u7b97\u6cd5 * plaintext\uff1aP * ciphertext\uff1aC * encryption method\uff1aE() * decryption method\uff1aD() * key\uff1aK * C = E<sub>k</sub>(P) * P = D<sub>K</sub>(C)</p> <p>\u7ecf\u5178\u7684\u5bc6\u7801\u4f53\u7cfb\uff1a * \u51ef\u6492\u5bc6\u7801\uff0cQueen Mary\u5bc6\u7801\uff0cVigenere Square(\u5bf9\u6297\u9891\u5ea6\u5206\u6790\u7684\u65b9\u6cd5\uff0c\u800c\u4e14\u53ef\u4ee5\u81ea\u884c\u51b3\u5b9a\u79d8\u94a5\u800c\u4e0d\u662f\u4fdd\u5bc6\u7b97\u6cd5\uff0c\u7b26\u5408Kerckhoff\u89c4\u5219)\uff0c Book Cipher(\u7535\u5f71\u4e2d\u7ecf\u5e38\u51fa\u73b0\u7684\u6865\u6bb5) * \u89e3\u7801\u65b9\u5f0f:\u9891\u7387\u5206\u6790(\u4ece\u9ad8\u5230\u4f4e\u4e3aE\u3001T\u3001A\u3001O\u7b49)\u3001Kasiski Test * Enigma\u4f53\u7cfb(\u901a\u8fc7\u9f7f\u8f6e\u548c\u8fde\u7ebf\u548c\u4ea4\u6362\u6784\u5efa\u51fa\u5e9e\u5927\u7684\u5bc6\u7801)(\u89e3\u5bc6\u65b9\u6cd5\uff1a\u901a\u8fc7\u8bc1\u660e\u4ea4\u6362\u6309\u94ae\u662f\u6ca1\u7528\u7684\uff0c\u5bc6\u7801\u51fa\u73b0\u5e8f\u5217\u662f\u6709\u89c4\u5f8b\u7684\uff0c\u4e4b\u540e\u53ef\u4ee5\u4f9d\u9760\u66b4\u529b\u7834\u89e3)</p> <p>\u5bf9\u79f0\u79d8\u5bc6\u5b66:   + Fundamentals   + Fiestel structure:\u4f7f\u7528\u5757\u52a0\u5bc6\u7684\u65b9\u5f0f\uff1b\u8bbe\u8ba1\u96ea\u5d29\u6548\u5e94\uff1a     + \u6269\u6563(Diffusion):\u4f7f\u5f97\u5bc6\u6587\u7684\u7edf\u8ba1\u7279\u6027\u4e0e\u660e\u6587\u4e4b\u95f4\u7684\u5173\u7cfb\u5c3d\u91cf\u590d\u6742     + \u6270\u4e71(Confusion):\u4f7f\u5f97\u5bc6\u6587\u7684\u7edf\u8ba1\u7279\u6027\u4e0e\u52a0\u5bc6\u79d8\u94a5\u4e4b\u95f4\u7684\u5173\u7cfb\u5c3d\u91cf\u590d\u6742</p> <ul> <li> <p>Fundamentals and Structure of DES / 3DES / AES</p> <ul> <li>DES:\u4f7f\u752856-bit\u7684\u79d8\u94a5\u52a0\u5bc6(\u4f46\u662f\u5728\u73b0\u4ee3\u7684\u7b97\u529b\u4e0b\u52a0\u5bc6\u5f3a\u5ea6\u4e0d\u591f)\uff0c\u57fa\u4e8eFiestel\u7ed3\u6784\uff0c\u6bcf\u4e2a\u52a0\u5bc6\u5757\u4e3a64-bit\u7684\u3002\u6709\u5f88\u5f3a\u7684\u96ea\u5d29\u6548\u5e94\uff0c\u6709\u5f88\u5f3a\u7684\u6297\u89e3\u5bc6\u6027\uff0c\u53ea\u80fd\u66b4\u529b\u7834\u89e3</li> <li>3DES: C = E<sub>k3</sub>[D<sub>k2</sub>[E<sub>k1</sub>[P]]] \u8fd9\u6837\u7684\u52a0\u5bc6\u65b9\u5f0f\u4f7f\u5f97\u53ef\u4ee5\u517c\u5bb9\u4f20\u7edf\u7684DES\u7b97\u6cd5</li> <li>AES(Advanced Encryption Standard):\u52a0\u5bc6\u5757\u4e3a128-bit\uff0ckey size\u4e3a128/192/256-bit\u7b49\uff0c\u514d\u75ab\u6240\u6709\u5df2\u77e5\u653b\u51fb\uff0c\u5728\u591a\u5e73\u53f0\u6267\u884c\u5feb\u901f\uff0c\u4ee3\u7801\u7d27\u51d1\uff0c\u8bbe\u8ba1\u7b80\u5355</li> </ul> </li> <li> <p>EBC:\u5c06P<sub>1</sub>\u4e3a1-to-1\u53d8\u6210C<sub>1</sub>,\u4f46\u662f\u4f1a\u88ab\u91cd\u653e\u653b\u51fb(\u901a\u8fc7C<sub>k</sub>\u731c\u51faP<sub>k</sub>)</p> </li> <li>CBC:\u5c06\u524d\u4e00\u4e2a\u52a0\u5bc6\u7684\u5757\u540c\u65f6\u5f71\u54cd\u540e\u7eed\u7684\u52a0\u5bc6\uff0c\u9020\u6210\u96ea\u5d29\u6548\u5e94</li> </ul> <p>\u975e\u5bf9\u79f0\u5bc6\u7801\u5b66:   + Fundamentals   + Difference between Symmetric and Asymmetric Key Cryptography?     + \u516c\u5f00\u79d8\u94a5\u52a0\u5bc6\u7b97\u6cd5\u4f9d\u8d56\u4e8e\u6570\u5b66\u51fd\u6570\u800c\u4e0d\u4f9d\u8d56\u4e8e\u66ff\u4ee3\u548c\u7f6e\u6362     + \u516c\u5f00\u79d8\u94a5\u52a0\u5bc6\u7b97\u6cd5\u662f\u975e\u5bf9\u79f0\u7684\uff0c\u4f7f\u7528\u4e24\u4e2a\u72ec\u7acb\u7684\u79d8\u94a5     + \u516c\u94a5\u5bc6\u7801\u4f7f\u5f97\u53d1\u9001\u7aef\u548c\u63a5\u6536\u7aef\u5728\u4e0d\u5171\u4eab\u4efb\u4f55\u79d8\u5bc6\u6d88\u606f\u7684\u524d\u63d0\u4e0b\u5373\u53ef\u4ea4\u6362\u5927\u91cf\u79d8\u5bc6\u6d88\u606f(\u5b9e\u73b0\u4fdd\u5bc6\u901a\u4fe1)\u6210\u4e3a\u53ef\u80fd   + Functions\uff0cencryption, signature, key exchange   + The One-Way functions     + DH Algorithm: \u8ba1\u7b97\u5927\u6574\u6570\u7684\u6574\u6570\u6b21\u5e42\u6bd4\u8f83\u5bb9\u6613\uff0c\u4f46\u662f\u8ba1\u7b97\u79bb\u6563\u5bf9\u6570\u5f88\u56f0\u96be       DH\u7b97\u6cd5\uff1a       + A\u751f\u6210\u81ea\u5df1\u7684\u79d8\u94a5X<sub>a</sub>\uff0cB\u751f\u6210\u81ea\u5df1\u7684\u79d8\u94a5X<sub>b</sub>\uff0c\u539f\u6839g=2\u6216\u80053\u6216\u80055(\u8f83\u5c0f\u7684\u6570)\uff0c\u518d\u7ea6\u5b9a\u4e00\u4e2a\u7d20\u6570p       + A\u8ba1\u7b97\u51faKeyA = g<sup>X<sub>a</sub></sup>%p\uff0cB\u8ba1\u7b97\u51faKeyB = g<sup>X<sub>b</sub></sup>%p\uff0c\u5c06\u8ba1\u7b97\u51fa\u7684\u7ed3\u679c\u5206\u522b\u53d1\u7ed9\u5bf9\u65b9       + B\u5c06\u62ff\u5230\u7684A\u7684\u4f20\u8fc7\u6765\u7684\u6570\u5b57KeyA\uff0c\u518d\u8fdb\u884c(KeyA)<sup>X<sub>b</sub></sup>%p\uff0c\u540c\u65f6A\u5c06\u62ff\u5230\u7684B\u7684\u4f20\u8fc7\u6765\u7684\u6570\u5b57KeyB\uff0c\u518d\u8fdb\u884c(KeyB)<sup>X<sub>a</sub></sup>%p\uff0c\u8fd9\u8ba1\u7b97\u51fa\u7684\u4e24\u4e2a\u6570\u5b57\u662f\u76f8\u540c\u7684\uff0c\u7531\u6b64\u4ea4\u6362\u5f97\u4ee5\u786e\u5b9a\u4e86\u79d8\u94a5     + RSA Algorithm\uff1a\u5927\u7d20\u6570\u76f8\u4e58\u5f88\u5bb9\u6613\uff0c\u4f46\u5927\u5408\u6570\u8d28\u56e0\u5b50\u5206\u89e3\u5f88\u56f0\u96be\uff0c\u8ba1\u7b97\u65b9\u5f0f\u7565</p> <p>\u5bf9\u6bd4\u5bf9\u79f0/\u975e\u5bf9\u79f0\u5bc6\u7801\u5b66\u4e0e\u5e94\u7528\u6a21\u578b\uff1a * \u5bf9\u79f0\u5bc6\u7801\u5b66\uff1a   + \u4f18\u70b9\uff1acheap\uff0cfast</p> <pre><code>\u7528\u5ec9\u4ef7\u7684\u96c6\u6210\u7535\u8def\u82af\u7247\u5373\u53ef\u5b8c\u6210\u5927\u91cf\u7684\u52a0\u5bc6\u548c\u89e3\u5bc6\n</code></pre> <ul> <li> <p>\u7f3a\u70b9\uff1a\u79d8\u94a5\u5206\u53d1\u662f\u975e\u5e38\u56f0\u96be\u7684</p> </li> <li> <p>\u516c\u94a5\u5bc6\u7801\u5b66\uff1a</p> </li> <li>\u4f18\u70b9\uff1a\u79d8\u94a5\u7684\u5206\u53d1\u4e0d\u518d\u662f\u4e00\u4e2a\u95ee\u9898</li> <li> <p>\u7f3a\u70b9\uff1a\u76f8\u5bf9\u6bd4\u8f83\u6602\u8d35\u548c\u7f13\u6162\uff1b\u52a0\u5bc6\u548c\u89e3\u5bc6\u7684\u786c\u4ef6IC\u7247\u5341\u5206\u6602\u8d35</p> </li> <li> <p>\u5e94\u7528\uff1a</p> </li> <li>\u4f7f\u7528\u516c\u94a5\u52a0\u5bc6(\u5982RSA)\u5206\u53d1\u79d8\u94a5</li> <li>\u4f7f\u7528\u5bf9\u79f0\u79d8\u94a5(\u5982DES)\u53bb\u52a0\u5bc6\u548c\u89e3\u5bc6 </li> </ul> <p>\u6570\u5b57\u7b7e\u540d\uff1a * \u5bf9\u6570\u5b57\u7b7e\u540d\u7684\u8981\u6c42   + \u201c\u7ed1\u5b9a\u201d\u5230\u7b7e\u540d\u7684\u6587\u4ef6   + \u6536\u4ef6\u4eba\u53ef\u4ee5\u9a8c\u8bc1\u7b7e\u540d\uff0c\u5e76\u4e14\u4efb\u4f55\u5176\u4ed6\u4eba\u4e0d\u80fd\u4f2a\u9020\u7b7e\u540d   + \u7b7e\u540d\u4eba\u4e0d\u80fd\u62b5\u8d56\u81ea\u5df1\u7684\u7b7e\u540d   + \u7b7e\u540d\u5fc5\u987b\u80fd\u591f\u88ab\u7b2c\u4e09\u65b9\u9a8c\u8bc1\u4ee5\u4fbf\u89e3\u51b3\u4e89\u8bae   + \u80fd\u591f\u9a8c\u8bc1\u7b7e\u540d\u65e5\u671f\u548c\u65f6\u95f4\u7684\u7b7e\u540d\uff0c\u6d88\u606f\u5185\u5bb9\u7684\u7b7e\u540d\u65f6\u523b\uff08\u4e0d\u53ef\u91cd\u590d\u4f7f\u7528\uff0c\u4e0d\u53ef\u4f2a\u9020\uff0c\u4e0d\u53ef\u66f4\u6539\uff0c\u65f6\u95f4\u7ed1\u5b9a\uff09</p> <ul> <li> <p>\u4e3a\u4ec0\u4e48\u6570\u5b57\u7b7e\u540d\u9700\u8981\u4f7f\u7528\u5355\u5411hash\u51fd\u6570\uff1a\u5f53\u6587\u6863\u6bd4\u8f83\u957f\u7684\u65f6\u5019\uff0c\u4e0d\u80fd\u5bf9\u6574\u4efd\u6587\u6863\u7b7e\u540d(\u5373\u76f4\u63a5\u5bf9\u6574\u4efd\u6587\u6863\u8fdb\u884cRSA\uff0c\u6210\u672c\u592a\u9ad8)\uff0c\u4f46\u662f\u4f9d\u7136\u8981\u6c42\u4e00\u65e6\u6587\u6863\u51fa\u73b0\u53d8\u5316\uff0c\u7b7e\u540d\u5c31\u8981\u5931\u6548\u3002\u6240\u4ee5\u89e3\u51b3\u529e\u6cd5\u662f\u6211\u4eec\u5bf9\u6587\u6863\u7528\u5355\u5411hash\u51fd\u6570\u7f29\u5c0f\u4f53\u79ef\uff0c\u4e4b\u540e\u5bf9hash\u503c\u8fdb\u884c\u7b7e\u540d\u4ee5\u5b8c\u6210\u6570\u5b57\u7b7e\u540d\u7684\u8981\u6c42</p> </li> <li> <p>\u5355\u5411hash\u51fd\u6570\u7684\u6982\u5ff5\uff1a</p> </li> </ul> <p>\u8981\u6c42\uff1a\u5c06\u4e00\u4efd\u8f93\u5165\u7684\u6587\u6863\u53d8\u6210\u4e00\u4e2a\u5927\u6982100-bit\u5de6\u53f3\u7684hash\u503c\u8f93\u51fa   \u8981\u6c42\u4ee5\u4e0b\u6027\u8d28\uff1a</p> <ul> <li>\u5bb9\u6613\u8ba1\u7b97</li> <li>\u4e0d\u5bb9\u6613\u88ab\u53cd\u5411\u8ba1\u7b97</li> <li> <p>\u4e0d\u5bb9\u6613\u627e\u5230\u78b0\u649e(collision)</p> </li> <li> <p>\u5e38\u7528\u7684\u5355\u5411hash\u51fd\u6570:MD5/SHA-1/SHA-2...</p> </li> </ul> <p>\u6d88\u606f\u8ba4\u8bc1\u7801\u6982\u5ff5(Message Authentication Code, MAC) MAC\u4e3b\u8981\u662f\u63d0\u4f9b\u6570\u636e\u5b8c\u6574\u6027\u9a8c\u8bc1\u670d\u52a1\uff0c\u8fd8\u662f\u901a\u8fc7\u4f20\u7edf\u7684\u5bf9\u79f0\u79d8\u94a5\u7684\u65b9\u6cd5\u8fdb\u884c\u4fe1\u606f\u4f20\u9012\uff0c\u56e0\u4e3a\u516c\u94a5\u7b97\u6cd5\u8fd8\u662f\u592a\u6162\uff0c\u5728\u5e95\u5c42\u5b9e\u73b0\u4e0d\u5408\u9002\u3002</p> <p>\u6bd4\u8f83MAC\u548c\u6570\u5b57\u7b7e\u540d: * MAC\u7684\u53d1\u9001\u8005\u548c\u63a5\u53d7\u8005\u5fc5\u987bshare\u79d8\u94a5   + MAC\u53ea\u80fd\u901a\u8fc7\u4e13\u95e8\u7684\u63a5\u6536\u5668\u8fdb\u884c\u9a8c\u8bc1   + MAC\u4e0d\u63d0\u4f9b\u201c\u4e0d\u53ef\u62b5\u8d56\u201d\uff0c\u6240\u6709\u53ef\u4ee5\u9a8c\u8bc1\u6d88\u606f\u673a\u5bc6\u6027\u7684\u4eba\u4e5f\u53ef\u4ee5\u751f\u6210\u4e00\u4e2aMAC   + \u901f\u5ea6\u8f83\u5feb * \u6570\u5b57\u7b7e\u540d\u4e0d\u9700\u8981\u4ea4\u6362\u4efb\u4f55\u79d8\u5bc6\u6d88\u606f   + \u6570\u5b57\u7b7e\u540d\u80fd\u591f\u88ab\u6240\u6709(\u6709\u53d1\u9001\u8005\u7684\u516c\u94a5)\u4eba\u9a8c\u8bc1   + \u6570\u5b57\u7b7e\u540d\u4e0d\u53ef\u62b5\u8d56   + \u901f\u5ea6\u8f83\u6162</p>"},{"location":"Courses/PIS.html#authenticationauthorization","title":"\u8ba4\u8bc1(Authentication)\u548c\u6388\u6743(Authorization)","text":"<ul> <li>Authentication\u5b9e\u73b0\uff1a</li> <li>\u4f60\u62e5\u6709\u7684\u4e1c\u897f:Card, key, smart card</li> <li>\u4f60\u77e5\u9053\u7684\u4e1c\u897f:password etc.</li> <li>\u4f60\u6240\u5728\u7684\u5730\u65b9:IP address</li> <li>\u4e2a\u4eba\u7684\u7279\u8d28:<ul> <li>\u751f\u7269\u7279\u8d28\uff1a\u6307\u7eb9\u3001\u8679\u819c\u3001DNA</li> <li>\u4e2a\u4eba\u4e60\u60ef\uff1a\u7b14\u8ff9\u3001\u58f0\u97f3\u3001\u8d70\u8def\u59ff\u52bf</li> </ul> </li> <li>\u50a8\u5b58\uff0c\u9009\u62e9\u548c\u4fdd\u62a4\u5bc6\u7801:</li> <li>\u5b57\u5178\u653b\u51fb\u7684\u6982\u5ff5\u548c\u52a0\u76d0     \u53f2\u524d\u7684\u5bc6\u7801\u76f4\u63a5\u4fdd\u5b58\u660e\u6587     \u65e9\u671f\u7684\u5bc6\u7801\u4fdd\u5b58\u5bc6\u7801\u7684hash\u503c(\u4f46\u662f\u4eba\u4eec\u4f7f\u7528\u7684\u5bc6\u7801\u591a\u662f\u6709\u610f\u4e49\u7684\u5355\u8bcd\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fdb\u884c\u5b57\u5178\u653b\u51fb) \u5b57\u5178\u653b\u51fb\uff1a\u8ba1\u7b97\u5b57\u5178\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5355\u8bcd\u7684hash\u503c\uff0c\u4e0e\u7528\u6237\u7684hash\u503c\u8fdb\u884c\u5339\u914d\uff0c\u5b57\u5178\u5927\u5c0f\u6bd4\u8f83\u6709\u9650\uff0c\u6240\u4ee5\u653b\u51fb\u5f88\u5bb9\u6613\u594f\u6548 \u52a0\u76d0\uff1a\u5728\u7528\u6237\u7684\u5bc6\u7801\u524d\u52a0\u4e0a\u51e0\u4e2a\u65e0\u610f\u4e49\u7684\u968f\u673a\u5b57\u7b26(\u52a0\u76d0)\uff0c\u518d\u5bf9\u52a0\u5b8c\u76d0\u7684\u201c\u65b0\u201d\u5bc6\u7801\u8fdb\u884chash\uff0c\u4f7f\u5f97\u4e00\u6837\u7684\u5bc6\u7801\u5374\u6709\u4e0d\u4e00\u6837\u7684hash\u503c(\u663e\u8457\u63d0\u9ad8\u5b57\u5178\u653b\u51fb\u96be\u5ea6\uff0c\u4f46\u5b57\u5178\u653b\u51fb\u4f9d\u7136\u662f\u53ef\u80fd\u7684)</li> <li>\u5982\u4f55\u53bb\u9009\u62e9\u548c\u4fdd\u62a4\u5bc6\u7801<ol> <li>\u5b57\u7b26+\u6570\u5b57\u6216\u968f\u673a\u5bc6\u7801</li> <li>\u5bc6\u7801\u5b89\u5168\u8bc4\u4f30\u4e0e\u68c0\u67e5</li> <li>Trojan(\u6728\u9a6c)\u9632\u62a4,\u4f7f\u7528\u5b89\u5168\u7684\u767b\u5f55\u5de5\u5177</li> <li>\u4e0d\u540c\u7f51\u7ad9\u4f7f\u7528\u4e0d\u540c\u5bc6\u7801</li> <li>\u4e0d\u76f8\u4fe1\u4efb\u4f55\u7b2c\u4e09\u65b9\u8f6f\u4ef6</li> <li>\u4e0d\u8981\u5728\u4e0d\u4fe1\u4efb\u7684\u5730\u65b9\u767b\u5f55\u91cd\u8981\u7684\u670d\u52a1</li> </ol> </li> </ul>"},{"location":"Courses/PIS.html#_3","title":"\u5b89\u5168\u8bbf\u95ee\u63a7\u5236\u548c\u6388\u6743\u7684\u6982\u5ff5","text":"<ul> <li>\u8bbf\u95ee\u63a7\u5236\u7684\u4e09\u4e2a\u5143\u7d20   1. \u4e3b\u4f53\uff1a\u53ef\u4ee5\u8bbf\u95ee\u5bf9\u8c61\u7684\u5b9e\u4f53\uff0c\u4f8b\u5982\u7528\u6237\u6216\u5e94\u7528\u7a0b\u5e8f\u8fdb\u7a0b\u7b49   2. \u5ba2\u4f53\uff1a\u6b63\u5728\u8bbf\u95ee\u7684\u5bf9\u8c61\uff0c\u5982\u6587\u4ef6\uff0c\u7a0b\u5e8f\uff0c\u6570\u636e\u7b49   3. \u6743\u9650\uff1a\u4e3b\u4f53\u53ef\u4ee5\u4f7f\u7528\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u4f8b\u5982\u8bfb\u53d6\uff0c\u5199\u5165\uff0c\u5220\u9664\uff0c\u6267\u884c\uff0c\u518d\u8bb8\u53ef\u7b49</li> <li>DAC\uff0cMAC\u548cRBAC\u7684\u6982\u5ff5\u548c\u89c4\u5219</li> <li>\u81ea\u4e3b\u8bbf\u95ee\u63a7\u5236(Discretionary Access Control, DAC):(\u4f8b\u5982\uff1aUnix OS)<ul> <li>\u7279\u6027:\u4e3b\u4f53\u53ef\u4ee5\u81ea\u52a8\u5c06\u5176\u8bbf\u95ee\u6743\u9650\u7684\u5b50\u96c6\u6388\u4e88\u5176\u4ed6\u4e3b\u4f53\u3002</li> <li>\u7f3a\u70b9\uff1a\u8bbf\u95ee\u6743\u9650\u4f1a\u968f\u7740\u4fe1\u606f\u6d41\u6539\u53d8\uff0c\u5bfc\u81f4\u8bbf\u95ee\u63a7\u5236\u5728\u67d0\u4e9b\u65f6\u5019\u4e0d\u591f\u4e25\u683c\uff1b\u5b50\u4e3b\u4f53\u7684\u6388\u6743\u6709\u65f6\u4e0d\u662f\u6211\u4eec\u6240\u5e0c\u671b\u7684</li> <li>\u8bbf\u95ee\u63a7\u5236\u77e9\u9635</li> <li>\u8bbf\u95ee\u63a7\u5236\u5217\u8868\uff1a\u6bcf\u4e00\u4e2a\u4e3b\u4f53\u589e\u52a0\u4e00\u4e2a\u5217\u8868\uff0c\u91cc\u9762\u6307\u51fa\u4ed6\u80fd\u8bbf\u95ee\u7684\u5ba2\u4f53</li> <li>Capability List: \u6bcf\u4e00\u4e2a\u5ba2\u4f53\u589e\u52a0\u4e00\u4e2a\u5217\u8868\uff0c\u6307\u51fa\u80fd\u8bbf\u95ee\u5b83\u7684\u4e3b\u4f53</li> </ul> </li> <li>\u5f3a\u5236\u8bbf\u95ee\u63a7\u5236(Mandatory Access Control, MAC):\u901a\u8fc7\u7ed9\u6587\u4ef6\u4ee5\u5bc6\u7ea7\u6765\u8fdb\u884c\u8bbf\u95ee\u63a7\u5236<ul> <li>Bell-Lapadula\u8d1d\u5c14\u62c9\u5e15\u591a\u62c9\u89c4\u5219(in MAC):\u4fdd\u8bc1\u4e86\u673a\u5bc6\u6027</li> <li>\u4e0d\u5411\u4e0a\u8bfb(\u4f4e\u6743\u9650\u7684\u4e0d\u53ef\u8bfb\u9ad8\u5bc6\u7ea7\u7684\u6587\u4ef6)</li> <li>\u4e0d\u5411\u4e0b\u5199(\u9ad8\u6743\u9650\u7684\u4e0d\u53ef\u5199\u4f4e\u5bc6\u7ea7\u7684\u6587\u4ef6):\u9632\u6b62\u9ad8\u5bc6\u7ea7\u7684\u53ef\u4ee5\u901a\u8fc7\u6b64\u65b9\u6cd5\u5411\u4e0b\u6cc4\u9732\u9ad8\u5bc6\u7ea7\u7684\u6587\u4ef6</li> <li>\u9690\u901a\u9053(Convert Channel)\uff1a\u5229\u7528\u7cfb\u7edf\u8d44\u6e90\u8fdb\u884c\u901a\u4fe1\u7684\u901a\u9053   \u901a\u8fc7\u4e00\u4e9b\u7cfb\u7edf\u8d44\u6e90\u7684\u53d8\u5316\u4ee5\u83b7\u53d6\u4e00\u4e9b\u9ad8\u5bc6\u7ea7\u7684\u6587\u6863\u5230\u5e95\u5728\u505a\u4ec0\u4e48   \u8bc6\u522b\u540e\u5bf9\u7b56\uff1a</li> <li>\u5173\u95ed\u9690\u901a\u9053\u6216\u8005\u4f7f\u4ed6slow down</li> <li>\u4fa6\u6d4b\u90a3\u4e9b\u5c1d\u8bd5\u4f7f\u7528\u9690\u901a\u9053\u7684user</li> <li>\u5bb9\u5fcd\u5b83\u7684\u5b58\u5728</li> <li>\u9690\u901a\u9053\u65e0\u6cd5\u5b8c\u5168\u6d88\u9664,\u5904\u7406\u9690\u901a\u9053\u7684\u65b9\u6cd5\uff1a</li> <li>\u9650\u5236\u5171\u4eab\u8d44\u6e90(\u5982\u78c1\u76d8\u3001CPU\uff0c\u5185\u5b58\u7b49\u7b49)\uff0cshare\u53ea\u6709\u5728\u540c\u4e00\u4e2a\u5bc6\u7ea7\u7684\u60c5\u51b5\u4e0b\u4ea7\u751f</li> <li>\u9650\u5236\u5e26\u5bbd(\u5982\u589e\u52a0\u566a\u97f3\u7b49)</li> </ul> </li> <li> <p>\u57fa\u4e8e\u89d2\u8272\u7684\u8bbf\u95ee\u63a7\u5236(Role-Based Access Control,RBAC)</p> <ul> <li>Role:\u6bcf\u4e00\u4e2arole\u90fd\u662f\u7531\u4e00\u7ec4\u7528\u6237\u7ec4\u6210\uff0c\u4ed6\u4eec\u90fd\u4e0e\u76f8\u5173\u64cd\u4f5c\u76f8\u5173\uff0c\u7528\u6237\u53ea\u8981\u5c5e\u4e8e\u8fd9\u4e2arole\u5c31\u6709\u6743\u6267\u884c\u8fd9\u4e9b\u64cd\u4f5c</li> </ul> <p>\u53ef\u4ee5\u5f88\u597d\u5730\u8fdb\u884c\u6388\u6743\u7ba1\u7406\uff0c\u4e5f\u80fd\u5f88\u597d\u5730\u5efa\u7acb\u8d77\u5c42\u7ea7\u5173\u7cfb\uff0c\u800c\u4e14\u5bb9\u6613\u83b7\u5f97\u6700\u5c0f\u6743\u9650\uff0c\u9632\u6b62\u9ad8\u7b49\u7ea7\u7684\u4eba\u6743\u9650\u8fc7\u5927\u5bfc\u81f4\u4e00\u4e9b\u610f\u5916\u4ea7\u751f\uff0c\u540c\u65f6RBAC\u80fd\u591f\u5b9e\u73b0DAC\u548cMAC * \u5b89\u5168\u8bbf\u95ee\u63a7\u5236\u7684\u6838\u5fc3\u539f\u5219   + \u6700\u5c0f\u7684\u7279\u6743(\u5982\u628asuper-user\u5206\u4e3asystem Administrator\uff0cSecurity Administrator\u548cAudit Administrator\u4e09\u4e2a)\uff0c\u5206\u6743   + \u6388\u6743\u7ba1\u7406\u6a21\u5f0f MAC:\u5bc6\u7ea7\u7ba1\u7406 DAC:\u5f88\u591a\u79cd RBAC:\u5f88\u591a\u79cd</p> </li> </ul>"},{"location":"Courses/PIS.html#_4","title":"\u7f51\u7edc\u5b89\u5168","text":"<ul> <li>\u5e38\u89c4\u653b\u51fb</li> <li> <p>\u55c5\u63a2(Sniff)     \u5f88\u591a\u5728\u7f51\u4e0a\u4f20\u8f93\u5230\u4e1c\u897f\u90fd\u6ca1\u6709\u52a0\u5bc6\uff0c\u6df7\u5408\u6a21\u5f0f\u7f51\u7edc\u63a5\u53e3\u5361\u80fd\u8bfb\u53d6\u6240\u6709\u4fe1\u606f(\u5de5\u5177\u6bd4\u5982Wireshark,Tcpdump / libpcap\u7b49)</p> </li> <li> <p>ARP\u6b3a\u9a97(ARP Spoofing)     OS\u91c7\u7528ARP\u7f13\u5b58\u5b9e\u73b0ARP\uff0c\u4f46ARP\u7f13\u5b58\u7684\u66f4\u65b0\u7b56\u7565\u4e0d\u540c\u3002\u4e00\u4e9bOS\uff08Solaris\u7b49\uff09\u53ea\u63a5\u53d7\u7b2c\u4e00\u4e2a\u54cd\u5e94\u5305\u3002     \u6240\u4ee5\uff0c\u4f2a\u9020\u4e00\u4e2aICMP\u6570\u636e\u5305\uff0c\u8ba9\u53d7\u5bb3\u8005\u673a\u5668\u542f\u52a8\u4e00\u4e2aARP\u8bf7\u6c42\u3002\u5728\u7d27\u8981\u5173\u5934\uff0c\u5411\u53d7\u5bb3\u8005\u673a\u5668\u53d1\u9001\u4f2a\u9020\u7684ARP\u54cd\u5e94\u5305\uff0cARP\u7f13\u5b58\u5c06\u88ab\u6bd2\u6b7b\u3002</p> </li> <li> <p>IP\u6b3a\u9a97(IP Spoofing)     \u539f\u59cb\u65b9\u6cd5\uff1a\u4f2a\u9020\u53d7\u5bb3\u8005ip\u5728\u5e7f\u64ad\u7aef\u53e3\u53d1\u9001ping\uff0c\u5bfc\u81f4\u540c\u4e00\u4e2a\u7f51\u6bb5\u5185\u6240\u6709\u4e3b\u673a\u540c\u65f6\u56de\u5305\u5bfc\u81f4\u53d7\u5bb3\u8005\u76f4\u63a5crash</p> </li> <li> <p>TCP SYN Flooding(important!)</p> <ul> <li>\u6982\u5ff5,\u5982\u4f55\u653b\u51fb,\u5982\u4f55\u6210\u529f?   \u56e0\u4e3aTCP\u5efa\u7acb\u8fde\u63a5\u9700\u89813\u6b21\u63e1\u624b\uff0c\u5206\u522b\u4e3a\u5ba2\u6237\u7aef\u53d1\u7ed9\u670d\u52a1\u5668\u7684SYN<sub>c</sub>\uff0c\u670d\u52a1\u5668\u53d1\u7ed9\u5ba2\u6237\u7aef\u7684SYN<sub>s</sub>\u548cACK<sub>c</sub>\uff0c\u4e0e\u6700\u540e\u5ba2\u6237\u7aef\u53d1\u7ed9\u670d\u52a1\u5668\u7684ACK<sub>s</sub>   \u5982\u679c\u5ba2\u6237\u7aef\u4e0d\u65ad\u7528\u4e0d\u540cIP\u5411\u670d\u52a1\u5668\u53d1\u9001SYN<sub>c</sub>\u800c\u4e0d\u8fdb\u884c\u540e\u7eed\u8fc7\u7a0b\u4e0d\u56de\u590dACK\uff0c\u56e0\u4e3a\u670d\u52a1\u5668\u6bcf\u6b21\u9700\u8981\u989d\u5916\u5f00\u4e00\u4e2a\u7ebf\u7a0b\u5904\u7406\uff0c\u80fd\u591f\u5f88\u5feb\u8ba9\u8fdb\u7a0b\u7684\u5806\u6808(2M/\u7ebf\u7a0b)\u6ea2\u51fa(\u603b\u517132\u4f4d\u673a\u5668\u53ef\u4f7f\u7528\u7684\u5c312G\u5de6\u53f3\u7684\u5806\u6808)   \u653b\u51fb\u8005\u901a\u8fc7\u4f2a\u9020ip\u53d1\u9001\u5927\u91cf\u8bf7\u6c42\uff0c\u6bcf\u4e00\u6b21\u8bf7\u6c42\u90fd\u80fd\u591f\u83b7\u5f97\u4e00\u90e8\u5206\u670d\u52a1\u5668\u8d44\u6e90\uff0c\u6700\u540e\u4f7f\u5f97\u670d\u52a1\u5668\u8d44\u6e90\u8017\u5c3d\uff0c\u65e0\u6cd5\u518d\u8fdb\u884c\u8fde\u63a5   \u8fd9\u662f\u6700\u7ecf\u5178\u7684DOS\u653b\u51fb\uff0c\u8fdb\u653b\u8005\u65e0\u9700\u592a\u591a\u8d44\u6e90\uff0c\u800c\u63a5\u6536\u7684\u670d\u52a1\u5668\u5374\u4e3a\u6bcf\u4e00\u4e2a\u8bf7\u6c42\u9700\u8981\u5f00\u989d\u5916\u7684\u7ebf\u7a0b(\u5229\u7528\u4e24\u7aef\u4e0d\u5bf9\u7b49\u8fdb\u884c\u7684\u653b\u51fb)   DOS\u653b\u51fb\u662f\u653b\u51fb\u8005\u4f2a\u9020\u9020\u6210\u7684\uff0c\u662f\u53ef\u4ee5\u88ab\u89e3\u51b3\u7684,\u4f46\u662fDDOS\u653b\u51fb\u662f\u96be\u4ee5\u88ab\u89e3\u51b3\u7684\uff08\u5982\u94f6\u884c\u6324\u5151\u7b49\uff09\u8bb8\u591a\u771f\u5b9e\u7684\u8bf7\u6c42\u5bfc\u81f4\u8d44\u6e90\u7684\u8017\u7aed</li> <li>\u5982\u4f55\u907f\u514d   \u7b2c\u4e00\u79cd\u65b9\u6cd5\uff1a\u5982\u679c\u4e00\u65e6SYN\u961f\u5217\u6ee1\u4e86\uff0c\u968f\u673a\u5220\u6389\u4e00\u4e2a\uff0c\u5982\u679c\u5220\u6389\u6b63\u5e38\u7684\u8bf7\u6c42\uff0c\u90a3\u4e2a\u7528\u6237\u5f88\u5feb\u5c31\u4f1a\u518d\u6b21connect\uff0c\u800c\u4e14\u6b63\u5e38\u60c5\u51b5\u4e0b\u5220\u6389\u4e0d\u6b63\u5e38\u8bf7\u6c42\u7684\u6982\u7387\u8981\u8fdc\u5927\u4e8e\u5220\u9664\u6b63\u5e38\u7684\u8bf7\u6c42;\u800c\u4e14\u6574\u4e2a\u4ee3\u7801\u5b9e\u73b0\u5341\u5206\u5bb9\u6613   \u7b2c\u4e8c\u79cd\u65b9\u6cd5:\u4f7f\u7528SYN Cookie\u7684\u65b9\u5f0f\uff0c\u5c1d\u8bd5\u89e3\u51b3\u653b\u51fb\u8005\u4e0e\u88ab\u5bb3\u8005\u8d44\u6e90\u8bf7\u6c42\u4e0d\u5747\u7b49\u7684\u60c5\u51b5\u3002\u4fdd\u8bc1\u670d\u52a1\u5668\u4e0d\u4f1a\u50a8\u5b58\u72b6\u6001\u9664\u975e\u6536\u5230\u7b2c\u4e8c\u6b21\u542b\u670d\u52a1\u5668\u786e\u8ba4cookie\u7684\u8bf7\u6c42(\u8fd9\u4e2a\u8bf7\u6c42\u662f\u4e0d\u53ef\u4f2a\u9020\u7684\uff0c\u56e0\u4e3a\u670d\u52a1\u5668\u53d1\u8fd8\u7ed9\u7684cookie\u5305\u542b\u4e86\u7aef\u53e3\uff0c\u65f6\u95f4\u7b49\u5404\u79cd\u4fe1\u606f\u7684hash\u503c)\u3002</li> <li>\u670d\u52a1\u5668\u5c06\u5c06\u5957\u63a5\u5b57\u4fe1\u606f\uff08\u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u7684IP\u548c\u7aef\u53e3\uff09\u5b58\u50a8\u5728Cookie\u4e2d\uff0c\u5e76\u5c06Cookie\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef(\u5229\u7528\u5355\u5411hash\u51fd\u6570\u8fdb\u884c\u8ba1\u7b97\uff0c\u800c\u4e14\u8981\u5feb\u901f\u8ba1\u7b97\uff0c\u5426\u5219\u4e00\u6837\u4f1a\u5bfc\u81f4\u8ba1\u7b97\u8d44\u6e90\u7684\u8017\u7aed)</li> <li>\u5ba2\u6237\u7aef\u5fc5\u987b\u5c06Cookie\u8fde\u540c\u7b2c\u4e8c\u4e2a\u8bf7\u6c42\u4e00\u8d77\u53d1\u9001\uff0c\u670d\u52a1\u5668\u5c06\u91cd\u65b0\u8ba1\u7b97Cookie\u5e76\u4e0e\u5ba2\u6237\u7aef\u53d1\u9001\u7684Cookie\u8fdb\u884c\u6bd4\u8f83\u3002</li> </ul> </li> <li> <p>TCP SYN prediction \u9884\u6d4b\u653b\u51fb</p> <p>TCP\u534f\u8bae\u4e2d\u7684\u6bcf\u4e2a\u5305\u90fd\u6709\u5e8f\u5217\u53f7SYN\uff0c\u63a5\u6536\u65b9\u5c06\u6392\u5e8f\u4e0e\u6839\u636eSYN\u91cd\u7ec4\u6570\u636e\u5305\uff0c\u4e00\u65e6\u653b\u51fb\u8005\u53ef\u4ee5\u9884\u6d4bSYN\uff0c\u4ed6\u53ef\u4ee5\u53d1\u9001\u201c\u4f2a\u9020\u201d\u7684\u6570\u636e\u5305\u7ed9\u63a5\u53d7\u8005\u5e76\u5c06\u5305\u91cd\u65b0\u7ec4\u7ec7\u4f7f\u5f97\u5176\u6ee1\u8db3\u653b\u51fb\u8005\u7684\u76ee\u7684\u3002 TCP SYN\u9884\u6d4b\u653b\u51fb\u662f\u8bb8\u591a\u5176\u4ed6\u653b\u51fb\u7684\u6765\u6e90\uff0c\u5305\u62ec</p> <ul> <li>TCP\u6b3a\u9a97</li> <li>TCP\u8fde\u63a5\u52ab\u6301</li> <li>TCP\u91cd\u7f6e</li> </ul> <p>\u5bf9\u6297\u65b9\u5f0f\u5f88\u7b80\u5355\uff0c\u4f7f\u5f97SYN\u968f\u673a\u751f\u6210\u5c31\u53ef\u4ee5\u4e86</p> </li> <li> <p>TCP\u62e5\u5835\u63a7\u5236(TCP Congestion Control)</p> <ul> <li>\u4e00\u65e6\u4e22\u5305\uff0cTCP\u8981\u6c42\u964d\u901f\u5230\u4e4b\u524d\u7684\u4e00\u534a\uff0c\u67e5\u770b\u662f\u5426\u8fd8\u4f1a\u4e22\u5305\uff0c\u5982\u679c\u8fd8\u4f1a\u4e22\uff0c\u5c31\u518d\u964d\u901f\u76f4\u81f30</li> <li>\u5982\u679c\u4e0d\u518d\u4e22\u5305\uff0c\u5c31\u5c06\u901f\u5ea6\u7f13\u6162\u63d0\u5347\u4e0a\u53bb</li> <li>\u4f46\u662f\uff0c\u5982\u679c\u5728\u6574\u4e2a\u4f53\u7cfb\u4e2d\uff0c\u6709\u4eba\u4e0d\u9075\u5b88\u6574\u4e2a\u534f\u8bae\uff0c\u5f53\u4e00\u7aef\u964d\u901f\u4e4b\u540e\u53e6\u4e00\u7aef\u53cd\u800c\u63d0\u9ad8\u901f\u5ea6\uff0c\u4f1a\u4f7f\u5f97\u4e00\u7aef\u901f\u5ea6\u76f4\u63a5\u4e3a0\uff0c\u800c\u53e6\u4e00\u7aef\u83b7\u5f97\u5f88\u9ad8\u7684\u901f\u5ea6</li> <li>\u89e3\u51b3\u65b9\u6cd5:\u6dfb\u52a0ACK nonces\uff0c\u5728ACK\u8fd4\u56denonce\u4ee5\u8bc1\u660e\u5b83\u4e0d\u662f\u6b3a\u9a97\u3002</li> </ul> </li> <li> <p>DNS Spoofing</p> <ul> <li>\u4fee\u6539DNS\u670d\u52a1\u5668\u6216\u672c\u5730DNS\u670d\u52a1(\u7ecf\u5e38\u4fee\u6539DNS\u7f13\u5b58\u6570\u636e\u5e93\uff0c\u4f7f\u5176\u6210\u4e3aDNS\u7f13\u5b58\u4e2d\u6bd2\u653b\u51fb)\uff0c\u91cd\u5b9a\u5411\u6240\u9700\u9875\u9762\u5230\u9519\u8befIP\uff0c\u8fd9\u4f7f\u5f97\u6d41\u91cf\u88ab\u53d1\u9001\u5230\u53e6\u4e00\u4e2a\u670d\u52a1\u5668(\u901a\u5e38\u662f\u653b\u51fb\u8005\u81ea\u5df1\u7684\u673a\u5668)</li> <li>DNS\u7684\u54cd\u5e94\u4e0e\u8bf7\u6c42\u662f\u6ca1\u6709\u8ba4\u8bc1\u7684\uff0cDNSSEC(Domain Name System Security Extensions)\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898</li> </ul> </li> <li>Concepts of IPSEC</li> <li>\u9a8c\u8bc1\u5934Authentication Headers(AH)\uff1a\u63d0\u4f9bIP\u5305\u7684\u6570\u636e\u5b8c\u6574\u6027\u548c\u8ba4\u8bc1\u670d\u52a1</li> <li>\u8f7d\u8377\u5b89\u5168\u6027\u5c01\u88c5Encapsulating Security Payloads(ESP)\uff1a\u63d0\u4f9b\u5b89\u5168\u3001\u4fdd\u5bc6\u548c\u8ba4\u8bc1\u670d\u52a1\uff08\u53ef\u9009\uff09</li> <li>\u5b89\u5168\u76f8\u5173Security Associations(SA)\uff1aIPSec\u4f7f\u7528\u5b89\u5168\u5173\u8054\uff08SA\uff09\u6765\u96c6\u6210\u5b89\u5168\u670d\u52a1</li> <li> <p>Model of Operation\u4e24\u79cd\u6a21\u5f0f\uff1a</p> <ul> <li>Transport Model \u4f20\u8f93\u6a21\u5f0fIPSec\u53ea\u4fdd\u62a4IP\u5206\u7ec4\u5185\u5bb9\uff0c\u800c\u4e0d\u4fdd\u62a4IP\u5934 \u7531\u4e8eIP\u5934\u6ca1\u6709\u88ab\u4fee\u6539\uff0c\u8def\u7531\u8fc7\u7a0b\u4e0d\u4f1a\u53d7\u5230\u5f71\u54cd\u3002\u4f20\u8f93\u5c42\u548c\u5e94\u7528\u5c42\u7684\u6570\u636e\u90fd\u53d7\u5230\u4fdd\u62a4\u3002 \u5178\u578b\u5730\u7528\u4e8ePtoP\u901a\u4fe1</li> <li>Tunnel Model \u96a7\u9053\u6a21\u5f0fIPSec\u5c06\u5bf9\u6574\u4e2aIP\u5206\u7ec4\u8fdb\u884c\u52a0\u5bc6\u6216\u8ba4\u8bc1\u3002\u539f\u59cbIP\u5206\u7ec4\u5c06\u88ab\u9690\u85cf\u5230\u65b0\u7684IP\u5206\u7ec4\u4e2d\uff0c\u5e76\u4e14\u5c06\u9644\u52a0\u65b0\u7684IP\u5934\u3002 \u5178\u578b\u5730\u7528\u4e8e\u4fdd\u62a4VPN\u5728\u7f51\u7edc\u548c\u7f51\u7edc\u4e4b\u95f4\u3001\u4e3b\u673a\u7684\u8c03\u5236\u89e3\u8c03\u5668\u901a\u4fe1\u548cPtoP\u901a\u4fe1\u3002</li> </ul> </li> <li> <p>Concepts of TLS/SSL</p> </li> <li>SSL connection and SSL session<ul> <li>SSL Connection SSL\u8fde\u63a5\uff0c\u4e00\u4e2a\u7aef\u5230\u53e6\u4e00\u4e2a\u7aef\u7684\u8fde\u63a5\uff0c\u8fd9\u4e2a\u8fde\u63a5\u662f\u4e34\u65f6\u7684</li> <li>SSL Session SSL\u4f1a\u8bdd\uff0c\u4e00\u4e2a\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u5668\u7684\u5efa\u7acb\uff0c\u5728\u5efa\u7acb\u7684\u65f6\u5019\u8fdb\u884c\u534f\u5546\uff0c\u4e4b\u540e\u5c31\u4e0d\u9700\u8981\u534f\u5546\u79d8\u94a5</li> </ul> </li> <li>SSL/TLS protocol<ul> <li>\u5728\u4f20\u8f93\u5c42\u548c\u5e94\u7528\u5c42\u4e2d\u95f4\u7684\u4e00\u4e2a\u534f\u8bae\uff0c\u672c\u8eab\u5c06\u8fd9\u91cc\u518d\u5206\u6210\u4e24\u5c42:</li> <li>\u63e1\u624b\u5c42:\u76f8\u4e92\u8ba4\u8bc1(\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u5668\u90fd\u8981\u8ba4\u8bc1)\u56db\u6b21\u63e1\u624b\u7684\u8fc7\u7a0b   \u8fd9\u5176\u4e2d\uff0c\u544a\u77e5\u670d\u52a1\u5668\u5ba2\u6237\u7aef\u7684\u64cd\u4f5c\u7cfb\u7edf\u3001\u5206\u8fa8\u7387\u7b49\u5404\u79cd\u4fe1\u606f\uff08\u5ba2\u6237\u7aef\u7cfb\u7edf\u652f\u6301\u7684\u5185\u5bb9\uff09\u7136\u540e\u670d\u52a1\u5668\u7ed9\u5ba2\u6237\u7aef\u9002\u5408\u7684\u754c\u9762</li> <li>\u6570\u636e\u5c42\uff1a\u6570\u636e\u5206\u5757\uff0c\u534f\u5546\u79d8\u94a5\uff0c\u52a0\u5bc6\u548c\u589e\u52a0SSL\u5934(\u7528\u63e1\u624b\u4fdd\u8bc1\u4fe1\u606f\u7684\u52a0\u5bc6\u4e0e\u5b8c\u6574\u6027\u6821\u9a8c)</li> </ul> </li> </ul>"},{"location":"Courses/PIS.html#malicious-code","title":"\u6076\u610f\u4ee3\u7801Malicious Code","text":"<ul> <li>Concepts and difference of virus, worm and Trojan horse.</li> <li>\u6728\u9a6c\uff1a\u6709\u663e\u6027\u76ee\u7684\uff0c\u540c\u65f6\u5177\u6709\u9690\u6027\u76ee\u7684\uff08\u6076\u610f\uff09\u7684\u7a0b\u5e8f\uff0c\u901a\u8fc7\u5185\u90e8\u8fdb\u884c\u653b\u51fb(\u53ef\u4ee5\u6709\u590d\u5236\u80fd\u529b\uff0c\u4f46\u662f\u6838\u5fc3\u7279\u5f81\u662f\u9690\u8eab\u6027)</li> <li>\u75c5\u6bd2\uff1a\u4e00\u5b9a\u8981\u9644\u7740\u5728\u53e6\u4e00\u4e2a\u8f6f\u4ef6\u4e0a\u7684\u7a0b\u5e8f\uff0c\u5f53\u6267\u884c\u8f6f\u4ef6\u7684\u65f6\u5019\u540c\u65f6\u6267\u884c\u75c5\u6bd2\u3002\u53ef\u4ee5\u901a\u8fc7\u8df3\u8f6c\u7b49\u65b9\u5f0f\u5c06\u6076\u610f\u4ee3\u7801\u85cf\u5728\u6267\u884c\u6587\u4ef6\u5185\u4ee5\u8eb2\u8fc7\u6740\u6bd2\u8f6f\u4ef6\u7684\u75c5\u6bd2\u5e93\u5339\u914d<ul> <li>\u75c5\u6bd2\u4e5f\u53ef\u4ee5\u52a0\u5bc6\uff0c\u901a\u8fc7\u4e00\u6bb5\u89e3\u5bc6\u4ee3\u7801\u653e\u5728\u52a0\u5bc6\u4ee3\u7801\u524d\u9762\uff0c\u4ee5\u8eb2\u8fc7\u4fa6\u6d4b(\u4fa6\u6d4b\u8be5\u75c5\u6bd2\u65b9\u6cd5\uff1a\u4fa6\u6d4b\u89e3\u5bc6\u6bb5(\u6b63\u5e38\u7a0b\u5e8f\u4e0d\u4f1a\u52a0\u5bc6\u81ea\u5df1))</li> <li>\u901a\u8fc7\u6539\u53d8\u52a0\u5bc6\u65b9\u5f0f\u6216\u8005\u591a\u6b21\u52a0\u5bc6\u7684\u65b9\u5f0f\u53ef\u4ee5\u8ba9\u75c5\u6bd2\u53d1\u751f\"\u53d8\u5f02\"</li> <li>\u75c5\u6bd2\u8fd8\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0\u65e0\u7528\u4ee3\u7801\u7684\u65b9\u5f0f\u6765\u7ed5\u8fc7\u6740\u6bd2\u8f6f\u4ef6\u7684\u68c0\u67e5</li> </ul> </li> <li>Defenses of Malicious Code</li> <li>Distinguish between data, instructions(\u533a\u5206\u6570\u636e\u4e0e\u6307\u4ee4\uff0c\u4f7f\u5f97\u6076\u610f\u4ee3\u7801\u65e0\u6cd5\u9690\u85cf\uff0c\u800c\u4e14\u4e0d\u4f1a\u51fa\u73b0\u4ee3\u7801\u5728\u8fd0\u884c\u65f6\u53d8\u5316)</li> <li>Limit objects accessible to processes(\u63a7\u5236\u4fe1\u606f\u6d41\uff0c\u5982\u5728\u6d4f\u89c8\u5668\uff0c\u865a\u62df\u673a\u7b49\u4e2d\u8fd0\u884c)</li> <li>Inhibit sharing(\u63a7\u5236\u5206\u4eab)</li> <li>Detect altering of files(\u68c0\u6d4b\u6587\u4ef6\u53d8\u66f4)</li> <li>Detect actions beyond specifications(\u68c0\u6d4b\u8d85\u51fa\u89c4\u8303\u7684\u884c\u4e3a):\u591a\u7248\u672c\u7f16\u7a0b\u4e3a\u4e86\u7a33\u5b9a\u60273\u673a\u8ba1\u7b97\u6295\u7968\u8fdb\u884c\u51b3\u5b9a\u8ba1\u7b97\u7ed3\u679c\u4ee5\u9632\u6b62\u5355\u673a\u5931\u8d25\uff08\u5728\u822a\u7a7a\u822a\u5929\u9886\u57df\uff09;\u540c\u65f6\u4e5f\u901a\u8fc7assert\u7b49\u65b9\u5f0f\u53ca\u65f6\u9a8c\u8bc1\u6b63\u786e\u6027</li> <li>Analyze statistical characteristics(\u5206\u6790\u7edf\u8ba1\u7279\u5f81)</li> <li>How botnets formed, how does it used for attack? Concepts of DDOS attack.</li> <li>\u65e9\u671f\uff1a\u901a\u8fc7\u804a\u5929\u5ba4\u7684\u65b9\u5f0f\u63a7\u5236\u7684\u50f5\u5c38\u7f51\u7edc</li> <li>\u73b0\u5728\uff1a\u5c42\u7ea7\u5316\u7ba1\u7406\uff08\u5c42\u7ea7\u5316\u804a\u5929\u5ba4\uff09\u7684\u65b9\u5f0f\u8fdb\u884c\u50f5\u5c38\u7f51\u7edc\u4e00\u8d77\u5b8c\u6210\uff08\u4ee5\u9632\u804a\u5929\u5ba4\u88ab\u53d1\u73b0\uff09</li> <li>\u672a\u6765\uff1a\u5411\u7740\u65e0\u4e2d\u5fc3\u5316\u7684\u65b9\u5411\u53d1\u5c55</li> <li>\u8fdb\u884cDDOS\u653b\u51fb\u4e0d\u518d\u9700\u8981\u4f2a\u88c5ip</li> </ul>"},{"location":"other/IELTs.html","title":"IELTS","text":"<p> \u7ea6 2137 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 7 \u5206\u949f</p>"},{"location":"other/IELTs.html#speaking","title":"Speaking","text":""},{"location":"other/IELTs.html#part-1","title":"Part 1","text":"<p>1. Paying bills     What kind of bills do you have to pay?     How do you usually pay your bills? Why?     Is there anything you could do to make your bills cheaper?</p>"},{"location":"other/IELTs.html#part-2","title":"Part 2","text":"<p>1. Describe a successful business person you know     you should say who's the person is     how you knew him/her     what business he or she does     and explain why he or she is success</p> <p>Ah, let's talk about a classic example: Steve Jobs. He's a well-known figure, the co-founder of Apple Inc. I never met him personally, but his story is quite famous. Jobs started Apple in a garage with his friend Steve Wozniak. Their big breakthrough was the Apple II, one of the first highly successful mass-produced personal computers.Jobs was known for his perfectionism, innovative mindset, and ability to foresee market trends. He wasn't just about technology; he cared deeply about design and user experience. This unique blend made Apple products not just gadgets but lifestyle statements.Despite facing setbacks \u2013 like being ousted from Apple in the 1980s \u2013 he returned in the 1990s, leading the company to create groundbreaking products like the iPod, iPhone, and iPad. He was successful because he wasn't afraid to take risks and he always pushed for what he believed in, even when others doubted him. Remember, \"The people who are crazy enough to think they can change the world are the ones who do.\" That's a quote from Jobs himself.</p> <p>2. Describe some food or drink that you learned to prepare     what food or drink you learned to prepare     when and where you learned     how you learned     and explain how you felt about learning to prepare</p> <p>Learning to prepare a steak is an experience that I will always remember fondly. It all started twoyears ago when I decided to fry my hand at cooking a steak in my apartment kitchen. Havingalways enjoyed eating steaks, I was eager to learn how to prepare one myself. To get started, I scoured the internet for helpful tips and tricks on cooking the perfect steak. I came across some popular celebrity chef videos, including Gordon Ramsay's tutorial on how tocook a steak. Watching his videos helped me get the hang of the cooking process and learn someessential techniques. So, I headed to the local market and picked up a nice ribeye steak. Following Ramsay's advice, Iseasoned it generously with salt and pepper, rubbing it in to really bring out the flavor. Next, I preheated a cast-iron skillet on high heat and added a pat of butter and a drizzle of oliveoil. Once the skillet was nice and hot, I carefully placed the steak on it, and the sizzling soundwas music to my ears. I let it cook for 3 to 4 minutes on each side, using tongs to turn it over and basting it with the melted butter to make it extra juicy and delicious. Once the steak was done, I took it off the skillet and let it rest on a cutting board for a few minutesto let the juices redistribute and make it even more tender. Then, I sliced it against the grain intothin slices and served it up with some tasty vegetables, including crisp-tender asparagus andmushrooms. Overall, learning to prepare a steak was an exhilarating experience. I was proud of myself forgetting on to the ropes and mastering this new skill, and I enjoyed the satisfaction of creating adelicious meal that I could share with others.</p>"},{"location":"other/IELTs.html#part-3","title":"Part 3","text":"<p>1. Young people and cooking</p>"},{"location":"other/IELTs.html#writing","title":"Writing","text":""},{"location":"other/IELTs.html#task-1","title":"Task 1","text":"<p>1. Percentage of population in living cities</p> <p>This line graph illustrates the proportion of urban citizens in Philippines, Malaysia, Thailand and Indonesia between 1970 and 2020, with the expected population in 2030 and 2040.</p> <p>Overall, it can be easily seen from the graph that all four countries has a dramatic rise in population, starting at the lowest point in 1970 and being projected to reach the peak in 2040.</p> <p>Malaysia starts at 30%, about twice as much as Indonesia. After that, both showed an obvious increase, with the former rising to approximately 76% in 2020, and the latter rising to approximately 50%. Both sides are expected to continue rising thereafter, with Malaysia slowly rising to about 83%, while Indonesia is expected to see a 12% gain.</p> <p>The starting point of Philippines is about 31%, which is about 13% higher than Thailand. Over the next decade, the Philippines remained relatively stable. Between 1980 and 1990, the Philippines rose to about 48%, but fell to about 42% over the next 20 years. During this period, Thailand showed a gradual increase from 18% to approximately 30%. After 2010, both countries are expected to show an upward trend, rising to 55% and 49% respectively.</p> <p>2. Number of US household in millions by their annual income</p> <p>This bar chart illustrates the numbers of US household in millions by their annual income in 2007, 2011 and 2015 respectively.</p> <p>Overall, it can be easily seen that households of $100000 or more climbs apparently and is the most, while other remain nearly steady, with \\(25000-\\)49999 the second, followed by less than $25000 and the \\(50000-\\)74999, and the \\(75000-\\)99999 the last.</p> <p>From the graph, less than $25000 and \\(25000-\\)49999 first rise in 2011 and sightly fall in 2015, from 25 to 29 to 28 and 27 to 30 to 29 respectively. While \\(75000-\\)99999 and $100000 or more are the other way around, beginning at 14.5 and 29.5, decreasing to 14 and 27 and ending with 15 and 33. The middle bar, namely \\(50000-\\)74999 remains level in the three years, roughly 21.</p> <p>In 2011, the bars of \\(25000-\\)49999 and less than $25000 exceed $100000 or more at a marginal edge. But the $100000 or more has witnessed a dramatic increase in 2015, approximately from the lowest point 27 to 33.</p>"},{"location":"other/IELTs.html#task-2","title":"Task 2","text":"<p>1. The most important aim of science should be to improve people's lives. To what extent do you agree or disagree with this statement?</p> <p>The proposition that the most important aim of science should be to improve people's lives is a significant one, meriting thoughtful consideration. This essay will argue that, while the improvement of human lives is a crucial goal of science, it should not be viewed as its sole purpose.</p> <p>Firstly, the advancement of human welfare through scientific discovery has undeniably been monumental. Medical science, for instance, has dramatically enhanced the quality and longevity of life. The development of vaccines, antibiotics, and advanced surgical techniques has transformed healthcare, drastically reducing mortality rates and improving the management of chronic diseases. Moreover, technological innovations, a product of scientific research, have reshaped daily life, offering unparalleled convenience and efficiency. The advent of the internet, smartphones, and smart home technology are prime examples of how science has made everyday tasks more accessible and interconnected.</p> <p>However, the pursuit of science for the sheer expansion of knowledge should also be recognized as an essential aim. Many scientific endeavors, such as space exploration or the study of fundamental physics, may not have immediate practical applications but are crucial for our understanding of the universe. The pursuit of such knowledge can lead to unforeseen benefits. For example, the exploration of space has led to the development of satellite communication, GPS technology, and numerous other applications that have had a considerable impact on daily life.</p> <p>Furthermore, it's important to consider the ethical and societal implications of focusing solely on science that improves human life. Such a focus might lead to the neglect of crucial environmental or ecological research, which may not have direct benefits for humans in the short term but are essential for the sustainability of life on Earth. Additionally, this approach might bias funding and attention towards projects with immediate commercial benefits, potentially at the expense of basic science research.</p> <p>In conclusion, while improving human lives is a vital goal of scientific endeavor, it should not be the only aim. The pursuit of knowledge for its own sake and the exploration of questions beyond immediate human concerns are equally important. This broader perspective ensures a balanced approach to science, where the pursuit of understanding and the betterment of humanity go hand in hand.</p> <p>2.Some university students want to learn about other subjects in addition to their main subjects. Others believe it is more important to give all their time and attention to studying for a qualification.</p> <p>3. In many countries, people are now living longer than ever before. Some people say an ageing population creates problems for governments. Other people think there are benefits if society has more elderly people. To what extent do the advantages of having an ageing population outweigh the disadvantages?</p> <p>In the contemporary era, the phenomenon of an aging population has become increasingly prominent across the globe, thanks to advancements in medical technology and improvements in living standards. While some argue that this trend poses significant challenges to societies and governments, I contend that the benefits of an aging population far outweigh its disadvantages, heralding a more sustainable and wisdom-oriented future.</p> <p>On the one hand, critics of demographic aging often highlight the economic and social strains it imposes. Primarily, the increasing number of elderly individuals elevates the demand for pensions and healthcare services, potentially straining public finances and placing a heavier burden on the younger working-age population. Furthermore, a shrinking workforce could lead to decreased productivity and economic stagnation. These concerns, while valid, overlook the evolving nature of modern economies and the adaptability of social systems.</p> <p>Conversely, the advantages of an aging population are manifold and, in my opinion, eclipse the aforementioned challenges. Firstly, elderly individuals contribute significantly to society through the transfer of knowledge and skills, mentoring younger generations and fostering a culture of wisdom and experience. Their active participation in volunteer work and the informal economy also adds substantial value, often unaccounted for in traditional economic metrics.</p> <p>Moreover, the aging demographic drives innovation and growth in critical sectors. The healthcare and eldercare industries, for example, are prompted to advance in terms of services and technologies, ranging from personalized medicine to smart home systems, thereby creating new employment opportunities and stimulating economic vitality. This not only enhances the quality of life for the elderly but also benefits society as a whole by accelerating technological and medical advancements.</p> <p>Additionally, an aging society encourages a shift towards more sustainable living practices. As populations age, there tends to be a decrease in resource-intensive consumption patterns, aligning more closely with environmental sustainability goals. This demographic shift can thus act as a catalyst for societies to adopt greener lifestyles and policies, contributing to the global effort against climate change.</p> <p>In conclusion, while the aging population presents certain challenges, these are not insurmountable. With strategic planning and policy adjustments, societies can harness the potential benefits of this demographic trend. The wealth of experience and knowledge that older individuals offer, combined with the stimulus they provide for innovation and sustainability, underscores the positive aspects of an aging society. Therefore, it is clear that the advantages of having an aging population significantly outweigh the disadvantages, marking a pivotal step towards a more sustainable and enlightened future.</p> <p>4. In many countries around the world, rural people are moving to cities, so the population in the countryside is decreasing. Do you think this is a positive or a negative development?</p> <p>In numerous nations worldwide, the trend of rural populations migrating to urban areas is prominent, leading to a dwindling number of inhabitants in the countryside. This shift, in my opinion, embodies a double-edged sword, reflecting the complex dynamics of societal evolution.</p> <p>On the one hand, the allure of cities is undeniable. Urban centers, with their advanced infrastructure and abundant employment prospects, magnetize individuals seeking improved livelihoods. The superior quality of urban life, coupled with the automation of agricultural practices reducing rural labor demand, underscores the rationality behind this migration. Such developments signify progress, offering individuals the freedom to pursue a broader spectrum of opportunities.</p> <p>On the other hand, this influx into urban areas introduces several challenges. Skyrocketing housing prices, escalating traffic congestion, rising unemployment rates, and deteriorating living conditions due to pollution are immediate repercussions. Moreover, the urban expansion necessitates converting more land into cityscapes, potentially straining resources. The diminished rural workforce and reduced agricultural lands could hinder food production, highlighting a critical balance between consumption and production that must be maintained.</p> <p>Yet, the phenomenon of urbanization is not a one-way street. The concept of reverse urbanization, where individuals return to rural areas seeking respite from urban chaos, illustrates a natural recalibration process. This cycle suggests that concerns regarding urban overpopulation and rural depopulation may eventually equilibrate.</p> <p>Hence, viewing rural-to-urban migration through a binary lens of positive or negative oversimplifies its implications. This movement is an intrinsic aspect of societal advancement, where the intertwined challenges and benefits will ultimately pave the way for a balanced development.</p>"},{"location":"other/novel.html","title":"\u5c0f\u8bf4","text":"<p> \u7ea6 2 \u4e2a\u5b57 </p>"},{"location":"other/test.html","title":"Test","text":"<p> \u7ea6 107 \u4e2a\u5b57 </p> <p>\u8fd9\u662f note \u7c7b\u578b\u7684\u63d0\u793a\u6846</p> <p>\u63d0\u793a\uff1a\u66f4\u591a\u7cbe\u5f69\u5185\u5bb9\u8bb0\u5f97\u5173\u6ce8\u6211\u554a</p> <p>\u8fd9\u662f success \u7c7b\u578b\u7684\u63d0\u793a\u6846</p> <p>\u6210\u529f\uff01</p> <p>\u8fd9\u662f failure \u7c7b\u578b\u7684\u63d0\u793a\u6846</p> <p>\u5931\u8d25\uff01</p> <p>\u8fd9\u662f bug \u7c7b\u578b\u7684\u63d0\u793a\u6846</p> <p>\u53d1\u73b0\u4e00\u4e2a bug\uff0c\u8bf7\u5c3d\u5feb\u4fee\u590d\uff01</p> \u8fd9\u662f note \u7c7b\u578b\u7684\u63d0\u793a\u6846 <p>\u63d0\u793a\uff1a\u66f4\u591a\u7cbe\u5f69\u5185\u5bb9\u8bb0\u5f97\u5173\u6ce8\u6211\u554a</p> <pre><code>\u7b2c\u4e8c\u884c\n\n\u7b2c\u4e09\u884c\n\n\u7b2c\u56db\u884c\n\n\u7b2c\u4e94\u884c\n...\n</code></pre> <p>\u53c2\u8003\uff1a https://squidfunk.github.io/mkdocs-material/reference/admonitions/#admonition-icons-octicons</p>"},{"location":"skills/Algorithm.html","title":"\u7b97\u6cd5","text":"<p> \u7ea6 405 \u4e2a\u5b57  345 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 6 \u5206\u949f</p>"},{"location":"skills/Algorithm.html#leetcode","title":"Leetcode","text":""},{"location":"skills/Algorithm.html#easy","title":"Easy","text":""},{"location":"skills/Algorithm.html#maximurn-subarray","title":"Maximurn SubArray","text":"<p>\u6700\u5927\u5b57\u4e32 <pre><code>class Solution {\npublic:\n    int maxSubArray(vector&lt;int&gt;&amp; nums) {\n        vector&lt;vector&lt;int&gt;&gt; dp(2, vector&lt;int&gt;(size(nums)));\n        dp[0][0] = dp[1][0] = nums[0];\n        for(int i = 1; i &lt; size(nums); i++) {\n            dp[1][i] = max(nums[i], nums[i] + dp[1][i-1]);\n            dp[0][i] = max(dp[0][i-1], dp[1][i]);\n        }\n        return dp[0].back();//\u8fd4\u56de\u5bf9\u5411\u91cf\u672b\u7aef\u5143\u7d20\u7684\u5f15\u7528\n    }\n};\n</code></pre> We can actually do away with just 1 row as well. We denoted <code>dp[1][i]</code> as the maximum subarray sum ending at <code>i</code>. We can just store that row and calculate the overall maximum subarray sum at the end by choosing the maximum of all max subarray sum ending at <code>i</code>. <pre><code>class Solution {\npublic:\n    int maxSubArray(vector&lt;int&gt;&amp; nums) {\n        vector&lt;int&gt; dp(nums);\n        for(int i = 1; i &lt; size(nums); i++) \n            dp[i] = max(nums[i], nums[i] + dp[i-1]);        \n        return *max_element(begin(dp), end(dp));\n    }\n};\n</code></pre></p>"},{"location":"skills/Algorithm.html#169major-element","title":"169.Major Element","text":"<pre><code>class Solution {\npublic:\n    int majorityElement(vector&lt;int&gt;&amp; nums) {\n        int l=nums.size();\n        int count=1, major=nums[0];\n        for(int i=1;i&lt;l;i++){\n            if(count==0) major=nums[i];//count=0\u8bf4\u660e\u6709\u53e6\u4e00\u4e2a\u6570\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8e\u539f\u6765\u7684\n            if(nums[i]==major)count++;\n            else count--;\n        }\n        return major;\n    }\n};\n</code></pre>"},{"location":"skills/Algorithm.html#two-sum","title":"Two sum","text":"<p>\u66b4\u529b\u7834\u89e3 <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n        int n = nums.size();\n        for (int i = 0; i &lt; n - 1; i++) {\n            for (int j = i + 1; j &lt; n; j++) {\n                if (nums[i] + nums[j] == target) {\n                    return {i, j};\n                }\n            }\n        }\n        return {}; // No solution found\n    }\n};\n</code></pre> \u4e24\u904d\u54c8\u5e0c\u8868 <pre><code>class Solution {\npublic:\n        vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n        unordered_map&lt;int, int&gt; numMap;\n        int n = nums.size();\n\n        // Build the hash table\n        for (int i = 0; i &lt; n; i++) {\n            numMap[nums[i]] = i;\n        }\n\n        // Find the complement\n        for (int i = 0; i &lt; n; i++) {\n            int complement = target - nums[i];\n            if (numMap.count(complement) &amp;&amp; numMap[complement] != i) {\n                return {i, numMap[complement]};\n            }\n        }\n\n        return {}; // No solution found\n    }\n};\n</code></pre> \u5355\u54c8\u5e0c\u8868 <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n        unordered_map&lt;int, int&gt; numMap;\n        int n = nums.size();\n\n        for (int i = 0; i &lt; n; i++) {\n            int complement = target - nums[i];\n            if (numMap.count(complement)) {\n                return {numMap[complement], i};\n            }\n            numMap[nums[i]] = i;\n        }\n\n        return {}; // No solution found\n    }\n};\n</code></pre></p>"},{"location":"skills/Algorithm.html#construct-binary-tree-from-inorder-and-postorder-traversal","title":"Construct Binary Tree from Inorder and Postorder Traversal","text":"<pre><code>class Solution {\npublic:\n    unordered_map&lt;int,int&gt;ump;\n//This map is used to store the indices of elements in the inorder vector for quick lookup.\n\n    TreeNode* build(vector&lt;int&gt;&amp; inorder, vector&lt;int&gt;&amp; postorder,int &amp;rootIdx,int left,int right)\n    {\n        if(left&gt;right)\n        {\n            return NULL;\n        }\n\n        int pivot=ump[postorder[rootIdx]];\n\n        rootIdx--;\n        TreeNode* node=new TreeNode(inorder[pivot]);\n\n        node-&gt;right=build(inorder,postorder,rootIdx,pivot+1,right);\n\n        node-&gt;left=build(inorder,postorder,rootIdx,left,pivot-1);\n\n        return node;\n    }\n    TreeNode* buildTree(vector&lt;int&gt;&amp; inorder, vector&lt;int&gt;&amp; postorder) {\n\n        int rootIdx=postorder.size()-1;\n        for(int i=0;i&lt;inorder.size();i++)\n        {\n            ump[inorder[i]]=i;\n        }\n\n        return build(inorder,postorder, rootIdx, 0, inorder.size()-1);\n\n    }\n};\n</code></pre>"},{"location":"skills/Algorithm.html#binary-tree-zigzag-level-order-traversal","title":"Binary Tree Zigzag Level Order Traversal","text":""},{"location":"skills/Algorithm.html#median-of-two-sorted-arrays","title":"Median of two sorted arrays","text":"<p>\u66b4\u529b\u7834\u89e3 <pre><code>class Solution {\npublic:\ndouble findMedianSortedArrays(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {\n    // Get the sizes of both input arrays.\n    int n = nums1.size();\n    int m = nums2.size();\n\n    // Merge the arrays into a single sorted array.\n    vector&lt;int&gt; merged;\n    for (int i = 0; i &lt; n; i++) {\n        merged.push_back(nums1[i]);\n    }\n    for (int i = 0; i &lt; m; i++) {\n        merged.push_back(nums2[i]);\n    }\n\n    // Sort the merged array.\n    sort(merged.begin(), merged.end());\n\n    // Calculate the total number of elements in the merged array.\n    int total = merged.size();\n\n    if (total % 2 == 1) {\n        // If the total number of elements is odd, return the middle element as the median.\n        return static_cast&lt;double&gt;(merged[total / 2]);\n    } else {\n        // If the total number of elements is even, calculate the average of the two middle elements as the median.\n        int middle1 = merged[total / 2 - 1];\n        int middle2 = merged[total / 2];\n        return (static_cast&lt;double&gt;(middle1) + static_cast&lt;double&gt;(middle2)) / 2.0;\n    }\n}\n};\n</code></pre> **\u4e8c\u5206\u641c\u7d22 ** <pre><code>class Solution {\npublic:\ndouble findMedianSortedArrays(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {\n    int m=nums1.size(),n=nums2.size();\n    int all=m+n;\n    int M= (m+n+1)/2;\n    int low=0,high=m;\n    if(m&gt;n) return findMedianSortedArrays(nums2,nums1);\n    while(low&lt;=high){\n        int m1=(low+high)/2;\n        int m2=M-m1;\n        int l1 = INT_MIN, l2 = INT_MIN, r1 = INT_MAX, r2 = INT_MAX;\n        if(m1&lt;m) r1=nums1[m1];//\n        if(m2&lt;n) r2=nums2[m2];\n        if(m1&gt;=1) l1=nums1[m1-1];//\u5de6\u8fb9\u4e2d\u70b9\u7684\u5de6\u8fb9\u4e00\u4e2a\u6570\n        if(m2&gt;=1) l2=nums2[m2-1];\n        if(l1&lt;=r2 &amp;&amp; l2&lt;=r1){\n            if(all%2==1) return max(l1,l2);//\u627e\u5230\u4e2d\u95f4\u503c\n            else return (max(l1,l2)+min(r1,r2))/2.0;\n        }\n        else if(l1&gt;r2) high=m1-1;//nums1\u5411\u91cf\u4e2d\u70b9\u6570\u592a\u5927\u4e86\uff0c\u8981\u53d8\u5c0f\n        else low=m1+1;\n    }\n\n    return 0;//\u6ca1\u627e\u5230\uff0c\u8f93\u5165\u5411\u91cf\u5185\u90e8\u672a\u6392\u5e8f\n}\n};\n</code></pre></p>"},{"location":"skills/Algorithm.html#longest-palindromic-substring","title":"Longest Palindromic Substring \u6700\u957f\u56de\u6587\u4e32","text":"<pre><code>class Solution {\nprivate: \n    bool isPalindrome(const std::string&amp; str) {\n        int left = 0;\n        int right = str.length() - 1;\n\n        while (left &lt; right) {\n            if (str[left] != str[right]) {\n                return false;\n            }\n            ++left;\n            --right;\n        }\n\n        return true;\n    }\n\npublic:\n    string longestPalindrome(string s) {\n              if (s.length() &lt;= 1) {\n            return s;\n        }\n\n        auto expand_from_center = [&amp;](int left, int right) {\n            while (left &gt;= 0 &amp;&amp; right &lt; s.length() &amp;&amp; s[left] == s[right]) {\n                left--;\n                right++;\n            }\n            return s.substr(left + 1, right - left - 1);\n        };\n\n        std::string max_str = s.substr(0, 1);\n\n        for (int i = 0; i &lt; s.length() - 1; i++) {\n            std::string odd = expand_from_center(i, i);\n            std::string even = expand_from_center(i, i + 1);\n\n            if (odd.length() &gt; max_str.length()) {\n                max_str = odd;\n            }\n            if (even.length() &gt; max_str.length()) {\n                max_str = even;\n            }\n        }\n\n        return max_str;          \n    }\n};\n</code></pre>"},{"location":"skills/Algorithm.html#medium","title":"Medium","text":""},{"location":"skills/Algorithm.html#55jump-game","title":"55.Jump Game","text":"<p>You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position. Return true if you can reach the last index, or false otherwise.</p> <pre><code>class Solution {\npublic:\n    bool canJump(vector&lt;int&gt;&amp; nums) {\n        int next,i;\n        int s=nums.size();\n        if(s==1)return true;\n        for(i=0;i&lt;=next;i++){\n            next=max(next,nums[i]+i);\n            if(next&gt;=s-1) return true;\n        }\n        return false;\n    }\n};\n</code></pre>"},{"location":"skills/Algorithm.html#238product-of-array-except-self","title":"238.Product of Array Except Self","text":"<p>Given an integer array <code>nums</code>, return an array <code>answer</code> such that <code>answer[i]</code> is equal to the product of all the elements of <code>nums</code> except <code>nums[i]</code>.</p> <p>My answer: </p> <ul> <li> <p>\u975e\u96f6\u76f8\u4e58\uff0c\u7ed3\u679c\u9664\u4ee5\u81ea\u5df1\uff1b\u6709\u96f6\u5355\u4e2a\u96f6\u52190\u53d8\u6210\u5176\u4ed6\u6570\u76f8\u4e58\uff1b\u4e24\u4e2a\u96f6\u53ca\u4ee5\u4e0a\u90fd\u662f\u96f6 </p> </li> <li> <p>T\uff1aO(N)</p> </li> </ul> <p>Others\uff1a</p> <pre><code>    public int[] productExceptSelf(int[] nums) {\n        int n = nums.length;\n        int[] res = new int[n];\n        int right=1,left=1;\n        for(int i=0;i&lt;n;i++){\n            res[i]=1;\n        }\n        for (int i=0;i&lt;n;i++) {\n            res[i]*=left;\n            left*=nums[i];\n        }\n        for(int i=n-1;i&gt;=0;i--) {\n            res[i]*=right;\n            right*=nums[i];\n        }\n        return res;\n    }\n</code></pre> <ul> <li>\u5c06\u5f53\u524d\u6570\u7684\u5de6\u8fb9\u548c\u53f3\u8fb9\u5206\u522b\u4e58\u8d77\u6765\u5f97\u5230\u7b54\u6848</li> <li>T\uff1aO(N)</li> </ul>"},{"location":"skills/Algorithm.html#240search-a-2d-matrix-ii","title":"240.Search a 2D Matrix \u2161","text":"<p>Write an efficient algorithm that searches for a value <code>target</code> in an <code>m x n</code> integer matrix <code>matrix</code>. This matrix has the following properties:</p> <ul> <li>Integers in each row are sorted in ascending from left to right.</li> <li>Integers in each column are sorted in ascending from top to bottom.</li> </ul> <p>Method: Search from the top-right element and reduce the search space by one row or column at each time.</p> <pre><code>class Solution {\npublic:\n    bool searchMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix, int target) {\n        int m = matrix.size(), n=matrix[0].size(),\n        int r = 0, c = n - 1;\n        while (r &lt; m &amp;&amp; c &gt;= 0) {\n            if (matrix[r][c] == target) {\n                return true;\n            }\n            matrix[r][c] &gt; target ? c-- : r++;\n        }\n        return false;\n    }\n};\n</code></pre>"},{"location":"skills/Algorithm.html#80remove-duplicates-from-sorted-array2","title":"80.Remove Duplicates From Sorted Array2","text":"<pre><code>class Solution {\npublic:\nint removeDuplicates(vector&lt;int&gt;&amp; nums) {\n    int i = 0;\n    for (int n : nums)\n        if (i &lt; 2 || n &gt; nums[i-2])\n            nums[i++] = n;\n    return i;\n}\n};\n//\u6700\u591a\u51fa\u73b0\u4e24\u4e2a\u91cd\u590d\u7684\u662f2\uff0c \u6700\u591a\u6709k\u4e2a\u91cd\u590d\u7684\u5c31\u628a2\u6539\u6210k\n</code></pre>"},{"location":"skills/Algorithm.html#189rotate-array","title":"189.Rotate Array","text":"<pre><code>class Solution {\npublic:\nvoid rotate(vector&lt;int&gt;&amp; nums, int k) {\n    int l=nums.size();\n    if(k&gt;l) k=k%l;\n    reverse(nums.begin(),nums.end());\n    reverse(nums.begin(),nums.begin()+k);\n    reverse(nums.begin()+k,nums.end());\n}     \n</code></pre>"},{"location":"skills/Algorithm.html#hard","title":"Hard","text":""},{"location":"skills/Algorithm.html#239sliding-window-maximum","title":"239.Sliding window maximum","text":"<p>You are given an array of integers <code>nums</code>, there is a sliding window of size <code>k</code> which is moving from the very left of the array to the very right. You can only see the <code>k</code> numbers in the window. Each time the sliding window moves right by one position.</p> <p>Return the max sliding window.</p> <p>Time complexity\uff1aO(N)</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; maxSlidingWindow(vector&lt;int&gt;&amp; nums, int k) {\n        int n = nums.size();\n        vector&lt;int&gt; windowMax;\n        deque&lt;int&gt; dq;\n        for (int i = 0; i &lt; n; i++) {\n            while (!dq.empty() &amp;&amp; dq.front() &lt; i - k + 1)//dp.front()\u662f\u7b2c\u4e00\u4e2a\u5143\u7d20\n                dq.pop_front();// Removes the first element\n            while (!dq.empty() &amp;&amp; nums[dq.back()] &lt; nums[i])\n                dq.pop_back();// Removes the last element\n            dq.push_back(i);\n            if (i &gt;= k - 1) windowMax.push_back(nums[dq.front()]);\n        }\n        return windowMax;\n    }\n};\n</code></pre>"},{"location":"skills/Algorithm.html#other","title":"OTHER","text":""},{"location":"skills/Algorithm.html#check-if-a-given-binary-tree-is-height-balanced-like-a-red-black-tree","title":"Check if a given Binary Tree is height balanced like a Red-Black Tree","text":"<pre><code>bool isBalancedUtil(struct node* root, int* maxh, int* minh) {\n    // Base case\n    if (root == NULL) {\n        *maxh = *minh = 0;\n        return true;\n    }\n\n    int lmxh, lmnh; // max and min heights of the left subtree\n    int rmxh, rmnh; // max and min heights of the right subtree\n\n    // Check if the left subtree is balanced, also set lmxh and lmnh\n    if (isBalancedUtil(root-&gt;left, &amp;lmxh, &amp;lmnh) == false)\n        return false;\n\n    // Check if the right subtree is balanced, also set rmxh and rmnh\n    if (isBalancedUtil(root-&gt;right, &amp;rmxh, &amp;rmnh) == false)\n        return false;\n\n    // Set the max and min heights of this node for the parent call\n    *maxh = (lmxh &gt; rmxh ? lmxh : rmxh) + 1;\n    *minh = (lmnh &lt; rmnh ? lmnh : rmnh) + 1;\n\n    // See if this node is balanced\n    if (*maxh &lt;= 2 * *minh)\n        return true;\n\n    return false;\n}\n\n// A wrapper over isBalancedUtil()\nbool isBalanced(struct node* root) {\n    int maxh, minh;\n    return isBalancedUtil(root, &amp;maxh, &amp;minh);\n}\n</code></pre>"},{"location":"skills/deeplearning.html","title":"Deep learning","text":"<p> \u7ea6 1282 \u4e2a\u5b57  140 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 6 \u5206\u949f</p> <p>Python Tutorial</p> <p>\u795e\u7ecf\u7f51\u7edc\u4e0e\u6df1\u5ea6\u5b66\u4e60_\u90b1\u9521\u9e4f\u8457_2020\u5e74.pdfPytorch\u5e38\u7528API\u6c47\u603b(\u6301\u7eed\u66f4\u65b0)_pytorch\u7684api-CSDN\u535a\u5ba2PyTorch | \u5e7f\u64ad\u673a\u5236\uff08broadcast\uff09_pytorch broadcast-CSDN\u535a\u5ba2 </p>"},{"location":"skills/deeplearning.html#deep-learning_1","title":"Deep learning","text":"<p>data\u4e09\u8981\u7d20\uff1a\u6a21\u578b model\u3001\u5b66\u4e60\u51c6\u5219 criteria\u3001\u4f18\u5316\u7b97\u6cd5 </p>"},{"location":"skills/deeplearning.html#_1","title":"\u6a21\u578b","text":"<p>\u6a21\u578b\\(f(x;\u03b8)\\)\u673a\u5668\u5b66\u4e60\u7684\u76ee\u6807\u662f\u627e\u5230\u4e00\u4e2a\u6a21\u578b\u6765\u8fd1\u4f3c\u771f\u662f\u6620\u5c04\u51fd\u6570\\(g(x)\\)\u6216\u771f\u662f\u6761\u4ef6\u6982\u7387\u5206\u5e03\\(p_r(y|x)\\)\u975e\u7ebf\u6027\u6a21\u578bKL \u6563\u5ea6\u3001\u4ea4\u53c9\u71b5 </p>"},{"location":"skills/deeplearning.html#_2","title":"\u5b66\u4e60\u51c6\u5219","text":"<p>\u671f\u671b\u98ce\u9669\u635f\u5931\u51fd\u6570\u5e73\u65b9\u3001\u4ea4\u53c9\u71b5\u3001hinge\u7ecf\u9a8c\u98ce\u9669\u6700\u5c0f\u5316 ERM\u7ed3\u6784\u98ce\u9669\u6700\u5c0f\u5316 SRM\uff1a\u6b63\u5219\u5316\u9632\u6b62\u8fc7\u62df\u5408 </p>"},{"location":"skills/deeplearning.html#_3","title":"\u4f18\u5316\u7b97\u6cd5","text":"<p>\uff08\u8d85\uff09\u53c2\u6570\u4f18\u5316\uff08\u6279\u91cf\uff09\u68af\u5ea6\u4e0b\u964d\u6cd5 BGD\uff1a\u6bcf\u6b21\u8fed\u4ee3\u65f6\u8ba1\u7b97\u6bcf\u4e2a\u6837\u672c\u635f\u5931\u51fd\u6570\u7684\u68af\u5ea6\u5e76\u6c42\u548c\u63d0\u524d\u505c\u6b62\uff1a\u9632\u6b62\u8fc7\u62df\u5408\u968f\u673a\uff08\u589e\u91cf\uff09\u68af\u5ea6\u4e0b\u964d\u6cd5 SGD\uff1a\u62bd N \u4e2a\u6837\u672c\uff0c\u7531\u5b83\u4eec\u8ba1\u7b97\u51fa\u6765\u7684\u7ecf\u9a8c\u98ce\u9669\u7684\u68af\u5ea6\u6765\u8fd1\u4f3c\u671f\u671b\u98ce\u9669\u7684\u68af\u5ea6\u5c0f\u6279\u91cf\u68af\u5ea6\u4e0b\u964d\u6cd5\uff1a\u4ecb\u4e8e\u68af\u5ea6\u4e0b\u964d\u6cd5\u548c\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u6cd5\u4e4b\u95f4</p> <p></p>"},{"location":"skills/deeplearning.html#_4","title":"\u7b97\u6cd5","text":"<p>\u524d\u5411\u4f20\u64ad\uff1a\u8f93\u5165\u8fdb\u53bb \u7f51\u7edc\u505a\u4e86\u4ec0\u4e48\u8ba1\u7b97  </p>"},{"location":"skills/deeplearning.html#_5","title":"\u5e38\u7528\u7684\u6fc0\u6d3b\u51fd\u6570","text":"<ol> <li>Sigmoid\uff0c\u4e24\u7aef\u9971\u548c\u51fd\u6570</li> <li> <p>Logistic </p> </li> <li> <p>Tanh     \u9971\u548c\u5b9a\u4e49\u5bf9\u4e8e\u51fd\u6570 \ud835\udc53(\ud835\udc65)\uff0c\u82e5 \ud835\udc65 \u2192 \u2212\u221e \u65f6\uff0c\u5176\u5bfc\u6570 \ud835\udc53\u2032(\ud835\udc65) \u2192 0\uff0c\u5219\u79f0\u5176\u4e3a\u5de6\u9971\u548c\uff0e\u82e5 \ud835\udc65 \u2192 +\u221e \u65f6\uff0c\u5176\u5bfc\u6570 \ud835\udc53\u2032(\ud835\udc65) \u2192 0\uff0c\u5219\u79f0\u5176\u4e3a\u53f3\u9971\u548c\uff0e\u5f53\u540c\u65f6\u6ee1\u8db3\u5de6\u3001\u53f3\u9971\u548c\u65f6\uff0c\u5c31\u79f0\u4e3a\u4e24\u7aef\u9971\u548c</p> </li> <li> <p>Hard-Logistic &amp; hard-Tanh \u4e00\u9636\u6cf0\u52d2\u5c55\u5f00\u7684\u76f4\u7ebf\u8fd1\u4f3c</p> </li> <li>ReLU(PReLU)</li> </ol> <p>\u5176\u4e2d \ud835\udefe\ud835\udc56 \u4e3a \ud835\udc65 \u2264 0 \u65f6\u51fd\u6570\u7684\u659c\u7387\uff0e\u56e0\u6b64\uff0cPReLU \u662f\u975e\u9971\u548c\u51fd\u6570\uff0e\u5982\u679c \ud835\udefe\ud835\udc56 = 0\uff0c\u90a3\u4e48PReLU \u5c31\u9000\u5316\u4e3a ReLU</p> <ol> <li>ELU</li> </ol> <p></p> <ol> <li>Softplus</li> </ol> <p>Softplus \u51fd\u6570\u5176\u5bfc\u6570\u521a\u597d\u662f Logistic \u51fd\u6570\uff0eSoftplus \u51fd\u6570\u867d\u7136\u4e5f\u5177\u6709\u5355\u4fa7\u6291\u5236\u3001\u5bbd\u5174\u594b\u8fb9\u754c\u7684\u7279\u6027\uff0c\u5374\u6ca1\u6709\u7a00\u758f\u6fc0\u6d3b\u6027</p> <ol> <li>Swish</li> </ol> <p></p> <ol> <li>GELU</li> </ol> <p> </p>"},{"location":"skills/deeplearning.html#mlpfnn","title":"MLP\uff08FNN\uff09","text":"<p>\u591a\u5c42\u611f\u77e5\u5668\uff08MLP \uff09\u662f\u73b0\u4ee3\u524d\u9988\u4eba\u5de5\u795e\u7ecf\u7f51\u7edc\uff08ANN\uff09 \u7684\u540d\u79f0\uff0c\u7531\u5177\u6709\u975e\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\u7684\u5b8c\u5168\u8fde\u63a5\u7684\u795e\u7ecf\u5143\u7ec4\u6210\uff0c\u5305\u542b\u81f3\u5c11\u4e09\u5c42\u8282\u70b9\uff1a\u8f93\u5165\u5c42\u3001\u4e00\u4e2a\u6216\u591a\u4e2a\u9690\u85cf\u5c42\u548c\u8f93\u51fa\u5c42\u3002 \u4e00\u5c42\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u6216\u795e\u7ecf\u5143\u4ee5\u4e00\u5b9a\u7684\u6743\u91cd\u8fde\u63a5\u5230\u4e0b\u4e00\u5c42\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\uff0c\u4f7f\u7f51\u7edc\u5b8c\u5168\u8fde\u63a5\u3002 MLP \u4f7f\u7528\u79f0\u4e3a\u53cd\u5411\u4f20\u64ad\u7684\u76d1\u7763\u5b66\u4e60\u6280\u672f\u8fdb\u884c\u8bad\u7ec3\u3002 \u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5c06\u975e\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\u5e94\u7528\u4e8e\u4ece\u524d\u4e00\u5c42\u63a5\u6536\u7684\u52a0\u6743\u8f93\u5165\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u4f20\u9012\u5230\u4e0b\u4e00\u5c42\u3002 \u8fd9\u79cd\u975e\u7ebf\u6027\u4f7f\u5f97 MLP \u80fd\u591f\u5bf9\u8f93\u5165\u548c\u8f93\u51fa\u4e4b\u95f4\u7684\u590d\u6742\u5173\u7cfb\u8fdb\u884c\u5efa\u6a21\uff0c\u800c\u7ebf\u6027\u6a21\u578b\u65e0\u6cd5\u505a\u5230\u8fd9\u4e00\u70b9\u3002 MLP \u53ef\u7528\u4e8e\u4ece\u8ba1\u7b97\u673a\u89c6\u89c9\u5230\u8bed\u97f3\u8bc6\u522b\u7b49\u9886\u57df\u7684\u5404\u79cd\u4efb\u52a1\uff0c\u4f8b\u5982\u5206\u7c7b\u3001\u56de\u5f52\u548c\u7279\u5f81\u5b66\u4e60\u3002 MLP \u7684\u5173\u952e\u7279\u5f81\u5305\u62ec\u5176\u6df1\u5ea6\uff08\u5c42\u6570\uff09\u3001\u5bbd\u5ea6\uff08\u6bcf\u5c42\u4e2d\u7684\u8282\u70b9\u6570\uff09\u3001\u6fc0\u6d3b\u51fd\u6570\uff08\u4f8b\u5982 sigmoid\u3001tanh \u6216 ReLU\uff09\u4ee5\u53ca\u7528\u4e8e\u8bad\u7ec3\u7684\u4f18\u5316\u7b97\u6cd5\uff08\u901a\u5e38\u662f\u67d0\u79cd\u5f62\u5f0f\u7684\u68af\u5ea6\u4e0b\u964d\uff09\u3002 MLP \u88ab\u8ba4\u4e3a\u662f\u6df1\u5ea6\u5b66\u4e60\u7684\u57fa\u7840\u67b6\u6784\uff0c\u5c3d\u7ba1\u5377\u79ef\u795e\u7ecf\u7f51\u7edc (CNN) \u548c\u5faa\u73af\u795e\u7ecf\u7f51\u7edc (RNN) \u7b49\u66f4\u590d\u6742\u7684\u7f51\u7edc\u5206\u522b\u66f4\u5e38\u7528\u4e8e\u6d89\u53ca\u56fe\u50cf\u548c\u5e8f\u5217\u6570\u636e\u7684\u4efb\u52a1\u3002 </p>"},{"location":"skills/deeplearning.html#cnn","title":"CNN","text":"<p>\u6ee4\u6ce2\u5668 Filter\uff0c\u53c8\u53eb\u5377\u79ef\u6838 Kernal\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u662f\u591a\u5c42\u611f\u77e5\u5668\u7684\u53d8\u4f53CNN \u7684\u5c42\u5177\u6709\u63093 \u4e2a\u7ef4\u5ea6\u6392\u5217\u7684\u795e\u7ecf\u5143\uff1a\u5bbd\u5ea6\u3001\u9ad8\u5ea6\u548c\u6df1\u5ea6\u3002[71]\u5377\u79ef\u5c42\u5185\u7684\u6bcf\u4e2a\u795e\u7ecf\u5143\u4ec5\u4e0e\u5176\u4e4b\u524d\u5c42\u7684\u4e00\u5c0f\u90e8\u5206\u533a\u57df\u76f8\u8fde\uff0c\u79f0\u4e3a\u611f\u53d7\u91ce\u3002\u4e0d\u540c\u7c7b\u578b\u7684\u5c42\uff08\u5c40\u90e8\u8fde\u63a5\u548c\u5b8c\u5168\u8fde\u63a5\uff09\u5806\u53e0\u5728\u4e00\u8d77\u5f62\u6210 CNN \u67b6\u6784\u3002\u5c40\u90e8\u8fde\u63a5\uff1a\u9075\u5faa\u611f\u53d7\u91ce\u7684\u6982\u5ff5\uff0cCNN \u901a\u8fc7\u5728\u76f8\u90bb\u5c42\u7684\u795e\u7ecf\u5143\u4e4b\u95f4\u5f3a\u5236\u6267\u884c\u5c40\u90e8\u8fde\u63a5\u6a21\u5f0f\u6765\u5229\u7528\u7a7a\u95f4\u5c40\u90e8\u6027\u3002\u56e0\u6b64\uff0c\u8be5\u67b6\u6784\u786e\u4fdd\u5b66\u4e60\u5230\u7684\u201c\u8fc7\u6ee4\u5668\u201d\u5bf9\u7a7a\u95f4\u5c40\u90e8\u8f93\u5165\u6a21\u5f0f\u4ea7\u751f\u6700\u5f3a\u7684\u54cd\u5e94\u3002\u5806\u53e0\u8bb8\u591a\u8fd9\u6837\u7684\u5c42\u4f1a\u5bfc\u81f4\u975e\u7ebf\u6027\u6ee4\u6ce2\u5668\u53d8\u5f97\u8d8a\u6765\u8d8a\u5168\u5c40\uff08\u5373\u54cd\u5e94\u50cf\u7d20\u7a7a\u95f4\u7684\u66f4\u5927\u533a\u57df\uff09\uff0c\u4ee5\u4fbf\u7f51\u7edc\u9996\u5148\u521b\u5efa\u8f93\u5165\u7684\u5c0f\u90e8\u5206\u7684\u8868\u793a\uff0c\u7136\u540e\u4ece\u5b83\u4eec\u7ec4\u88c5\u66f4\u5927\u533a\u57df\u7684\u8868\u793a\u3002\u5171\u4eab\u6743\u91cd\uff1a\u5728 CNN \u4e2d\uff0c\u6bcf\u4e2a\u8fc7\u6ee4\u5668\u90fd\u4f1a\u5728\u6574\u4e2a\u89c6\u91ce\u4e2d\u590d\u5236\u3002\u8fd9\u4e9b\u590d\u5236\u7684\u5355\u5143\u5171\u4eab\u76f8\u540c\u7684\u53c2\u6570\u5316\uff08\u6743\u91cd\u5411\u91cf\u548c\u504f\u5dee\uff09\u5e76\u5f62\u6210\u7279\u5f81\u56fe\u3002\u8fd9\u610f\u5473\u7740\u7ed9\u5b9a\u5377\u79ef\u5c42\u4e2d\u7684\u6240\u6709\u795e\u7ecf\u5143\u5728\u5176\u7279\u5b9a\u54cd\u5e94\u573a\u5185\u54cd\u5e94\u76f8\u540c\u7684\u7279\u5f81\u3002\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u590d\u5236\u5355\u5143\u5141\u8bb8\u6240\u5f97\u5230\u7684\u6fc0\u6d3b\u56fe\u5728\u89c6\u91ce\u4e2d\u8f93\u5165\u7279\u5f81\u7684\u4f4d\u7f6e\u79fb\u52a8\u7684\u60c5\u51b5\u4e0b\u662f\u7b49\u53d8\u7684\uff0c\u5373\u5b83\u4eec\u6388\u4e88\u5e73\u79fb\u7b49\u53d8\u6027\u2014\u2014\u5047\u8bbe\u8be5\u5c42\u7684\u6b65\u5e45\u4e3a\u4e00\u3002[72]\u6c60\u5316\uff1a\u5728 CNN \u7684\u6c60\u5316\u5c42\u4e2d\uff0c\u7279\u5f81\u56fe\u88ab\u5212\u5206\u4e3a\u77e9\u5f62\u5b50\u533a\u57df\uff0c\u6bcf\u4e2a\u77e9\u5f62\u4e2d\u7684\u7279\u5f81\u88ab\u72ec\u7acb\u4e0b\u91c7\u6837\u4e3a\u5355\u4e2a\u503c\uff0c\u901a\u5e38\u91c7\u7528\u5e73\u5747\u503c\u6216\u6700\u5927\u503c\u3002\u9664\u4e86\u51cf\u5c0f\u7279\u5f81\u56fe\u7684\u5927\u5c0f\u4e4b\u5916\uff0c\u6c60\u5316\u64cd\u4f5c\u8fd8\u4e3a\u5176\u4e2d\u5305\u542b\u7684\u7279\u5f81\u8d4b\u4e88\u4e00\u5b9a\u7a0b\u5ea6\u7684\u5c40\u90e8\u5e73\u79fb\u4e0d\u53d8\u6027\uff0c\u4ece\u800c\u4f7f CNN \u5bf9\u4e8e\u5176\u4f4d\u7f6e\u7684\u53d8\u5316\u66f4\u52a0 ROBUST\u3002</p>"},{"location":"skills/deeplearning.html#classification","title":"Classification","text":"<p>Example MNIST<pre><code>import torch\nfrom torch import nn\nfrom torch import optim\nfrom torch.utils.data import DataLoader\nfrom torchvision.datasets import MNIST\nfrom torchvision.transforms import ToTensor\nfrom tqdm import tqdm  # visual bar\nimport matplotlib.pyplot as plt\n\nclass Mymodel(nn.Module):\n    def __init__(self, in_channels, classnumber):\n        super(Mymodel, self).__init__()\n        self.mymodel = nn.Sequential(\n            nn.Conv2d(\n                in_channels=in_channels,\n                out_channels=32,\n                kernel_size=3,\n                # stride=1,\n                padding=1,\n            ),\n            nn.BatchNorm2d(32),  # \u6b63\u5219\u5316\n            nn.ReLU(),\n            nn.MaxPool2d(2,2),  # 28/2=14\n            nn.Conv2d(\n                in_channels=32,\n                out_channels=32,\n                kernel_size=3,\n                # stride=1,\n                # padding=0,\n            ),\n            # 14-2=12\n            nn.BatchNorm2d(32),  # \u6b63\u5219\u5316\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),  # 12/2=6\n            nn.Conv2d(\n                in_channels=32,\n                out_channels=32,\n                kernel_size=3,\n                # stride=1,\n                # padding=0\n            ),\n            # 6-2=4\n            nn.BatchNorm2d(32),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),  # 4/2=2\n        )\n\n        self.filter = nn.Sequential(\n            nn.Linear(32*2*2, 64),\n            nn.ReLU(),\n            nn.Linear(64, classnumber)\n        )\n    def forward(self,inputs):\n        inputs = self.mymodel(inputs)\n        inputs = inputs.view(-1, 32*2*2)\n        inputs = self.classifier(inputs)\n        return inputs\n\n\nif __name__ == '__main__':\n    train_dataset = MNIST(root=\"D:\\File\\CODE\\python\\dataset\")\n    train_dataloader = DataLoader(dataset=train_dataset, batch_size=64, shuffle= True)\n\n    test_dataset = MNIST(root= \"D:\\File\\CODE\\python\\dataset\", train=False, transform=ToTensor())\n    test_dataloader = DataLoader(dataset=test_dataset, batch_size=10)\n\n    device = \"cuda\"\n    model = Mymodel(in_channels=1, classnumber=10).to(device)\n\n    epochs = 100\n    optimizer = optim.Adam(model.parameters()) # lr=1e-3 by default\n    loss_fn = nn.CrossEntropyLoss()  # \u4ea4\u53c9\u71b5\n\n    for i in range(epochs):\n        model.train()\n        train_data = tqdm(train_dataloader)\n\n        mean_loss, acc = 0.0, 0.0  # \u635f\u5931\u3001\u7cbe\u786e\u5ea6\n        data_num = 0\n\n        for x,y in train_data:  # x is input, y is label or target\n            x = x.to(device)  # Move input and target to GPU if available\n            y = y.to(device)\n\n            predicts = model(x)  # \u5148\u9884\u6d4b\n            # predicts: This is the output of the model for the current batch of inputs x.\n            # [batch_size, n_classes], where n_classes is the number of classes in the classification problem.\n            loss = loss_fn(predicts, y)  # \u518d\u7b97\u635f\u5931\n            optimizer.zero_grad() # \u4f18\u5316\u5668\u68af\u5ea6\u6e05\u96f6\n            loss.backward()  # \u53cd\u5411\u4f20\u64ad\n            optimizer.step()  # \u66f4\u65b0\u6a21\u578b\u53c2\u6570\n\n            acc += torch.sum(torch.argmax(predicts,dim=1) == y).item()\n            # torch.argmax(predicts, dim=1): This function finds the indices (i.e., the classes)\n            # of the maximum values along dimension 1 (the class dimension) of predicts.\n            # This effectively performs a prediction by selecting the class with the highest score for each input in the batch.\n            # The output shape matches the batch size, containing the predicted class for each input.\n\n            # torch.argmax(predicts, dim=1) == y: This compares the predicted classes to the true labels y.\n            # If a prediction matches the true label, the comparison returns True; otherwise, it returns False.\n            # this comparison effectively counts the correct predictions by returning a tensor of 1s and 0s.\n\n            # torch.sum(...): This function sums up the values in the tensor of 1s (correct predictions) and 0s (incorrect predictions),\n            # giving the total number of correct predictions in the batch.\n\n            # item(): This method converts a PyTorch scalar tensor (a tensor with a single value) to a Python number.\n            # It's used here to extract the number of correct predictions as a Python integer or float, which can then be accumulated in the acc variable.\n\n            # acc += ...: This accumulates the number of correct predictions over all batches processed in the epoch.\n            # By adding up the number of correct predictions after processing each batch, you keep a running total of how many samples have been correctly classified so far during the epoch.\n            mean_loss /= loss.item() * x.size(0)\n            data_num += x.size(0)\n            train_data.set_description(f\"Training..Epoach:{i+1}/{epochs},Loss:{loss.item(* x.size(0)):.4f}\")\n\n        mean_loss /=data_num\n        acc /= data_num\n        print(f\"Training acc:{acc:.4f},Loss:{mean_loss:.4f}\")\n\n        model.eval()  # Set the model to evaluation mode\u8bc4\u4f30\u6a21\u5f0f\n        test_data = tqdm(test_dataloader)  # Wrap dataloader with tqdm for a progress bar\n        mean_loss, acc = 0.0, 0.0\n        data_num = 0\n        with torch.no_grad():  # Disable gradient calculation\u6ca1\u6709\u68af\u5ea6\u8ba1\u7b97\u548c\u66f4\u65b0\n            for x, y in test_data:\n                x = x.to(device)\n                y = y.to(device)\n                predicts = model(x)\n                loss = loss_fn(predicts, y)\n                # \u4e0d\u9700\u8981\u4f18\u5316\u548c\u66f4\u65b0\n                acc += torch.sum(torch.argmax(predicts, dim=1) == y).item()\n                mean_loss += loss.item() * x.size(0)\n                data_num += x.size(0)\n                test_data.set_description(\n                    f\"Evaluation ... Epoch: {i + 1}/{epochs}, Loss: {loss.item() * x.size(0):.4f}\")\n            mean_loss /= data_num\n            acc /= data_num\n            print(f\"\\nTraining Acc: {acc:.4f}, Loss: {mean_loss:.4f}\")\n\n        torch.save(model.state_dict(), \"./model.pth\")\n</code></pre></p>"},{"location":"work/Interview.html","title":"\u9762\u8bd5","text":"<p> \u7ea6 923 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 3 \u5206\u949f</p>"},{"location":"work/Interview.html#_2","title":"\u51c6\u5907","text":""},{"location":"work/Interview.html#_3","title":"\u5185\u5bb9","text":""},{"location":"work/Interview.html#_4","title":"\u5c97\u4f4d\u8981\u6c42","text":"<p>1\uff09\u57fa\u672c\u8981\u6c42\uff1a\u672c\u79d1\u53ca\u4ee5\u4e0a\u5b66\u5386\u5728\u8bfb\u751f\uff082025\u5e74\u30012026\u5e74\u6bd5\u4e1a\u540c\u5b66\u4f18\u5148\uff09\u3002 2\uff09\u4e13\u4e1a\u77e5\u8bc6\u8981\u6c42\uff1a --\u4e86\u89e3\u79fb\u52a8\u901a\u4fe1\u539f\u7406\u3001\u901a\u4fe1\u7f51\u7edc\u57fa\u7840\u77e5\u8bc6\u3002 --\u638c\u63e1\u79fb\u52a8\u7f51\u7edc\u6216\u7cfb\u7edf\u7ed3\u6784\u3001\u8bbe\u5907\u8f6f\u786c\u4ef6\u6784\u6210\u53ca\u529f\u80fd\u3002 --\u719f\u6089\u5e38\u89c1\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u638c\u63e1\u6570\u636e\u5e93\u7684\u57fa\u672c\u77e5\u8bc6\u3001\u65b9\u6cd5\u53ca\u6d41\u7a0b\u3002 3\uff09\u6280\u80fd\u8981\u6c42\uff1a --\u5de5\u4f5c\u8d23\u4efb\u5fc3\u5f3a\uff0c\u6709\u8f83\u5f3a\u7684\u56e2\u961f\u5408\u4f5c\u7cbe\u795e\u548c\u5bf9\u5916\u670d\u52a1\u7684\u89c2\u5ff5\u3002 --\u6709\u4e00\u5b9a\u7684\u6587\u5b57\u5904\u7406\u548c\u63cf\u8ff0\u80fd\u529b\uff0c\u5177\u5907\u8f83\u5f3a\u7684\u4e66\u5199\u80fd\u529b\u3002 --\u5177\u5907\u8f83\u597d\u7684\u5206\u6790\u5224\u65ad\u80fd\u529b\u3001\u8868\u8fbe\u6c9f\u901a\u80fd\u529b\u3002</p> <p>\u6839\u636e\u60c5\u51b5\u53d8\u5316</p>"},{"location":"work/Interview.html#_5","title":"\u7406\u8bba\u6cd5\u5219","text":"<p>STAR\uff1a situation+task+action+result</p> <p>CAR\uff1a challenge+action+result</p> <p>FAB\uff1a features+advantages+benefits</p> <p>PAR\uff1a problem+action+result</p>"},{"location":"work/Interview.html#_6","title":"\u6280\u672f\u95ee\u9898","text":"<ol> <li>map \u4e3a\u4ec0\u4e48\u662f\u6709\u5e8f\uff0c\u4e3a\u4ec0\u4e48\u67e5\u627e\u7684\u65f6\u95f4\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u5230 O(1)\uff1f</li> <li>cpp \u7f16\u8bd1\u94fe\u63a5\u8fc7\u7a0b\uff1f\u767e\u5ea6\u641c\u7d22\u90e8\u95e8C++\u4e00\u9762\u9762\u7ecf\uff0c\u8d85\u8be6\u7ec6\u89e3\u7b54\uff0c\u4e07\u5b57\u9762\u7ecf\uff0c\u503c\u5f97\u6536\u85cf\uff01 (qq.com)</li> <li>\u53f3\u503c\u5f15\u7528\uff0c\u667a\u80fd\u6307\u9488\uff1f</li> <li>\u6b7b\u9501\u53d1\u751f\u539f\u56e0\uff0c\u600e\u4e48\u9632\u6b62\uff1f</li> <li>\u6d4f\u89c8\u5668\u53d1\u9001url\u5230\u663e\u793a\u7f51\u9875\u5168\u8fc7\u7a0b\uff1f</li> <li>\u5bf9\u9762\u5411\u5bf9\u8c61\u7684\u7406\u89e3\uff1f\u79d1\u5927\u8baf\u98deC++\u9762\u7ecf\uff0c\u5efa\u8bae\u6536\u85cf~ (qq.com)</li> <li>\u6307\u9488\u548c\u5f15\u7528\u7684\u533a\u522b\uff1f</li> <li>\u8986\u76d6\u548c\u91cd\u8f7d\u7684\u533a\u522b\uff1f</li> <li>\u7ebf\u7a0b\u751f\u547d\u5468\u671f\u4e2d\u53ef\u80fd\u51fa\u73b0\u7684\u72b6\u6001\uff1f</li> <li></li> </ol>"},{"location":"work/Interview.html#_7","title":"\u5176\u4ed6\u53ef\u80fd\u7684\u63d0\u95ee\u4e0e\u56de\u7b54","text":"<p>\u201c\u7ecf\u9a8c\u4e0d\u8db3\uff1f\u201d</p> <p>\u867d\u7136\u6211\u5728\u8fd9\u4e00\u65b9\u9762\u7ecf\u9a8c\u6709\u6240\u6b20\u7f3a\uff0c\u4f46\u6211\u5bf9\u8d35\u516c\u53f8\u53ca\u8fd9\u4e2a\u5c97\u4f4d\u53ef\u662f\u5fc3\u4eea\u5df2\u4e45\u3002\u6211\u5bf9\u5c97\u4f4d\u7684\u8981\u6c42\u4e86\u5982\u6307\u638c\uff0c\u91cd\u5728\u8fd9\u4e2a\u90a3\u4e2a\uff08\u5177\u4f53\u8bf4\u8bf4\uff09\uff0c\u6211\u4e4b\u524d\u7684\u7ecf\u5386\u4e5f\u5c55\u73b0\u4e86\u6211\u5339\u914d\u5c97\u4f4d\u7684\u80fd\u529b\uff0c\u5b66\u4e60\u80fd\u529b\u5f3a\uff0c\u4e0a\u624b\u5feb\uff0c\u7edd\u5bf9\u80fd\u80dc\u4efb\uff01</p> <p>\u201c\u8fd8\u6709\u4ec0\u4e48\u95ee\u9898\uff1f\u201d</p> <p>\u8bf7\u95ee\u8fd9\u4e2a\u5c97\u4f4d\u7684\u664b\u5347\u8def\u5f84\u662f\u600e\u6837\u7684\uff1f\u5bf9\u4e8e\u65b0\u4eba\u6709\u4ec0\u4e48\u7279\u522b\u7684\u57f9\u517b\u8ba1\u5212\u5417\uff1f\u6211\u5bf9\u8fd9\u4e2a\u804c\u4f4d\u5145\u6ee1\u671f\u5f85\uff0c\u5e0c\u671b\u80fd\u4e86\u89e3\u66f4\u591a\uff01</p> <p>\u8bf7\u95ee\u8fd9\u4e2a\u56e2\u961f\u662f\u5982\u4f55\u5206\u5de5\u534f\u4f5c\u7684\uff1f\u6211\u4e2a\u4eba\u6bd4\u8f83\u64c5\u957f\u8de8\u90e8\u95e8\u6c9f\u901a\uff0c\u4e0d\u77e5\u9053\u662f\u5426\u5bf9\u5927\u5bb6\u6709\u5e2e\u52a9\u3002</p> <p>\u5982\u679c\u6211\u80fd\u591f\u5728\u8fd9\u4e2a\u5c97\u4f4d\u4e0a\u80dc\u4efb\u6109\u5feb\uff0c\u516c\u53f8\u5185\u90e8\u8fd8\u6709\u54ea\u4e9b\u53d1\u5c55\u8def\u5f84\u53ef\u4ee5\u9009\u62e9\uff1f\u201d\uff0c\u201c\u8d35\u53f8\u5bf9\u8fd9\u4e2a\u5c97\u4f4d\u7684\u5458\u5de5\u6709\u54ea\u4e9b\u57f9\u517b\u8ba1\u5212\uff1f</p> <p>\u6211\u5728\u8d35\u53f8\u5b98\u7f51\u4e0a\u770b\u5230\u2018\u7528\u6237\u81f3\u4e0a\u2019\u662f\u516c\u53f8\u7684\u6838\u5fc3\u4ef7\u503c\u89c2\uff0c\u4e0d\u77e5\u9053\u8fd9\u5728\u65e5\u5e38\u5de5\u4f5c\u4e2d\u662f\u5982\u4f55\u4f53\u73b0\u7684\u5462\uff1f</p> <p>\u201c\u66f4\u597d\u7684offer\uff1f\u201d</p> <p>\u201c\u9996\u5148\uff0c\u6211\u975e\u5e38\u611f\u6fc0\u80fd\u5f97\u5230\u8fd9\u6b21\u9762\u8bd5\u7684\u673a\u4f1a\uff0c\u4e5f\u5bf9\u60a8\u63d0\u51fa\u7684\u8fd9\u4e2a\u95ee\u9898\u8868\u793a\u7406\u89e3\u3002\u6211\u8ba4\u4e3a\uff0c\u9009\u62e9\u4e00\u4e2a\u516c\u53f8\u5e76\u4e0d\u4ec5\u4ec5\u662f\u770b\u5f85\u9047\u6216\u8005offer\u7684\u4f18\u52a3\uff0c\u66f4\u91cd\u8981\u7684\u662f\u770b\u516c\u53f8\u7684\u53d1\u5c55\u524d\u666f\u3001\u56e2\u961f\u6c1b\u56f4\u4ee5\u53ca\u6211\u80fd\u5426\u5728\u8fd9\u91cc\u5b9e\u73b0\u81ea\u6211\u4ef7\u503c\u3002</p> <p>\u5982\u679c\u771f\u7684\u6709\u66f4\u597d\u7684offer\u6446\u5728\u6211\u9762\u524d\uff0c\u6211\u4f1a\u975e\u5e38\u8ba4\u771f\u5730\u8003\u8651\u3002\u4f46\u662f\uff0c\u6211\u66f4\u52a0\u770b\u91cd\u7684\u662f\u6211\u4e0e\u8d35\u516c\u53f8\u7684\u5951\u5408\u5ea6\uff0c\u4ee5\u53ca\u6211\u80fd\u4e3a\u8d35\u516c\u53f8\u5e26\u6765\u7684\u4ef7\u503c\u548c\u8d35\u516c\u53f8\u80fd\u4e3a\u6211\u63d0\u4f9b\u7684\u6210\u957f\u7a7a\u95f4\u3002\u6211\u5df2\u7ecf\u6df1\u5165\u4e86\u89e3\u8fc7\u8d35\u516c\u53f8\u7684\u6587\u5316\u548c\u53d1\u5c55\u65b9\u5411\uff0c\u89c9\u5f97\u8fd9\u4e0e\u6211\u7684\u804c\u4e1a\u89c4\u5212\u548c\u4e2a\u4eba\u53d1\u5c55\u76ee\u6807\u975e\u5e38\u5951\u5408\u3002\u6211\u76f8\u4fe1\uff0c\u5728\u8fd9\u91cc\u6211\u53ef\u4ee5\u63a5\u89e6\u5230\u66f4\u591a\u7684\u5b66\u4e60\u548c\u53d1\u5c55\u673a\u4f1a\uff0c\u4e5f\u80fd\u4e3a\u516c\u53f8\u7684\u53d1\u5c55\u505a\u51fa\u66f4\u5927\u7684\u8d21\u732e\u3002</p> <p>\u6240\u4ee5\uff0c\u5373\u4f7f\u9762\u4e34\u66f4\u597d\u7684offer\uff0c\u6211\u4e5f\u4f1a\u614e\u91cd\u8003\u8651\u81ea\u5df1\u662f\u5426\u771f\u7684\u9002\u5408\u90a3\u4e2a\u673a\u4f1a\uff0c\u4ee5\u53ca\u90a3\u4e2a\u673a\u4f1a\u662f\u5426\u771f\u7684\u6bd4\u6211\u73b0\u5728\u5728\u8d35\u516c\u53f8\u7684\u524d\u666f\u66f4\u597d\u3002\u603b\u7684\u6765\u8bf4\uff0c\u6211\u66f4\u52a0\u6ce8\u91cd\u7684\u662f\u957f\u671f\u7684\u53d1\u5c55\u548c\u6210\u957f\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u773c\u524d\u7684\u5229\u76ca\u3002\u201d</p>"},{"location":"work/Interview.html#_8","title":"\u603b\u7ed3","text":""}]}